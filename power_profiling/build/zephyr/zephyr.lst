
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000cc0 	.word	0x20000cc0
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001359 	.word	0x00001359
   8:	0000339b 	.word	0x0000339b
   c:	00001389 	.word	0x00001389
		if (fdtable[fd].obj == NULL) {
  10:	00001389 	.word	0x00001389
  14:	00001389 	.word	0x00001389
  18:	00001389 	.word	0x00001389
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	000011c9 	.word	0x000011c9
  30:	00001389 	.word	0x00001389
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00001181 	.word	0x00001181
  3c:	00003375 	.word	0x00003375

00000040 <_irq_vector_table>:
  40:	00001319 00001319 00001319 00001319     ................
  50:	00001319 00001319 00001319 00001319     ................
  60:	00001319 00001319 00001319 00001319     ................
  70:	00001319 00001319 00001319 00001319     ................
  80:	00001319 00001319 00001319 00001319     ................
  90:	00001319 00001319 00001319 00001319     ................
  a0:	00001319 00001319 00001319 00001319     ................
  b0:	00001319 00001319 00001319 00001319     ................
  c0:	00001319 00001319 00001319 00001319     ................
  d0:	00001319 00001319 00001319              ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b96e 	b.w	3d0 <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9d08      	ldr	r5, [sp, #32]
     112:	460e      	mov	r6, r1
     114:	4604      	mov	r4, r0
     116:	468c      	mov	ip, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8081 	bne.w	220 <CONFIG_FLASH_SIZE+0x20>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d945      	bls.n	1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa06 f302 	lsl.w	r3, r6, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0c03 	orr.w	ip, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbc f6fe 	udiv	r6, ip, lr
     148:	b2b9      	uxth	r1, r7
     14a:	fb0e cc16 	mls	ip, lr, r6, ip
     14e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     152:	fb06 f001 	mul.w	r0, r6, r1
     156:	4298      	cmp	r0, r3
     158:	d909      	bls.n	16e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x24>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     160:	f080 8115 	bcs.w	38e <CONFIG_FLASH_SIZE+0x18e>
     164:	4298      	cmp	r0, r3
     166:	f240 8112 	bls.w	38e <CONFIG_FLASH_SIZE+0x18e>
     16a:	3e02      	subs	r6, #2
     16c:	443b      	add	r3, r7
     16e:	1a1b      	subs	r3, r3, r0
     170:	b2a4      	uxth	r4, r4
     172:	fbb3 f0fe 	udiv	r0, r3, lr
     176:	fb0e 3310 	mls	r3, lr, r0, r3
     17a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     17e:	fb00 f101 	mul.w	r1, r0, r1
     182:	42a1      	cmp	r1, r4
     184:	d909      	bls.n	19a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x50>
     186:	193c      	adds	r4, r7, r4
     188:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     18c:	f080 8101 	bcs.w	392 <CONFIG_FLASH_SIZE+0x192>
     190:	42a1      	cmp	r1, r4
     192:	f240 80fe 	bls.w	392 <CONFIG_FLASH_SIZE+0x192>
     196:	3802      	subs	r0, #2
     198:	443c      	add	r4, r7
     19a:	1a64      	subs	r4, r4, r1
     19c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1a0:	2100      	movs	r1, #0
     1a2:	b11d      	cbz	r5, 1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     1a4:	40d4      	lsrs	r4, r2
     1a6:	2300      	movs	r3, #0
     1a8:	e9c5 4300 	strd	r4, r3, [r5]
     1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b0:	b902      	cbnz	r2, 1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1b2:	deff      	udf	#255	; 0xff
     1b4:	fab2 f282 	clz	r2, r2
     1b8:	2a00      	cmp	r2, #0
     1ba:	d14f      	bne.n	25c <CONFIG_FLASH_SIZE+0x5c>
     1bc:	1bcb      	subs	r3, r1, r7
     1be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c2:	fa1f f887 	uxth.w	r8, r7
     1c6:	2101      	movs	r1, #1
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
     1cc:	0c26      	lsrs	r6, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
     1d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1d6:	fb08 f30c 	mul.w	r3, r8, ip
     1da:	42b3      	cmp	r3, r6
     1dc:	d907      	bls.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1de:	19be      	adds	r6, r7, r6
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1e4:	d202      	bcs.n	1ec <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa2>
     1e6:	42b3      	cmp	r3, r6
     1e8:	f200 80eb 	bhi.w	3c2 <CONFIG_FLASH_SIZE+0x1c2>
     1ec:	4684      	mov	ip, r0
     1ee:	1af6      	subs	r6, r6, r3
     1f0:	b2a3      	uxth	r3, r4
     1f2:	fbb6 f0fe 	udiv	r0, r6, lr
     1f6:	fb0e 6610 	mls	r6, lr, r0, r6
     1fa:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     1fe:	fb08 f800 	mul.w	r8, r8, r0
     202:	45a0      	cmp	r8, r4
     204:	d907      	bls.n	216 <CONFIG_FLASH_SIZE+0x16>
     206:	193c      	adds	r4, r7, r4
     208:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     20c:	d202      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20e:	45a0      	cmp	r8, r4
     210:	f200 80d2 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     214:	4618      	mov	r0, r3
     216:	eba4 0408 	sub.w	r4, r4, r8
     21a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     21e:	e7c0      	b.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     220:	428b      	cmp	r3, r1
     222:	d908      	bls.n	236 <CONFIG_FLASH_SIZE+0x36>
     224:	2d00      	cmp	r5, #0
     226:	f000 80af 	beq.w	388 <CONFIG_FLASH_SIZE+0x188>
     22a:	2100      	movs	r1, #0
     22c:	e9c5 0600 	strd	r0, r6, [r5]
     230:	4608      	mov	r0, r1
     232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     236:	fab3 f183 	clz	r1, r3
     23a:	2900      	cmp	r1, #0
     23c:	d149      	bne.n	2d2 <CONFIG_FLASH_SIZE+0xd2>
     23e:	42b3      	cmp	r3, r6
     240:	d302      	bcc.n	248 <CONFIG_FLASH_SIZE+0x48>
     242:	4282      	cmp	r2, r0
     244:	f200 80bb 	bhi.w	3be <CONFIG_FLASH_SIZE+0x1be>
     248:	1a84      	subs	r4, r0, r2
     24a:	eb66 0303 	sbc.w	r3, r6, r3
     24e:	2001      	movs	r0, #1
     250:	469c      	mov	ip, r3
     252:	2d00      	cmp	r5, #0
     254:	d0aa      	beq.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     256:	e9c5 4c00 	strd	r4, ip, [r5]
     25a:	e7a7      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     25c:	f1c2 0320 	rsb	r3, r2, #32
     260:	4097      	lsls	r7, r2
     262:	40d8      	lsrs	r0, r3
     264:	4091      	lsls	r1, r2
     266:	40de      	lsrs	r6, r3
     268:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     26c:	4308      	orrs	r0, r1
     26e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     272:	fbb6 f1fe 	udiv	r1, r6, lr
     276:	fa1f f887 	uxth.w	r8, r7
     27a:	fb0e 6611 	mls	r6, lr, r1, r6
     27e:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     282:	fb01 f308 	mul.w	r3, r1, r8
     286:	42b3      	cmp	r3, r6
     288:	fa04 f402 	lsl.w	r4, r4, r2
     28c:	d909      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     28e:	19be      	adds	r6, r7, r6
     290:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     294:	f080 808e 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     298:	42b3      	cmp	r3, r6
     29a:	f240 808b 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	3902      	subs	r1, #2
     2a0:	443e      	add	r6, r7
     2a2:	1af3      	subs	r3, r6, r3
     2a4:	b286      	uxth	r6, r0
     2a6:	fbb3 f0fe 	udiv	r0, r3, lr
     2aa:	fb0e 3310 	mls	r3, lr, r0, r3
     2ae:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2b2:	fb00 f308 	mul.w	r3, r0, r8
     2b6:	42b3      	cmp	r3, r6
     2b8:	d907      	bls.n	2ca <CONFIG_FLASH_SIZE+0xca>
     2ba:	19be      	adds	r6, r7, r6
     2bc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2c0:	d274      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c2:	42b3      	cmp	r3, r6
     2c4:	d972      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c6:	3802      	subs	r0, #2
     2c8:	443e      	add	r6, r7
     2ca:	1af3      	subs	r3, r6, r3
     2cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d0:	e77a      	b.n	1c8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x7e>
     2d2:	f1c1 0720 	rsb	r7, r1, #32
     2d6:	fa03 f401 	lsl.w	r4, r3, r1
     2da:	fa22 f307 	lsr.w	r3, r2, r7
     2de:	431c      	orrs	r4, r3
     2e0:	fa20 f907 	lsr.w	r9, r0, r7
     2e4:	fa06 f301 	lsl.w	r3, r6, r1
     2e8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2ec:	40fe      	lsrs	r6, r7
     2ee:	ea49 0903 	orr.w	r9, r9, r3
     2f2:	ea4f 4319 	mov.w	r3, r9, lsr #16
     2f6:	fbb6 fefc 	udiv	lr, r6, ip
     2fa:	fa1f f884 	uxth.w	r8, r4
     2fe:	fb0c 661e 	mls	r6, ip, lr, r6
     302:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     306:	fb0e fa08 	mul.w	sl, lr, r8
     30a:	45b2      	cmp	sl, r6
     30c:	fa02 f201 	lsl.w	r2, r2, r1
     310:	fa00 f301 	lsl.w	r3, r0, r1
     314:	d908      	bls.n	328 <CONFIG_FLASH_SIZE+0x128>
     316:	19a6      	adds	r6, r4, r6
     318:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     31c:	d248      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     31e:	45b2      	cmp	sl, r6
     320:	d946      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     322:	f1ae 0e02 	sub.w	lr, lr, #2
     326:	4426      	add	r6, r4
     328:	eba6 060a 	sub.w	r6, r6, sl
     32c:	fa1f f989 	uxth.w	r9, r9
     330:	fbb6 f0fc 	udiv	r0, r6, ip
     334:	fb0c 6610 	mls	r6, ip, r0, r6
     338:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45b0      	cmp	r8, r6
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	19a6      	adds	r6, r4, r6
     346:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45b0      	cmp	r8, r6
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	4426      	add	r6, r4
     354:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     358:	eba6 0608 	sub.w	r6, r6, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454e      	cmp	r6, r9
     362:	46c4      	mov	ip, r8
     364:	46ce      	mov	lr, r9
     366:	d318      	bcc.n	39a <CONFIG_FLASH_SIZE+0x19a>
     368:	d015      	beq.n	396 <CONFIG_FLASH_SIZE+0x196>
     36a:	b375      	cbz	r5, 3ca <CONFIG_FLASH_SIZE+0x1ca>
     36c:	ebb3 020c 	subs.w	r2, r3, ip
     370:	eb66 060e 	sbc.w	r6, r6, lr
     374:	fa06 f707 	lsl.w	r7, r6, r7
     378:	fa22 f301 	lsr.w	r3, r2, r1
     37c:	40ce      	lsrs	r6, r1
     37e:	431f      	orrs	r7, r3
     380:	e9c5 7600 	strd	r7, r6, [r5]
     384:	2100      	movs	r1, #0
     386:	e711      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     388:	4629      	mov	r1, r5
     38a:	4628      	mov	r0, r5
     38c:	e70e      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     38e:	4666      	mov	r6, ip
     390:	e6ed      	b.n	16e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x24>
     392:	4618      	mov	r0, r3
     394:	e701      	b.n	19a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x50>
     396:	4543      	cmp	r3, r8
     398:	d2e7      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39a:	ebb8 0c02 	subs.w	ip, r8, r2
     39e:	eb69 0404 	sbc.w	r4, r9, r4
     3a2:	3801      	subs	r0, #1
     3a4:	46a6      	mov	lr, r4
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4660      	mov	r0, ip
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78c      	b.n	2ca <CONFIG_FLASH_SIZE+0xca>
     3b0:	4686      	mov	lr, r0
     3b2:	e7b9      	b.n	328 <CONFIG_FLASH_SIZE+0x128>
     3b4:	4661      	mov	r1, ip
     3b6:	e774      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     3b8:	3802      	subs	r0, #2
     3ba:	443c      	add	r4, r7
     3bc:	e72b      	b.n	216 <CONFIG_FLASH_SIZE+0x16>
     3be:	4608      	mov	r0, r1
     3c0:	e747      	b.n	252 <CONFIG_FLASH_SIZE+0x52>
     3c2:	f1ac 0c02 	sub.w	ip, ip, #2
     3c6:	443e      	add	r6, r7
     3c8:	e711      	b.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     3ca:	4629      	mov	r1, r5
     3cc:	e6ee      	b.n	1ac <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x62>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <main>:
}

SYS_INIT(disable_ds_1, PRE_KERNEL_2, 0);

void main(void)
{
     3d4:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3d6:	4828      	ldr	r0, [pc, #160]	; (478 <CONFIG_MAIN_STACK_SIZE+0x78>)
     3d8:	f001 fef0 	bl	21bc <z_impl_device_get_binding>
	int rc;
	struct device *cons = device_get_binding(CONSOLE_LABEL);

	printk("\n%s system off demo\n", CONFIG_BOARD);
     3dc:	4927      	ldr	r1, [pc, #156]	; (47c <CONFIG_MAIN_STACK_SIZE+0x7c>)
     3de:	4604      	mov	r4, r0
     3e0:	4827      	ldr	r0, [pc, #156]	; (480 <CONFIG_MAIN_STACK_SIZE+0x80>)
     3e2:	f002 fd79 	bl	2ed8 <printk>
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
     3e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     3ea:	220c      	movs	r2, #12
     3ec:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
     3f0:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
	nrf_gpio_cfg_input(DT_GPIO_PIN(DT_NODELABEL(button0), gpios),
			   NRF_GPIO_PIN_PULLUP);
	nrf_gpio_cfg_sense_set(DT_GPIO_PIN(DT_NODELABEL(button0), gpios),
			       NRF_GPIO_PIN_SENSE_LOW);

	printk("Busy-wait %u s\n", BUSY_WAIT_S);
     3f4:	4823      	ldr	r0, [pc, #140]	; (484 <CONFIG_MAIN_STACK_SIZE+0x84>)

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
     3f6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
     3fa:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
     3fe:	2102      	movs	r1, #2
     400:	f002 fd6a 	bl	2ed8 <printk>
	z_impl_k_busy_wait(usec_to_wait);
     404:	4820      	ldr	r0, [pc, #128]	; (488 <CONFIG_MAIN_STACK_SIZE+0x88>)
     406:	f003 f9a5 	bl	3754 <z_impl_k_busy_wait>
	k_busy_wait(BUSY_WAIT_S * USEC_PER_SEC);

	printk("Busy-wait %u s with UART off\n", BUSY_WAIT_S);
     40a:	4820      	ldr	r0, [pc, #128]	; (48c <CONFIG_MAIN_STACK_SIZE+0x8c>)
     40c:	2102      	movs	r1, #2
     40e:	f002 fd63 	bl	2ed8 <printk>
	rc = device_set_power_state(cons, DEVICE_PM_LOW_POWER_STATE, NULL, NULL);
     412:	2102      	movs	r1, #2
     414:	4620      	mov	r0, r4
     416:	f002 fd35 	bl	2e84 <device_set_power_state.constprop.0>
     41a:	481b      	ldr	r0, [pc, #108]	; (488 <CONFIG_MAIN_STACK_SIZE+0x88>)
     41c:	f003 f99a 	bl	3754 <z_impl_k_busy_wait>
	k_busy_wait(BUSY_WAIT_S * USEC_PER_SEC);
	rc = device_set_power_state(cons, DEVICE_PM_ACTIVE_STATE, NULL, NULL);
     420:	2101      	movs	r1, #1
     422:	4620      	mov	r0, r4
     424:	f002 fd2e 	bl	2e84 <device_set_power_state.constprop.0>

	printk("Sleep %u s\n", SLEEP_S);
     428:	4819      	ldr	r0, [pc, #100]	; (490 <CONFIG_MAIN_STACK_SIZE+0x90>)
     42a:	2102      	movs	r1, #2
     42c:	f002 fd54 	bl	2ed8 <printk>
	return z_impl_k_sleep(timeout);
     430:	2100      	movs	r1, #0
     432:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     436:	f002 facb 	bl	29d0 <z_impl_k_sleep>
	k_sleep(K_SECONDS(SLEEP_S));

	printk("Sleep %u s with UART off\n", SLEEP_S);
     43a:	4816      	ldr	r0, [pc, #88]	; (494 <CONFIG_MAIN_STACK_SIZE+0x94>)
     43c:	2102      	movs	r1, #2
     43e:	f002 fd4b 	bl	2ed8 <printk>
	rc = device_set_power_state(cons, DEVICE_PM_LOW_POWER_STATE, NULL, NULL);
     442:	2102      	movs	r1, #2
     444:	4620      	mov	r0, r4
     446:	f002 fd1d 	bl	2e84 <device_set_power_state.constprop.0>
     44a:	2100      	movs	r1, #0
     44c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     450:	f002 fabe 	bl	29d0 <z_impl_k_sleep>
	k_sleep(K_SECONDS(SLEEP_S));
	rc = device_set_power_state(cons, DEVICE_PM_ACTIVE_STATE, NULL, NULL);
     454:	2101      	movs	r1, #1
     456:	4620      	mov	r0, r4
     458:	f002 fd14 	bl	2e84 <device_set_power_state.constprop.0>

	printk("Entering system off; press BUTTON1 to restart\n");
     45c:	480e      	ldr	r0, [pc, #56]	; (498 <CONFIG_MAIN_STACK_SIZE+0x98>)
     45e:	f002 fd3b 	bl	2ed8 <printk>

	/* Above we disabled entry to deep sleep based on duration of
	 * controlled delay.  Here we need to override that, then
	 * force entry to deep sleep on any delay.
	 */
	sys_pm_force_power_state(SYS_POWER_STATE_DEEP_SLEEP_1);
     462:	2000      	movs	r0, #0
     464:	f000 fa90 	bl	988 <sys_pm_force_power_state>
     468:	2021      	movs	r0, #33	; 0x21
     46a:	2100      	movs	r1, #0
     46c:	f002 fab0 	bl	29d0 <z_impl_k_sleep>
	k_sleep(K_MSEC(1));

	printk("ERROR: System off failed\n");
     470:	480a      	ldr	r0, [pc, #40]	; (49c <CONFIG_MAIN_STACK_SIZE+0x9c>)
     472:	f002 fd31 	bl	2ed8 <printk>
	while (true) {
     476:	e7fe      	b.n	476 <CONFIG_MAIN_STACK_SIZE+0x76>
     478:	00003a50 	.word	0x00003a50
     47c:	00003a57 	.word	0x00003a57
     480:	00003a68 	.word	0x00003a68
     484:	00003a7d 	.word	0x00003a7d
     488:	001e8480 	.word	0x001e8480
     48c:	00003a8d 	.word	0x00003a8d
     490:	00003aab 	.word	0x00003aab
     494:	00003ab7 	.word	0x00003ab7
     498:	00003ad1 	.word	0x00003ad1
     49c:	00003b00 	.word	0x00003b00

000004a0 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
     4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a4:	b087      	sub	sp, #28
     4a6:	460f      	mov	r7, r1
     4a8:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
     4aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
     4ac:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
     4b0:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
     4b4:	4c1f      	ldr	r4, [pc, #124]	; (534 <print_digits+0x94>)
{
     4b6:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     4b8:	2514      	movs	r5, #20
{
     4ba:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
     4bc:	4698      	mov	r8, r3
     4be:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     4c2:	ea50 0301 	orrs.w	r3, r0, r1
     4c6:	d119      	bne.n	4fc <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
     4c8:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     4ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
     4cc:	bf14      	ite	ne
     4ce:	3501      	addne	r5, #1
		buf[i] = '0';
     4d0:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     4d2:	442c      	add	r4, r5
		buf[i] = '0';
     4d4:	bf08      	it	eq
     4d6:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     4da:	2c15      	cmp	r4, #21
     4dc:	d01b      	beq.n	516 <print_digits+0x76>
     4de:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
     4e0:	2c00      	cmp	r4, #0
     4e2:	dc1a      	bgt.n	51a <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
     4e4:	f81d 0005 	ldrb.w	r0, [sp, r5]
     4e8:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
     4ea:	3501      	adds	r5, #1
		out(buf[i], ctx);
     4ec:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
     4ee:	2d15      	cmp	r5, #21
     4f0:	d1f8      	bne.n	4e4 <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
     4f2:	2c00      	cmp	r4, #0
     4f4:	dc19      	bgt.n	52a <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
     4f6:	b007      	add	sp, #28
     4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
     4fc:	4642      	mov	r2, r8
     4fe:	464b      	mov	r3, r9
     500:	f7ff fdec 	bl	dc <__aeabi_uldivmod>
     504:	5ca2      	ldrb	r2, [r4, r2]
     506:	f80d 2005 	strb.w	r2, [sp, r5]
     50a:	4684      	mov	ip, r0
     50c:	460b      	mov	r3, r1
		num /= base;
     50e:	4660      	mov	r0, ip
     510:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     512:	3d01      	subs	r5, #1
     514:	e7d5      	b.n	4c2 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     516:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
     518:	e7e4      	b.n	4e4 <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
     51a:	f1bb 0f00 	cmp.w	fp, #0
     51e:	d0e1      	beq.n	4e4 <print_digits+0x44>
		out(pad_char, ctx);
     520:	4639      	mov	r1, r7
     522:	4650      	mov	r0, sl
     524:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
     526:	3c01      	subs	r4, #1
     528:	e7da      	b.n	4e0 <print_digits+0x40>
		out(pad_char, ctx);
     52a:	4639      	mov	r1, r7
     52c:	4650      	mov	r0, sl
     52e:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
     530:	3c01      	subs	r4, #1
     532:	e7de      	b.n	4f2 <print_digits+0x52>
     534:	00003b1a 	.word	0x00003b1a

00000538 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     538:	680b      	ldr	r3, [r1, #0]
     53a:	3301      	adds	r3, #1
     53c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     53e:	4b01      	ldr	r3, [pc, #4]	; (544 <char_out+0xc>)
     540:	681b      	ldr	r3, [r3, #0]
     542:	4718      	bx	r3
     544:	20000000 	.word	0x20000000

00000548 <__printk_hook_install>:
	_char_out = fn;
     548:	4b01      	ldr	r3, [pc, #4]	; (550 <__printk_hook_install+0x8>)
     54a:	6018      	str	r0, [r3, #0]
}
     54c:	4770      	bx	lr
     54e:	bf00      	nop
     550:	20000000 	.word	0x20000000

00000554 <z_vprintk>:
{
     554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     558:	2600      	movs	r6, #0
{
     55a:	b087      	sub	sp, #28
     55c:	4605      	mov	r5, r0
     55e:	468b      	mov	fp, r1
     560:	461c      	mov	r4, r3
	while (*fmt) {
     562:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
     566:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     56a:	4637      	mov	r7, r6
			might_format = 0;
     56c:	2300      	movs	r3, #0
					break;
     56e:	e007      	b.n	580 <z_vprintk+0x2c>
		if (!might_format) {
     570:	b96b      	cbnz	r3, 58e <z_vprintk+0x3a>
			if (*fmt != '%') {
     572:	2825      	cmp	r0, #37	; 0x25
     574:	f000 80fc 	beq.w	770 <z_vprintk+0x21c>
				out((int)*fmt, ctx);
     578:	4659      	mov	r1, fp
     57a:	9304      	str	r3, [sp, #16]
     57c:	47a8      	blx	r5
     57e:	9b04      	ldr	r3, [sp, #16]
	while (*fmt) {
     580:	f819 0f01 	ldrb.w	r0, [r9, #1]!
     584:	2800      	cmp	r0, #0
     586:	d1f3      	bne.n	570 <z_vprintk+0x1c>
}
     588:	b007      	add	sp, #28
     58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     58e:	287a      	cmp	r0, #122	; 0x7a
     590:	d80a      	bhi.n	5a8 <z_vprintk+0x54>
     592:	2862      	cmp	r0, #98	; 0x62
     594:	d810      	bhi.n	5b8 <z_vprintk+0x64>
     596:	2830      	cmp	r0, #48	; 0x30
     598:	d052      	beq.n	640 <z_vprintk+0xec>
     59a:	d845      	bhi.n	628 <z_vprintk+0xd4>
     59c:	2825      	cmp	r0, #37	; 0x25
     59e:	f000 80e5 	beq.w	76c <z_vprintk+0x218>
     5a2:	282d      	cmp	r0, #45	; 0x2d
     5a4:	f000 80ea 	beq.w	77c <z_vprintk+0x228>
					out((int)'%', ctx);
     5a8:	4659      	mov	r1, fp
     5aa:	2025      	movs	r0, #37	; 0x25
     5ac:	47a8      	blx	r5
					out((int)*fmt, ctx);
     5ae:	f899 0000 	ldrb.w	r0, [r9]
     5b2:	4659      	mov	r1, fp
     5b4:	47a8      	blx	r5
     5b6:	e7d9      	b.n	56c <z_vprintk+0x18>
     5b8:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
     5bc:	2a17      	cmp	r2, #23
     5be:	d8f3      	bhi.n	5a8 <z_vprintk+0x54>
     5c0:	a101      	add	r1, pc, #4	; (adr r1, 5c8 <z_vprintk+0x74>)
     5c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
     5c6:	bf00      	nop
     5c8:	00000765 	.word	0x00000765
     5cc:	00000689 	.word	0x00000689
     5d0:	000005a9 	.word	0x000005a9
     5d4:	000005a9 	.word	0x000005a9
     5d8:	000005a9 	.word	0x000005a9
     5dc:	0000066b 	.word	0x0000066b
     5e0:	00000689 	.word	0x00000689
     5e4:	000005a9 	.word	0x000005a9
     5e8:	000005a9 	.word	0x000005a9
     5ec:	0000066b 	.word	0x0000066b
     5f0:	000005a9 	.word	0x000005a9
     5f4:	000005a9 	.word	0x000005a9
     5f8:	000005a9 	.word	0x000005a9
     5fc:	000006ed 	.word	0x000006ed
     600:	000005a9 	.word	0x000005a9
     604:	000005a9 	.word	0x000005a9
     608:	0000072f 	.word	0x0000072f
     60c:	000005a9 	.word	0x000005a9
     610:	00000689 	.word	0x00000689
     614:	000005a9 	.word	0x000005a9
     618:	000005a9 	.word	0x000005a9
     61c:	00000631 	.word	0x00000631
     620:	000005a9 	.word	0x000005a9
     624:	0000066b 	.word	0x0000066b
			switch (*fmt) {
     628:	2839      	cmp	r0, #57	; 0x39
     62a:	d915      	bls.n	658 <z_vprintk+0x104>
     62c:	2858      	cmp	r0, #88	; 0x58
     62e:	d1bb      	bne.n	5a8 <z_vprintk+0x54>
				if (*fmt == 'p') {
     630:	f899 3000 	ldrb.w	r3, [r9]
     634:	2b70      	cmp	r3, #112	; 0x70
     636:	d163      	bne.n	700 <z_vprintk+0x1ac>
					x = va_arg(ap, unsigned int);
     638:	f854 2b04 	ldr.w	r2, [r4], #4
     63c:	2300      	movs	r3, #0
     63e:	e06a      	b.n	716 <z_vprintk+0x1c2>
				if (min_width < 0 && padding == PAD_NONE) {
     640:	f1b8 0f00 	cmp.w	r8, #0
     644:	da0b      	bge.n	65e <z_vprintk+0x10a>
     646:	2f00      	cmp	r7, #0
     648:	f000 809a 	beq.w	780 <z_vprintk+0x22c>
					min_width = *fmt - '0';
     64c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     650:	2f00      	cmp	r7, #0
     652:	bf08      	it	eq
     654:	2702      	moveq	r7, #2
     656:	e793      	b.n	580 <z_vprintk+0x2c>
				if (min_width < 0) {
     658:	f1b8 0f00 	cmp.w	r8, #0
     65c:	dbf6      	blt.n	64c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
     65e:	220a      	movs	r2, #10
     660:	fb02 0808 	mla	r8, r2, r8, r0
     664:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
     668:	e7f2      	b.n	650 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
     66a:	2868      	cmp	r0, #104	; 0x68
     66c:	d103      	bne.n	676 <z_vprintk+0x122>
     66e:	2e68      	cmp	r6, #104	; 0x68
     670:	d106      	bne.n	680 <z_vprintk+0x12c>
					length_mod = 'H';
     672:	2648      	movs	r6, #72	; 0x48
     674:	e784      	b.n	580 <z_vprintk+0x2c>
				} else if (*fmt == 'l' && length_mod == 'l') {
     676:	286c      	cmp	r0, #108	; 0x6c
     678:	d102      	bne.n	680 <z_vprintk+0x12c>
     67a:	2e6c      	cmp	r6, #108	; 0x6c
     67c:	f000 8082 	beq.w	784 <z_vprintk+0x230>
				} else if (length_mod == 0) {
     680:	2e00      	cmp	r6, #0
     682:	d191      	bne.n	5a8 <z_vprintk+0x54>
     684:	4606      	mov	r6, r0
     686:	e77b      	b.n	580 <z_vprintk+0x2c>
				if (length_mod == 'z') {
     688:	2e7a      	cmp	r6, #122	; 0x7a
     68a:	d103      	bne.n	694 <z_vprintk+0x140>
					d = va_arg(ap, int);
     68c:	f854 2b04 	ldr.w	r2, [r4], #4
     690:	17d3      	asrs	r3, r2, #31
     692:	e008      	b.n	6a6 <z_vprintk+0x152>
				} else if (length_mod == 'l') {
     694:	2e6c      	cmp	r6, #108	; 0x6c
     696:	d0f9      	beq.n	68c <z_vprintk+0x138>
				} else if (length_mod == 'L') {
     698:	2e4c      	cmp	r6, #76	; 0x4c
     69a:	d1f7      	bne.n	68c <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
     69c:	3407      	adds	r4, #7
     69e:	f024 0407 	bic.w	r4, r4, #7
					d = (printk_val_t) lld;
     6a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				if (*fmt != 'u' && negative(d)) {
     6a6:	2875      	cmp	r0, #117	; 0x75
     6a8:	d00f      	beq.n	6ca <z_vprintk+0x176>
     6aa:	2a00      	cmp	r2, #0
     6ac:	f173 0100 	sbcs.w	r1, r3, #0
     6b0:	da0b      	bge.n	6ca <z_vprintk+0x176>
					out((int)'-', ctx);
     6b2:	4659      	mov	r1, fp
     6b4:	202d      	movs	r0, #45	; 0x2d
     6b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
     6ba:	47a8      	blx	r5
					d = -d;
     6bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
     6c0:	4252      	negs	r2, r2
     6c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
     6c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
     6ca:	1ef9      	subs	r1, r7, #3
     6cc:	bf18      	it	ne
     6ce:	2101      	movne	r1, #1
     6d0:	2f01      	cmp	r7, #1
     6d2:	bf0c      	ite	eq
     6d4:	2030      	moveq	r0, #48	; 0x30
     6d6:	2020      	movne	r0, #32
     6d8:	e9cd 0802 	strd	r0, r8, [sp, #8]
     6dc:	9101      	str	r1, [sp, #4]
     6de:	210a      	movs	r1, #10
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
     6e0:	9100      	str	r1, [sp, #0]
     6e2:	4628      	mov	r0, r5
     6e4:	4659      	mov	r1, fp
     6e6:	f7ff fedb 	bl	4a0 <print_digits>
     6ea:	e73f      	b.n	56c <z_vprintk+0x18>
				out('0', ctx);
     6ec:	4659      	mov	r1, fp
     6ee:	2030      	movs	r0, #48	; 0x30
     6f0:	47a8      	blx	r5
				out('x', ctx);
     6f2:	4659      	mov	r1, fp
     6f4:	2078      	movs	r0, #120	; 0x78
     6f6:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
     6f8:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
     6fc:	2701      	movs	r7, #1
     6fe:	e797      	b.n	630 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     700:	2e6c      	cmp	r6, #108	; 0x6c
     702:	d099      	beq.n	638 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
     704:	2e4c      	cmp	r6, #76	; 0x4c
     706:	d197      	bne.n	638 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
     708:	1de3      	adds	r3, r4, #7
     70a:	f023 0307 	bic.w	r3, r3, #7
     70e:	461c      	mov	r4, r3
     710:	685b      	ldr	r3, [r3, #4]
     712:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
     716:	1ef9      	subs	r1, r7, #3
     718:	bf18      	it	ne
     71a:	2101      	movne	r1, #1
     71c:	2f01      	cmp	r7, #1
     71e:	bf0c      	ite	eq
     720:	2030      	moveq	r0, #48	; 0x30
     722:	2020      	movne	r0, #32
     724:	9101      	str	r1, [sp, #4]
     726:	e9cd 0802 	strd	r0, r8, [sp, #8]
     72a:	2110      	movs	r1, #16
     72c:	e7d8      	b.n	6e0 <z_vprintk+0x18c>
				char *s = va_arg(ap, char *);
     72e:	46a2      	mov	sl, r4
     730:	f85a 3b04 	ldr.w	r3, [sl], #4
				while (*s) {
     734:	461c      	mov	r4, r3
     736:	4621      	mov	r1, r4
     738:	f814 0b01 	ldrb.w	r0, [r4], #1
     73c:	b940      	cbnz	r0, 750 <z_vprintk+0x1fc>
				if (padding == PAD_SPACE_AFTER) {
     73e:	2f03      	cmp	r7, #3
     740:	d122      	bne.n	788 <z_vprintk+0x234>
					int remaining = min_width - (s - start);
     742:	1acc      	subs	r4, r1, r3
     744:	eba8 0404 	sub.w	r4, r8, r4
					while (remaining-- > 0) {
     748:	2c00      	cmp	r4, #0
     74a:	dc06      	bgt.n	75a <z_vprintk+0x206>
				char *s = va_arg(ap, char *);
     74c:	4654      	mov	r4, sl
     74e:	e70d      	b.n	56c <z_vprintk+0x18>
					out((int)(*s++), ctx);
     750:	4659      	mov	r1, fp
     752:	9304      	str	r3, [sp, #16]
     754:	47a8      	blx	r5
     756:	9b04      	ldr	r3, [sp, #16]
     758:	e7ed      	b.n	736 <z_vprintk+0x1e2>
						out(' ', ctx);
     75a:	4659      	mov	r1, fp
     75c:	2020      	movs	r0, #32
     75e:	47a8      	blx	r5
     760:	3c01      	subs	r4, #1
     762:	e7f1      	b.n	748 <z_vprintk+0x1f4>
				out(c, ctx);
     764:	f854 0b04 	ldr.w	r0, [r4], #4
     768:	4659      	mov	r1, fp
     76a:	e723      	b.n	5b4 <z_vprintk+0x60>
				out((int)'%', ctx);
     76c:	4659      	mov	r1, fp
     76e:	e721      	b.n	5b4 <z_vprintk+0x60>
				length_mod = 0;
     770:	461e      	mov	r6, r3
				padding = PAD_NONE;
     772:	461f      	mov	r7, r3
				min_width = -1;
     774:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
     778:	2301      	movs	r3, #1
     77a:	e701      	b.n	580 <z_vprintk+0x2c>
			switch (*fmt) {
     77c:	2703      	movs	r7, #3
     77e:	e6ff      	b.n	580 <z_vprintk+0x2c>
					padding = PAD_ZERO_BEFORE;
     780:	2701      	movs	r7, #1
     782:	e6fd      	b.n	580 <z_vprintk+0x2c>
					length_mod = 'L';
     784:	264c      	movs	r6, #76	; 0x4c
     786:	e6fb      	b.n	580 <z_vprintk+0x2c>
				char *s = va_arg(ap, char *);
     788:	4654      	mov	r4, sl
			might_format = 0;
     78a:	4603      	mov	r3, r0
     78c:	e6f8      	b.n	580 <z_vprintk+0x2c>
     78e:	bf00      	nop

00000790 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     790:	b507      	push	{r0, r1, r2, lr}
     792:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     794:	2100      	movs	r1, #0
{
     796:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     798:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
     79a:	4803      	ldr	r0, [pc, #12]	; (7a8 <vprintk+0x18>)
     79c:	a901      	add	r1, sp, #4
     79e:	f7ff fed9 	bl	554 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     7a2:	b003      	add	sp, #12
     7a4:	f85d fb04 	ldr.w	pc, [sp], #4
     7a8:	00000539 	.word	0x00000539

000007ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     7ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7b0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     7b4:	f019 0808 	ands.w	r8, r9, #8
{
     7b8:	4604      	mov	r4, r0
	if (processing) {
     7ba:	d00d      	beq.n	7d8 <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
     7bc:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     7be:	bf0c      	ite	eq
     7c0:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     7c4:	f049 0920 	orrne.w	r9, r9, #32
     7c8:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     7cc:	f382 8811 	msr	BASEPRI, r2
     7d0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     7d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7d8:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     7dc:	2902      	cmp	r1, #2
     7de:	d107      	bne.n	7f0 <process_event+0x44>
			evt = process_recheck(mgr);
     7e0:	4620      	mov	r0, r4
     7e2:	f002 fb86 	bl	2ef2 <process_recheck>
		if (evt == EVT_NOP) {
     7e6:	2800      	cmp	r0, #0
     7e8:	d0f0      	beq.n	7cc <process_event+0x20>
		if (evt == EVT_COMPLETE) {
     7ea:	2801      	cmp	r0, #1
     7ec:	8b23      	ldrh	r3, [r4, #24]
     7ee:	d150      	bne.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
			res = mgr->last_res;
     7f0:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7f2:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     7f4:	2f00      	cmp	r7, #0
     7f6:	da15      	bge.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
		*clients = mgr->clients;
     7f8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7fa:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     7fe:	e9c4 8800 	strd	r8, r8, [r4]
     802:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     806:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     808:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     80a:	8b21      	ldrh	r1, [r4, #24]
     80c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     810:	45ca      	cmp	sl, r9
     812:	d002      	beq.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
		if (do_monitors
     814:	68a3      	ldr	r3, [r4, #8]
     816:	2b00      	cmp	r3, #0
     818:	d15c      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
		    || !sys_slist_is_empty(&clients)
     81a:	b90d      	cbnz	r5, 820 <CONFIG_ISR_STACK_SIZE+0x20>
		    || (transit != NULL)) {
     81c:	2e00      	cmp	r6, #0
     81e:	d074      	beq.n	90a <CONFIG_ISR_STACK_SIZE+0x10a>
     820:	2300      	movs	r3, #0
     822:	e058      	b.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     824:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     828:	1f58      	subs	r0, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     82a:	2801      	cmp	r0, #1
     82c:	d820      	bhi.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
		*clients = mgr->clients;
     82e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     832:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     834:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     836:	b289      	uxth	r1, r1
	list->tail = NULL;
     838:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     83c:	d10c      	bne.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     83e:	2d00      	cmp	r5, #0
     840:	462b      	mov	r3, r5
     842:	bf38      	it	cc
     844:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     846:	b12b      	cbz	r3, 854 <CONFIG_ISR_STACK_SIZE+0x54>
				mgr->refs += 1U;
     848:	8b60      	ldrh	r0, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     84a:	681b      	ldr	r3, [r3, #0]
     84c:	3001      	adds	r0, #1
     84e:	8360      	strh	r0, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     850:	2b00      	cmp	r3, #0
     852:	d1f8      	bne.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     854:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     858:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     85a:	4620      	mov	r0, r4
     85c:	f002 fb49 	bl	2ef2 <process_recheck>
     860:	4606      	mov	r6, r0
     862:	2800      	cmp	r0, #0
     864:	d0d1      	beq.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     866:	8b23      	ldrh	r3, [r4, #24]
     868:	f043 0320 	orr.w	r3, r3, #32
     86c:	8323      	strh	r3, [r4, #24]
     86e:	e7cb      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
	} else if (state == ONOFF_STATE_TO_OFF) {
     870:	2b04      	cmp	r3, #4
     872:	d10c      	bne.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     874:	f021 0107 	bic.w	r1, r1, #7
     878:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     87a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     87c:	4620      	mov	r0, r4
     87e:	f002 fb38 	bl	2ef2 <process_recheck>
     882:	4605      	mov	r5, r0
     884:	2800      	cmp	r0, #0
     886:	d0bf      	beq.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     888:	f041 0120 	orr.w	r1, r1, #32
     88c:	8321      	strh	r1, [r4, #24]
     88e:	2500      	movs	r5, #0
     890:	e7ba      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		} else if (evt == EVT_START) {
     892:	2803      	cmp	r0, #3
     894:	d109      	bne.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
			transit = mgr->transitions->start;
     896:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     898:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     89c:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     89e:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     8a2:	8323      	strh	r3, [r4, #24]
}
     8a4:	2500      	movs	r5, #0
		res = 0;
     8a6:	462f      	mov	r7, r5
     8a8:	e7af      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
		} else if (evt == EVT_STOP) {
     8aa:	2804      	cmp	r0, #4
     8ac:	d106      	bne.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
			transit = mgr->transitions->stop;
     8ae:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8b0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     8b4:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8b6:	f043 0304 	orr.w	r3, r3, #4
     8ba:	e7f2      	b.n	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
		} else if (evt == EVT_RESET) {
     8bc:	2805      	cmp	r0, #5
     8be:	d106      	bne.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
			transit = mgr->transitions->reset;
     8c0:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8c2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     8c6:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8c8:	f043 0305 	orr.w	r3, r3, #5
     8cc:	e7e9      	b.n	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
     8ce:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     8d0:	462e      	mov	r6, r5
     8d2:	e7e8      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
				   && !sys_slist_is_empty(&mgr->monitors);
     8d4:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     8d6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     8da:	8321      	strh	r1, [r4, #24]
     8dc:	f382 8811 	msr	BASEPRI, r2
     8e0:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     8e4:	bb03      	cbnz	r3, 928 <CONFIG_ISR_STACK_SIZE+0x128>
			if (!sys_slist_is_empty(&clients)) {
     8e6:	2d00      	cmp	r5, #0
     8e8:	d140      	bne.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
			if (transit != NULL) {
     8ea:	b116      	cbz	r6, 8f2 <CONFIG_ISR_STACK_SIZE+0xf2>
				transit(mgr, transition_complete);
     8ec:	4925      	ldr	r1, [pc, #148]	; (984 <CONFIG_ISR_STACK_SIZE+0x184>)
     8ee:	4620      	mov	r0, r4
     8f0:	47b0      	blx	r6
	__asm__ volatile(
     8f2:	f04f 0320 	mov.w	r3, #32
     8f6:	f3ef 8211 	mrs	r2, BASEPRI
     8fa:	f383 8811 	msr	BASEPRI, r3
     8fe:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     902:	8b23      	ldrh	r3, [r4, #24]
     904:	f023 0308 	bic.w	r3, r3, #8
     908:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     90a:	8b23      	ldrh	r3, [r4, #24]
     90c:	06d9      	lsls	r1, r3, #27
     90e:	d531      	bpl.n	974 <CONFIG_ISR_STACK_SIZE+0x174>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     910:	f023 0310 	bic.w	r3, r3, #16
     914:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     916:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     918:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     91c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     920:	2900      	cmp	r1, #0
     922:	f47f af5b 	bne.w	7dc <process_event+0x30>
out:
     926:	e751      	b.n	7cc <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     928:	68a1      	ldr	r1, [r4, #8]
     92a:	2900      	cmp	r1, #0
     92c:	d0db      	beq.n	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
	return node->next;
     92e:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     930:	f8d1 b004 	ldr.w	fp, [r1, #4]
     934:	2b00      	cmp	r3, #0
     936:	bf38      	it	cc
     938:	2300      	movcc	r3, #0
     93a:	4699      	mov	r9, r3
     93c:	4652      	mov	r2, sl
     93e:	463b      	mov	r3, r7
     940:	4620      	mov	r0, r4
     942:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     944:	f1b9 0f00 	cmp.w	r9, #0
     948:	d0cd      	beq.n	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
     94a:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     94e:	4649      	mov	r1, r9
     950:	e7ee      	b.n	930 <CONFIG_ISR_STACK_SIZE+0x130>
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
     952:	4639      	mov	r1, r7
     954:	f10b 0004 	add.w	r0, fp, #4
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     958:	682d      	ldr	r5, [r5, #0]
     95a:	f002 faae 	bl	2eba <sys_notify_finalize>
	if (cb) {
     95e:	4681      	mov	r9, r0
     960:	b120      	cbz	r0, 96c <CONFIG_ISR_STACK_SIZE+0x16c>
		cb(mgr, cli, state, res);
     962:	463b      	mov	r3, r7
     964:	4652      	mov	r2, sl
     966:	4659      	mov	r1, fp
     968:	4620      	mov	r0, r4
     96a:	47c8      	blx	r9
     96c:	46ab      	mov	fp, r5
	while (!sys_slist_is_empty(list)) {
     96e:	2d00      	cmp	r5, #0
     970:	d1ef      	bne.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     972:	e7ba      	b.n	8ea <CONFIG_ISR_STACK_SIZE+0xea>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     974:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     978:	bf1e      	ittt	ne
     97a:	f023 0320 	bicne.w	r3, r3, #32
     97e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     980:	2102      	movne	r1, #2
     982:	e7c9      	b.n	918 <CONFIG_ISR_STACK_SIZE+0x118>
     984:	00002f49 	.word	0x00002f49

00000988 <sys_pm_force_power_state>:
#ifdef CONFIG_SYS_PM_DIRECT_FORCE_MODE
	(void)arch_irq_lock();
	forced_pm_state = state;
	_sys_suspend(K_TICKS_FOREVER);
#else
	forced_pm_state = state;
     988:	4b01      	ldr	r3, [pc, #4]	; (990 <sys_pm_force_power_state+0x8>)
     98a:	7018      	strb	r0, [r3, #0]
#endif
}
     98c:	4770      	bx	lr
     98e:	bf00      	nop
     990:	20000164 	.word	0x20000164

00000994 <_sys_suspend>:

enum power_states _sys_suspend(int32_t ticks)
{
     994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool deep_sleep;
#if CONFIG_DEVICE_POWER_MANAGEMENT
	bool low_power = false;
#endif

	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
     998:	4b26      	ldr	r3, [pc, #152]	; (a34 <_sys_suspend+0xa0>)
     99a:	f993 4000 	ldrsb.w	r4, [r3]
		   sys_pm_policy_next_state(ticks) : forced_pm_state;
     99e:	1ca2      	adds	r2, r4, #2
     9a0:	4699      	mov	r9, r3
     9a2:	d102      	bne.n	9aa <_sys_suspend+0x16>
     9a4:	f002 fc35 	bl	3212 <sys_pm_policy_next_state>
     9a8:	4604      	mov	r4, r0
	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
     9aa:	4d23      	ldr	r5, [pc, #140]	; (a38 <_sys_suspend+0xa4>)

	if (pm_state == SYS_POWER_STATE_ACTIVE) {
     9ac:	1c63      	adds	r3, r4, #1
	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
     9ae:	702c      	strb	r4, [r5, #0]
	if (pm_state == SYS_POWER_STATE_ACTIVE) {
     9b0:	46a8      	mov	r8, r5
     9b2:	d013      	beq.n	9dc <_sys_suspend+0x48>
	}

	deep_sleep = IS_ENABLED(CONFIG_SYS_POWER_DEEP_SLEEP_STATES) ?
		     sys_pm_is_deep_sleep_state(pm_state) : 0;

	post_ops_done = 0;
     9b4:	4e21      	ldr	r6, [pc, #132]	; (a3c <_sys_suspend+0xa8>)
     9b6:	2300      	movs	r3, #0
	sys_pm_notify_power_state_entry(pm_state);
     9b8:	4620      	mov	r0, r4
	post_ops_done = 0;
     9ba:	6033      	str	r3, [r6, #0]
	sys_pm_notify_power_state_entry(pm_state);
     9bc:	f002 fc21 	bl	3202 <sys_pm_notify_power_state_entry>

	if (deep_sleep) {
     9c0:	bb64      	cbnz	r4, a1c <_sys_suspend+0x88>
#if CONFIG_DEVICE_POWER_MANAGEMENT
		/* Suspend peripherals. */
		if (sys_pm_suspend_devices()) {
     9c2:	f002 fc20 	bl	3206 <sys_pm_suspend_devices>
     9c6:	b160      	cbz	r0, 9e2 <_sys_suspend+0x4e>
	} else {
		if (sys_pm_policy_low_power_devices(pm_state)) {
			/* low power peripherals. */
			if (sys_pm_low_power_devices()) {
				LOG_DBG("Someone didn't enter low power state");
				sys_pm_resume_devices();
     9c8:	f000 f870 	bl	aac <sys_pm_resume_devices>
				sys_pm_notify_power_state_exit(pm_state);
     9cc:	f995 0000 	ldrsb.w	r0, [r5]
     9d0:	f002 fc18 	bl	3204 <sys_pm_notify_power_state_exit>
				pm_state = SYS_POWER_STATE_ACTIVE;
     9d4:	23ff      	movs	r3, #255	; 0xff
     9d6:	702b      	strb	r3, [r5, #0]
				return pm_state;
     9d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
     9dc:	4620      	mov	r0, r4
     9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * _sys_suspend to disable the corresponding _sys_resume notification.
 *
 */
static inline void _sys_pm_idle_exit_notification_disable(void)
{
	sys_pm_idle_exit_notify = 0U;
     9e2:	4b17      	ldr	r3, [pc, #92]	; (a40 <_sys_suspend+0xac>)
	bool low_power = false;
     9e4:	4627      	mov	r7, r4
     9e6:	701c      	strb	r4, [r3, #0]
	sys_set_power_state(pm_state);
     9e8:	f998 0000 	ldrsb.w	r0, [r8]
     9ec:	f002 fd45 	bl	347a <sys_set_power_state>
	if (deep_sleep || low_power) {
     9f0:	b104      	cbz	r4, 9f4 <_sys_suspend+0x60>
     9f2:	b10f      	cbz	r7, 9f8 <_sys_suspend+0x64>
		sys_pm_resume_devices();
     9f4:	f000 f85a 	bl	aac <sys_pm_resume_devices>
	if (!post_ops_done) {
     9f8:	6833      	ldr	r3, [r6, #0]
     9fa:	b963      	cbnz	r3, a16 <_sys_suspend+0x82>
		post_ops_done = 1;
     9fc:	2301      	movs	r3, #1
		sys_pm_notify_power_state_exit(pm_state);
     9fe:	f998 0000 	ldrsb.w	r0, [r8]
		post_ops_done = 1;
     a02:	6033      	str	r3, [r6, #0]
		forced_pm_state = SYS_POWER_STATE_AUTO;
     a04:	23fe      	movs	r3, #254	; 0xfe
     a06:	f889 3000 	strb.w	r3, [r9]
		sys_pm_notify_power_state_exit(pm_state);
     a0a:	f002 fbfb 	bl	3204 <sys_pm_notify_power_state_exit>
		_sys_pm_power_state_exit_post_ops(pm_state);
     a0e:	f998 0000 	ldrsb.w	r0, [r8]
     a12:	f002 fd3d 	bl	3490 <_sys_pm_power_state_exit_post_ops>
	return pm_state;
     a16:	f998 4000 	ldrsb.w	r4, [r8]
     a1a:	e7df      	b.n	9dc <_sys_suspend+0x48>
		if (sys_pm_policy_low_power_devices(pm_state)) {
     a1c:	f995 0000 	ldrsb.w	r0, [r5]
     a20:	f002 fc05 	bl	322e <sys_pm_policy_low_power_devices>
     a24:	4607      	mov	r7, r0
     a26:	2800      	cmp	r0, #0
     a28:	d0de      	beq.n	9e8 <_sys_suspend+0x54>
			if (sys_pm_low_power_devices()) {
     a2a:	f002 fbef 	bl	320c <sys_pm_low_power_devices>
     a2e:	2800      	cmp	r0, #0
     a30:	d0da      	beq.n	9e8 <_sys_suspend+0x54>
     a32:	e7c9      	b.n	9c8 <_sys_suspend+0x34>
     a34:	20000164 	.word	0x20000164
     a38:	200004a6 	.word	0x200004a6
     a3c:	20000004 	.word	0x20000004
     a40:	200008ba 	.word	0x200008ba

00000a44 <_sys_pm_devices>:
		return "";
	}
}

static int _sys_pm_devices(uint32_t state)
{
     a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	num_susp = 0;
     a48:	4d14      	ldr	r5, [pc, #80]	; (a9c <_sys_pm_devices+0x58>)

	for (int i = num_pm - 1; i >= 0; i--) {
		device_idx_t idx = pm_devices[i];
		struct device *dev = &all_devices[idx];
     a4a:	4f15      	ldr	r7, [pc, #84]	; (aa0 <_sys_pm_devices+0x5c>)
		device_idx_t idx = pm_devices[i];
     a4c:	f8df 8058 	ldr.w	r8, [pc, #88]	; aa8 <_sys_pm_devices+0x64>
	num_susp = 0;
     a50:	2300      	movs	r3, #0
     a52:	802b      	strh	r3, [r5, #0]
	for (int i = num_pm - 1; i >= 0; i--) {
     a54:	4b13      	ldr	r3, [pc, #76]	; (aa4 <_sys_pm_devices+0x60>)
     a56:	881c      	ldrh	r4, [r3, #0]
{
     a58:	4606      	mov	r6, r0
	for (int i = num_pm - 1; i >= 0; i--) {
     a5a:	3c01      	subs	r4, #1
		struct device *dev = &all_devices[idx];
     a5c:	f04f 0918 	mov.w	r9, #24
	for (int i = num_pm - 1; i >= 0; i--) {
     a60:	1c63      	adds	r3, r4, #1
     a62:	d103      	bne.n	a6c <_sys_pm_devices+0x28>
		}

		++num_susp;
	}

	return 0;
     a64:	2000      	movs	r0, #0
}
     a66:	b004      	add	sp, #16
     a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct device *dev = &all_devices[idx];
     a6c:	683b      	ldr	r3, [r7, #0]
     a6e:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
     a72:	9603      	str	r6, [sp, #12]
     a74:	fb09 3000 	mla	r0, r9, r0, r3
 */
static inline int device_set_power_state(struct device *device,
					 uint32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	return device->device_pm_control(device,
     a78:	2300      	movs	r3, #0
     a7a:	9300      	str	r3, [sp, #0]
     a7c:	f8d0 a010 	ldr.w	sl, [r0, #16]
     a80:	aa03      	add	r2, sp, #12
     a82:	2101      	movs	r1, #1
     a84:	47d0      	blx	sl
		if ((rc != -ENOTSUP) && (rc != 0)) {
     a86:	f110 0f23 	cmn.w	r0, #35	; 0x23
     a8a:	d001      	beq.n	a90 <_sys_pm_devices+0x4c>
     a8c:	2800      	cmp	r0, #0
     a8e:	d1ea      	bne.n	a66 <_sys_pm_devices+0x22>
		++num_susp;
     a90:	882b      	ldrh	r3, [r5, #0]
     a92:	3301      	adds	r3, #1
     a94:	802b      	strh	r3, [r5, #0]
	for (int i = num_pm - 1; i >= 0; i--) {
     a96:	3c01      	subs	r4, #1
     a98:	e7e2      	b.n	a60 <_sys_pm_devices+0x1c>
     a9a:	bf00      	nop
     a9c:	20000486 	.word	0x20000486
     aa0:	20000300 	.word	0x20000300
     aa4:	20000484 	.word	0x20000484
     aa8:	20000488 	.word	0x20000488

00000aac <sys_pm_resume_devices>:
{
	return _sys_pm_devices(DEVICE_PM_FORCE_SUSPEND_STATE);
}

void sys_pm_resume_devices(void)
{
     aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	device_idx_t pmi = num_pm - num_susp;
     ab0:	4b11      	ldr	r3, [pc, #68]	; (af8 <sys_pm_resume_devices+0x4c>)
     ab2:	4d12      	ldr	r5, [pc, #72]	; (afc <sys_pm_resume_devices+0x50>)
     ab4:	881a      	ldrh	r2, [r3, #0]
     ab6:	882c      	ldrh	r4, [r5, #0]

	num_susp = 0;
	while (pmi < num_pm) {
		device_idx_t idx = pm_devices[pmi];

		device_set_power_state(&all_devices[idx],
     ab8:	4e11      	ldr	r6, [pc, #68]	; (b00 <sys_pm_resume_devices+0x54>)
		device_idx_t idx = pm_devices[pmi];
     aba:	4f12      	ldr	r7, [pc, #72]	; (b04 <sys_pm_resume_devices+0x58>)
	device_idx_t pmi = num_pm - num_susp;
     abc:	1aa4      	subs	r4, r4, r2
	num_susp = 0;
     abe:	2200      	movs	r2, #0
{
     ac0:	b085      	sub	sp, #20
	device_idx_t pmi = num_pm - num_susp;
     ac2:	b2a4      	uxth	r4, r4
	num_susp = 0;
     ac4:	801a      	strh	r2, [r3, #0]
		device_set_power_state(&all_devices[idx],
     ac6:	f04f 0818 	mov.w	r8, #24
	while (pmi < num_pm) {
     aca:	882b      	ldrh	r3, [r5, #0]
     acc:	42a3      	cmp	r3, r4
     ace:	d802      	bhi.n	ad6 <sys_pm_resume_devices+0x2a>
				       DEVICE_PM_ACTIVE_STATE,
				       NULL, NULL);
		++pmi;
	}
}
     ad0:	b005      	add	sp, #20
     ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		device_set_power_state(&all_devices[idx],
     ad6:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
     ada:	6833      	ldr	r3, [r6, #0]
     adc:	fb08 3000 	mla	r0, r8, r0, r3
     ae0:	2300      	movs	r3, #0
     ae2:	2101      	movs	r1, #1
     ae4:	9300      	str	r3, [sp, #0]
     ae6:	f8d0 9010 	ldr.w	r9, [r0, #16]
     aea:	9103      	str	r1, [sp, #12]
     aec:	aa03      	add	r2, sp, #12
		++pmi;
     aee:	3401      	adds	r4, #1
     af0:	47c8      	blx	r9
     af2:	b2a4      	uxth	r4, r4
     af4:	e7e9      	b.n	aca <sys_pm_resume_devices+0x1e>
     af6:	bf00      	nop
     af8:	20000486 	.word	0x20000486
     afc:	20000484 	.word	0x20000484
     b00:	20000300 	.word	0x20000300
     b04:	20000488 	.word	0x20000488

00000b08 <sys_pm_create_device_list>:

void sys_pm_create_device_list(void)
{
     b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = z_device_get_all_static(&all_devices);
     b0c:	481b      	ldr	r0, [pc, #108]	; (b7c <sys_pm_create_device_list+0x74>)
	 */

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	num_pm = ARRAY_SIZE(core_devices);
     b0e:	4c1c      	ldr	r4, [pc, #112]	; (b80 <sys_pm_create_device_list+0x78>)

	for (pmi = 0; (pmi < count) && (num_pm < MAX_PM_DEVICES); pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
     b10:	f8df b068 	ldr.w	fp, [pc, #104]	; b7c <sys_pm_create_device_list+0x74>
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == ARRAY_SIZE(core_devices)) {
			pm_devices[num_pm++] = pmi;
     b14:	f8df 9074 	ldr.w	r9, [pc, #116]	; b8c <sys_pm_create_device_list+0x84>
	size_t count = z_device_get_all_static(&all_devices);
     b18:	f001 fb74 	bl	2204 <z_device_get_all_static>
	num_pm = ARRAY_SIZE(core_devices);
     b1c:	2303      	movs	r3, #3
     b1e:	8023      	strh	r3, [r4, #0]
		if (dev->device_pm_control == device_pm_control_nop) {
     b20:	4b18      	ldr	r3, [pc, #96]	; (b84 <sys_pm_create_device_list+0x7c>)
	size_t count = z_device_get_all_static(&all_devices);
     b22:	4680      	mov	r8, r0
	for (pmi = 0; (pmi < count) && (num_pm < MAX_PM_DEVICES); pmi++) {
     b24:	2600      	movs	r6, #0
     b26:	fa1f fa86 	uxth.w	sl, r6
     b2a:	45d0      	cmp	r8, sl
     b2c:	4655      	mov	r5, sl
     b2e:	d902      	bls.n	b36 <sys_pm_create_device_list+0x2e>
     b30:	8822      	ldrh	r2, [r4, #0]
     b32:	2a0e      	cmp	r2, #14
     b34:	d902      	bls.n	b3c <sys_pm_create_device_list+0x34>
		}
	}
}
     b36:	b003      	add	sp, #12
     b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
     b3c:	f8db 2000 	ldr.w	r2, [fp]
     b40:	2118      	movs	r1, #24
     b42:	fb01 2505 	mla	r5, r1, r5, r2
		if (dev->device_pm_control == device_pm_control_nop) {
     b46:	692a      	ldr	r2, [r5, #16]
     b48:	429a      	cmp	r2, r3
     b4a:	d00c      	beq.n	b66 <sys_pm_create_device_list+0x5e>
     b4c:	4a0e      	ldr	r2, [pc, #56]	; (b88 <sys_pm_create_device_list+0x80>)
     b4e:	2700      	movs	r7, #0
			if (strcmp(dev->name, core_devices[cdi]) == 0) {
     b50:	f852 1b04 	ldr.w	r1, [r2], #4
     b54:	6828      	ldr	r0, [r5, #0]
     b56:	9201      	str	r2, [sp, #4]
     b58:	f002 fc30 	bl	33bc <strcmp>
     b5c:	9a01      	ldr	r2, [sp, #4]
     b5e:	4b09      	ldr	r3, [pc, #36]	; (b84 <sys_pm_create_device_list+0x7c>)
     b60:	b918      	cbnz	r0, b6a <sys_pm_create_device_list+0x62>
				pm_devices[cdi] = pmi;
     b62:	f829 a017 	strh.w	sl, [r9, r7, lsl #1]
	for (pmi = 0; (pmi < count) && (num_pm < MAX_PM_DEVICES); pmi++) {
     b66:	3601      	adds	r6, #1
     b68:	e7dd      	b.n	b26 <sys_pm_create_device_list+0x1e>
		while (cdi < ARRAY_SIZE(core_devices)) {
     b6a:	3701      	adds	r7, #1
     b6c:	2f03      	cmp	r7, #3
     b6e:	d1ef      	bne.n	b50 <sys_pm_create_device_list+0x48>
			pm_devices[num_pm++] = pmi;
     b70:	8822      	ldrh	r2, [r4, #0]
     b72:	1c51      	adds	r1, r2, #1
     b74:	f829 a012 	strh.w	sl, [r9, r2, lsl #1]
     b78:	8021      	strh	r1, [r4, #0]
     b7a:	e7f4      	b.n	b66 <sys_pm_create_device_list+0x5e>
     b7c:	20000300 	.word	0x20000300
     b80:	20000484 	.word	0x20000484
     b84:	00003555 	.word	0x00003555
     b88:	00003998 	.word	0x00003998
     b8c:	20000488 	.word	0x20000488

00000b90 <sys_pm_ctrl_disable_state>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     b90:	4b07      	ldr	r3, [pc, #28]	; (bb0 <sys_pm_ctrl_disable_state+0x20>)
     b92:	f3bf 8f5b 	dmb	ish
     b96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     b9a:	e850 3f00 	ldrex	r3, [r0]
     b9e:	3301      	adds	r3, #1
     ba0:	e840 3200 	strex	r2, r3, [r0]
     ba4:	2a00      	cmp	r2, #0
     ba6:	d1f8      	bne.n	b9a <sys_pm_ctrl_disable_state+0xa>
     ba8:	f3bf 8f5b 	dmb	ish
	v = atomic_inc(&power_state_disable_count[state]);
	__ASSERT(v < UINT_MAX, "Power state disable count overflowed!");

	/* Make compiler happy when assertions are disabled. */
	(void)(v);
}
     bac:	4770      	bx	lr
     bae:	bf00      	nop
     bb0:	20000304 	.word	0x20000304

00000bb4 <sys_pm_ctrl_is_state_enabled>:
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     bb4:	4b05      	ldr	r3, [pc, #20]	; (bcc <sys_pm_ctrl_is_state_enabled+0x18>)
     bb6:	f3bf 8f5b 	dmb	ish
     bba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     bbe:	f3bf 8f5b 	dmb	ish
bool sys_pm_ctrl_is_state_enabled(enum power_states state)
{
	__ASSERT(state < SYS_POWER_STATE_MAX, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
     bc2:	fab0 f080 	clz	r0, r0
     bc6:	0940      	lsrs	r0, r0, #5
     bc8:	4770      	bx	lr
     bca:	bf00      	nop
     bcc:	20000304 	.word	0x20000304

00000bd0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     bd0:	b510      	push	{r4, lr}
     bd2:	4807      	ldr	r0, [pc, #28]	; (bf0 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
     bd4:	4c07      	ldr	r4, [pc, #28]	; (bf4 <uart_console_init+0x24>)
     bd6:	f001 faf1 	bl	21bc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     bda:	4b07      	ldr	r3, [pc, #28]	; (bf8 <uart_console_init+0x28>)
     bdc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     bde:	4620      	mov	r0, r4
     be0:	f000 fd90 	bl	1704 <__stdout_hook_install>
	__printk_hook_install(console_out);
     be4:	4620      	mov	r0, r4
     be6:	f7ff fcaf 	bl	548 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
     bea:	2000      	movs	r0, #0
     bec:	bd10      	pop	{r4, pc}
     bee:	bf00      	nop
     bf0:	00003a50 	.word	0x00003a50
     bf4:	00000bfd 	.word	0x00000bfd
     bf8:	20000308 	.word	0x20000308

00000bfc <console_out>:
	if ('\n' == c) {
     bfc:	280a      	cmp	r0, #10
{
     bfe:	b538      	push	{r3, r4, r5, lr}
     c00:	4d07      	ldr	r5, [pc, #28]	; (c20 <console_out+0x24>)
     c02:	4604      	mov	r4, r0
	if ('\n' == c) {
     c04:	d104      	bne.n	c10 <console_out+0x14>
     c06:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     c08:	6883      	ldr	r3, [r0, #8]
     c0a:	210d      	movs	r1, #13
     c0c:	685b      	ldr	r3, [r3, #4]
     c0e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     c10:	6828      	ldr	r0, [r5, #0]
     c12:	6883      	ldr	r3, [r0, #8]
     c14:	b2e1      	uxtb	r1, r4
     c16:	685b      	ldr	r3, [r3, #4]
     c18:	4798      	blx	r3
}
     c1a:	4620      	mov	r0, r4
     c1c:	bd38      	pop	{r3, r4, r5, pc}
     c1e:	bf00      	nop
     c20:	20000308 	.word	0x20000308

00000c24 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_clock_control_data *data =
     c28:	4f0e      	ldr	r7, [pc, #56]	; (c64 <onoff_stop+0x40>)
     c2a:	68fa      	ldr	r2, [r7, #12]
	size_t offset = (size_t)(mgr - data->mgr);
     c2c:	1a84      	subs	r4, r0, r2
     c2e:	10a3      	asrs	r3, r4, #2
     c30:	4c0d      	ldr	r4, [pc, #52]	; (c68 <onoff_stop+0x44>)
     c32:	435c      	muls	r4, r3
{
     c34:	4605      	mov	r5, r0
     c36:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     c38:	200c      	movs	r0, #12
     c3a:	fb00 2004 	mla	r0, r0, r4, r2
{
     c3e:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     c40:	2140      	movs	r1, #64	; 0x40
     c42:	4408      	add	r0, r1
     c44:	f002 fafe 	bl	3244 <set_off_state>
	if (err < 0) {
     c48:	1e01      	subs	r1, r0, #0
     c4a:	db05      	blt.n	c58 <onoff_stop+0x34>
	get_sub_config(dev, type)->stop();
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     c52:	6863      	ldr	r3, [r4, #4]
     c54:	4798      	blx	r3
	return 0;
     c56:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     c58:	4628      	mov	r0, r5
     c5a:	4633      	mov	r3, r6
}
     c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	notify(mgr, res);
     c60:	4718      	bx	r3
     c62:	bf00      	nop
     c64:	20000168 	.word	0x20000168
     c68:	b6db6db7 	.word	0xb6db6db7

00000c6c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct nrf_clock_control_data *data =
     c70:	f8df 8050 	ldr.w	r8, [pc, #80]	; cc4 <onoff_start+0x58>
     c74:	f8d8 600c 	ldr.w	r6, [r8, #12]
	size_t offset = (size_t)(mgr - data->mgr);
     c78:	1b84      	subs	r4, r0, r6
     c7a:	10a3      	asrs	r3, r4, #2
     c7c:	4c0f      	ldr	r4, [pc, #60]	; (cbc <onoff_start+0x50>)
     c7e:	435c      	muls	r4, r3
     c80:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     c82:	250c      	movs	r5, #12
     c84:	4365      	muls	r5, r4
{
     c86:	4681      	mov	r9, r0
	err = set_starting_state(&subdata->flags, ctx);
     c88:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
     c8c:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
     c8e:	4430      	add	r0, r6
     c90:	2140      	movs	r1, #64	; 0x40
     c92:	f002 faf0 	bl	3276 <set_starting_state>
	if (err < 0) {
     c96:	1e01      	subs	r1, r0, #0
     c98:	db0a      	blt.n	cb0 <onoff_start+0x44>
	subdata->cb = data->cb;
     c9a:	4a09      	ldr	r2, [pc, #36]	; (cc0 <onoff_start+0x54>)
     c9c:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
     c9e:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     ca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
     ca6:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     caa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	 get_sub_config(dev, type)->start();
     cae:	4718      	bx	r3
		notify(mgr, err);
     cb0:	4648      	mov	r0, r9
     cb2:	463b      	mov	r3, r7
}
     cb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		notify(mgr, err);
     cb8:	4718      	bx	r3
     cba:	bf00      	nop
     cbc:	b6db6db7 	.word	0xb6db6db7
     cc0:	000032d9 	.word	0x000032d9
     cc4:	20000168 	.word	0x20000168

00000cc8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     cc8:	2200      	movs	r2, #0
{
     cca:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     ccc:	2101      	movs	r1, #1
{
     cce:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     cd0:	4610      	mov	r0, r2
     cd2:	f000 fa99 	bl	1208 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
     cd6:	2000      	movs	r0, #0
     cd8:	f000 fa86 	bl	11e8 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
     cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
     ce0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
     ce2:	490c      	ldr	r1, [pc, #48]	; (d14 <clk_init+0x4c>)
    p_reg->INTENSET = mask;
     ce4:	2203      	movs	r2, #3
    p_reg->LFCLKSRC = (uint32_t)(source);
     ce6:	2501      	movs	r5, #1
     ce8:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
     cec:	4630      	mov	r0, r6
    p_reg->INTENSET = mask;
     cee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
     cf2:	f002 f937 	bl	2f64 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     cf6:	2800      	cmp	r0, #0
     cf8:	db0a      	blt.n	d10 <clk_init+0x48>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     cfa:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
     cfc:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     cfe:	4905      	ldr	r1, [pc, #20]	; (d14 <clk_init+0x4c>)
     d00:	f104 001c 	add.w	r0, r4, #28
     d04:	f002 f92e 	bl	2f64 <onoff_manager_init>
		if (err < 0) {
     d08:	2800      	cmp	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     d0a:	bfa4      	itt	ge
     d0c:	64e5      	strge	r5, [r4, #76]	; 0x4c
	}

	return 0;
     d0e:	2000      	movge	r0, #0
}
     d10:	bd70      	pop	{r4, r5, r6, pc}
     d12:	bf00      	nop
     d14:	000039c8 	.word	0x000039c8

00000d18 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(struct device *dev,
     d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     d1c:	4e0b      	ldr	r6, [pc, #44]	; (d4c <clkstarted_handle.constprop.0+0x34>)
static void clkstarted_handle(struct device *dev,
     d1e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
     d20:	230c      	movs	r3, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     d22:	68f0      	ldr	r0, [r6, #12]
	clock_control_cb_t callback = sub_data->cb;
     d24:	434b      	muls	r3, r1
     d26:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
     d28:	e9d4 570e 	ldrd	r5, r7, [r4, #56]	; 0x38
	sub_data->cb = NULL;
     d2c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
     d2e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
     d30:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     d32:	4418      	add	r0, r3
     d34:	f002 fabd 	bl	32b2 <set_on_state>
	if (callback) {
     d38:	b12d      	cbz	r5, d46 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
     d3a:	463a      	mov	r2, r7
     d3c:	4630      	mov	r0, r6
     d3e:	462b      	mov	r3, r5
}
     d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
     d44:	4718      	bx	r3
}
     d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d4a:	bf00      	nop
     d4c:	20000168 	.word	0x20000168

00000d50 <generic_hfclk_start>:
{
     d50:	b508      	push	{r3, lr}
     d52:	f04f 0320 	mov.w	r3, #32
     d56:	f3ef 8111 	mrs	r1, BASEPRI
     d5a:	f383 8811 	msr	BASEPRI, r3
     d5e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
     d62:	4a13      	ldr	r2, [pc, #76]	; (db0 <generic_hfclk_start+0x60>)
     d64:	6813      	ldr	r3, [r2, #0]
     d66:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
     d6a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
     d6e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
     d70:	d00e      	beq.n	d90 <generic_hfclk_start+0x40>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
     d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d76:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
     d7a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
     d7e:	f013 0301 	ands.w	r3, r3, #1
     d82:	d005      	beq.n	d90 <generic_hfclk_start+0x40>
	struct nrf_clock_control_data *data =
     d84:	4b0b      	ldr	r3, [pc, #44]	; (db4 <generic_hfclk_start+0x64>)
	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
     d86:	68d8      	ldr	r0, [r3, #12]
			set_on_state(get_hf_flags());
     d88:	3040      	adds	r0, #64	; 0x40
     d8a:	f002 fa92 	bl	32b2 <set_on_state>
			already_started = true;
     d8e:	2301      	movs	r3, #1
	__asm__ volatile(
     d90:	f381 8811 	msr	BASEPRI, r1
     d94:	f3bf 8f6f 	isb	sy
	if (already_started) {
     d98:	b123      	cbz	r3, da4 <generic_hfclk_start+0x54>
}
     d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
     d9e:	2000      	movs	r0, #0
     da0:	f7ff bfba 	b.w	d18 <clkstarted_handle.constprop.0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     da8:	2201      	movs	r2, #1
     daa:	601a      	str	r2, [r3, #0]
}
     dac:	bd08      	pop	{r3, pc}
     dae:	bf00      	nop
     db0:	2000036c 	.word	0x2000036c
     db4:	20000168 	.word	0x20000168

00000db8 <lfclk_start>:
{
     db8:	b510      	push	{r4, lr}
	if (!once) {
     dba:	4c06      	ldr	r4, [pc, #24]	; (dd4 <lfclk_start+0x1c>)
     dbc:	7823      	ldrb	r3, [r4, #0]
     dbe:	b92b      	cbnz	r3, dcc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
     dc0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
     dc4:	f002 fcc6 	bl	3754 <z_impl_k_busy_wait>
		once = true;
     dc8:	2301      	movs	r3, #1
     dca:	7023      	strb	r3, [r4, #0]
     dcc:	4b02      	ldr	r3, [pc, #8]	; (dd8 <lfclk_start+0x20>)
     dce:	2201      	movs	r2, #1
     dd0:	601a      	str	r2, [r3, #0]
}
     dd2:	bd10      	pop	{r4, pc}
     dd4:	200004a7 	.word	0x200004a7
     dd8:	40000008 	.word	0x40000008

00000ddc <lfclk_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     ddc:	4b05      	ldr	r3, [pc, #20]	; (df4 <lfclk_stop+0x18>)
     dde:	2200      	movs	r2, #0
     de0:	601a      	str	r2, [r3, #0]
{
     de2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	9301      	str	r3, [sp, #4]
    (void)dummy;
     de8:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     dea:	4b03      	ldr	r3, [pc, #12]	; (df8 <lfclk_stop+0x1c>)
     dec:	2201      	movs	r2, #1
     dee:	601a      	str	r2, [r3, #0]
}
     df0:	b002      	add	sp, #8
     df2:	4770      	bx	lr
     df4:	40000104 	.word	0x40000104
     df8:	4000000c 	.word	0x4000000c

00000dfc <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     dfc:	4a0d      	ldr	r2, [pc, #52]	; (e34 <generic_hfclk_stop+0x38>)
     dfe:	f3bf 8f5b 	dmb	ish
{
     e02:	b082      	sub	sp, #8
     e04:	e852 3f00 	ldrex	r3, [r2]
     e08:	f023 0102 	bic.w	r1, r3, #2
     e0c:	e842 1000 	strex	r0, r1, [r2]
     e10:	2800      	cmp	r0, #0
     e12:	d1f7      	bne.n	e04 <generic_hfclk_stop+0x8>
     e14:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
     e18:	f013 0301 	ands.w	r3, r3, #1
     e1c:	d107      	bne.n	e2e <generic_hfclk_stop+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     e1e:	4a06      	ldr	r2, [pc, #24]	; (e38 <generic_hfclk_stop+0x3c>)
     e20:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     e22:	6813      	ldr	r3, [r2, #0]
     e24:	9301      	str	r3, [sp, #4]
    (void)dummy;
     e26:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     e28:	4b04      	ldr	r3, [pc, #16]	; (e3c <generic_hfclk_stop+0x40>)
     e2a:	2201      	movs	r2, #1
     e2c:	601a      	str	r2, [r3, #0]
}
     e2e:	b002      	add	sp, #8
     e30:	4770      	bx	lr
     e32:	bf00      	nop
     e34:	2000036c 	.word	0x2000036c
     e38:	40000100 	.word	0x40000100
     e3c:	40000004 	.word	0x40000004

00000e40 <api_blocking_start>:
{
     e40:	b510      	push	{r4, lr}
     e42:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     e44:	2300      	movs	r3, #0
     e46:	2201      	movs	r2, #1
     e48:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
     e4c:	9301      	str	r3, [sp, #4]
     e4e:	4b09      	ldr	r3, [pc, #36]	; (e74 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     e50:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
     e52:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     e54:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
     e58:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
     e5c:	f002 fa69 	bl	3332 <api_start>
	if (err < 0) {
     e60:	2800      	cmp	r0, #0
     e62:	db05      	blt.n	e70 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     e64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     e68:	2300      	movs	r3, #0
     e6a:	4620      	mov	r0, r4
     e6c:	f001 fdf6 	bl	2a5c <z_impl_k_sem_take>
}
     e70:	b008      	add	sp, #32
     e72:	bd10      	pop	{r4, pc}
     e74:	000032eb 	.word	0x000032eb

00000e78 <nrf_power_clock_isr>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     e78:	4b18      	ldr	r3, [pc, #96]	; (edc <nrf_power_clock_isr+0x64>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     e7a:	b507      	push	{r0, r1, r2, lr}
     e7c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     e7e:	b1b2      	cbz	r2, eae <nrf_power_clock_isr+0x36>
    return p_reg->INTENSET & mask;
     e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     e84:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     e88:	07d0      	lsls	r0, r2, #31
     e8a:	d510      	bpl.n	eae <nrf_power_clock_isr+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     e8c:	2200      	movs	r2, #0
     e8e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	9300      	str	r3, [sp, #0]
    (void)dummy;
     e94:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     e96:	4b12      	ldr	r3, [pc, #72]	; (ee0 <nrf_power_clock_isr+0x68>)
		 * HFCLKSTARTED may be generated twice.
		 *
		 * Also software should be notified about clock being on only
		 * if generic request occured.
		 */
		if ((GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING)
     e98:	68db      	ldr	r3, [r3, #12]
     e9a:	6c18      	ldr	r0, [r3, #64]	; 0x40
     e9c:	f010 0007 	ands.w	r0, r0, #7
     ea0:	d105      	bne.n	eae <nrf_power_clock_isr+0x36>
			&& (hfclk_users & HF_USER_GENERIC)) {
     ea2:	4b10      	ldr	r3, [pc, #64]	; (ee4 <nrf_power_clock_isr+0x6c>)
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	0799      	lsls	r1, r3, #30
     ea8:	d501      	bpl.n	eae <nrf_power_clock_isr+0x36>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     eaa:	f7ff ff35 	bl	d18 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     eae:	4b0e      	ldr	r3, [pc, #56]	; (ee8 <nrf_power_clock_isr+0x70>)
     eb0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     eb2:	b182      	cbz	r2, ed6 <nrf_power_clock_isr+0x5e>
    return p_reg->INTENSET & mask;
     eb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     eb8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     ebc:	0792      	lsls	r2, r2, #30
     ebe:	d50a      	bpl.n	ed6 <nrf_power_clock_isr+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     ec0:	2200      	movs	r2, #0
     ec2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	9301      	str	r3, [sp, #4]
    (void)dummy;
     ec8:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     eca:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     ecc:	b003      	add	sp, #12
     ece:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     ed2:	f7ff bf21 	b.w	d18 <clkstarted_handle.constprop.0>
}
     ed6:	b003      	add	sp, #12
     ed8:	f85d fb04 	ldr.w	pc, [sp], #4
     edc:	40000100 	.word	0x40000100
     ee0:	20000168 	.word	0x20000168
     ee4:	2000036c 	.word	0x2000036c
     ee8:	40000104 	.word	0x40000104

00000eec <z_nrf_clock_control_lf_on>:
{
     eec:	b510      	push	{r4, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     eee:	4911      	ldr	r1, [pc, #68]	; (f34 <z_nrf_clock_control_lf_on+0x48>)
     ef0:	f3bf 8f5b 	dmb	ish
     ef4:	4604      	mov	r4, r0
     ef6:	2201      	movs	r2, #1
     ef8:	e851 3f00 	ldrex	r3, [r1]
     efc:	e841 2000 	strex	r0, r2, [r1]
     f00:	2800      	cmp	r0, #0
     f02:	d1f9      	bne.n	ef8 <z_nrf_clock_control_lf_on+0xc>
     f04:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
     f08:	b943      	cbnz	r3, f1c <z_nrf_clock_control_lf_on+0x30>
				get_onoff_manager(DEVICE_GET(clock_nrf),
     f0a:	490b      	ldr	r1, [pc, #44]	; (f38 <z_nrf_clock_control_lf_on+0x4c>)
	return &data->mgr[type];
     f0c:	68c8      	ldr	r0, [r1, #12]
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
     f0e:	490b      	ldr	r1, [pc, #44]	; (f3c <z_nrf_clock_control_lf_on+0x50>)
		err = onoff_request(mgr, &cli);
     f10:	301c      	adds	r0, #28
     f12:	604b      	str	r3, [r1, #4]
     f14:	60cb      	str	r3, [r1, #12]
     f16:	608a      	str	r2, [r1, #8]
     f18:	f002 f837 	bl	2f8a <onoff_request>
	switch (start_mode) {
     f1c:	2c01      	cmp	r4, #1
     f1e:	d006      	beq.n	f2e <z_nrf_clock_control_lf_on+0x42>
     f20:	2c02      	cmp	r4, #2
     f22:	d106      	bne.n	f32 <z_nrf_clock_control_lf_on+0x46>
		lfclk_spinwait(CLOCK_CONTROL_NRF_K32SRC);
     f24:	2001      	movs	r0, #1
}
     f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lfclk_spinwait(NRF_CLOCK_LFCLK_RC);
     f2a:	f002 b9e1 	b.w	32f0 <lfclk_spinwait>
     f2e:	2000      	movs	r0, #0
     f30:	e7f9      	b.n	f26 <z_nrf_clock_control_lf_on+0x3a>
}
     f32:	bd10      	pop	{r4, pc}
     f34:	20000370 	.word	0x20000370
     f38:	20000168 	.word	0x20000168
     f3c:	2000030c 	.word	0x2000030c

00000f40 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
     f40:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     f42:	4b08      	ldr	r3, [pc, #32]	; (f64 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     f44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     f48:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     f4c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     f50:	4290      	cmp	r0, r2
     f52:	d100      	bne.n	f56 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     f54:	4770      	bx	lr
     f56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     f5a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     f5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     f60:	e7f2      	b.n	f48 <handle_next_cycle_case+0x8>
     f62:	bf00      	nop
     f64:	40011000 	.word	0x40011000

00000f68 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     f68:	4b04      	ldr	r3, [pc, #16]	; (f7c <event_clear+0x14>)
     f6a:	2200      	movs	r2, #0
{
     f6c:	b082      	sub	sp, #8
     f6e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	9301      	str	r3, [sp, #4]
    (void)dummy;
     f74:	9b01      	ldr	r3, [sp, #4]
}
     f76:	b002      	add	sp, #8
     f78:	4770      	bx	lr
     f7a:	bf00      	nop
     f7c:	40011140 	.word	0x40011140

00000f80 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(void *arg)
{
     f80:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
     f82:	f7ff fff1 	bl	f68 <event_clear>
    return p_reg->CC[ch];
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <rtc_nrf_isr+0x24>)

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     f88:	4a07      	ldr	r2, [pc, #28]	; (fa8 <rtc_nrf_isr+0x28>)
     f8a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
     f8e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     f90:	1ac0      	subs	r0, r0, r3
     f92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     f96:	4403      	add	r3, r0
     f98:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
}
     f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
     f9e:	f001 bed1 	b.w	2d44 <z_clock_announce>
     fa2:	bf00      	nop
     fa4:	40011000 	.word	0x40011000
     fa8:	20000374 	.word	0x20000374

00000fac <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
     fac:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     fae:	4d10      	ldr	r5, [pc, #64]	; (ff0 <z_clock_driver_init+0x44>)
     fb0:	2400      	movs	r4, #0
     fb2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	ARG_UNUSED(device);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
     fb6:	f7ff ffd7 	bl	f68 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fba:	4b0e      	ldr	r3, [pc, #56]	; (ff4 <z_clock_driver_init+0x48>)
     fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     fc0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     fc8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
     fcc:	4622      	mov	r2, r4
     fce:	2101      	movs	r1, #1
     fd0:	2011      	movs	r0, #17
     fd2:	f000 f919 	bl	1208 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
     fd6:	2011      	movs	r0, #17
     fd8:	f000 f906 	bl	11e8 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     fdc:	4a06      	ldr	r2, [pc, #24]	; (ff8 <z_clock_driver_init+0x4c>)
     fde:	2301      	movs	r3, #1
     fe0:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(NRF_LFCLK_START_MODE_NOWAIT);
     fe2:	4620      	mov	r0, r4
     fe4:	602b      	str	r3, [r5, #0]
     fe6:	f7ff ff81 	bl	eec <z_nrf_clock_control_lf_on>

	return 0;
}
     fea:	4620      	mov	r0, r4
     fec:	bd38      	pop	{r3, r4, r5, pc}
     fee:	bf00      	nop
     ff0:	40011000 	.word	0x40011000
     ff4:	e000e100 	.word	0xe000e100
     ff8:	40011008 	.word	0x40011008

00000ffc <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
     ffc:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
     ffe:	4b2a      	ldr	r3, [pc, #168]	; (10a8 <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    1000:	4c2a      	ldr	r4, [pc, #168]	; (10ac <z_clock_set_timeout+0xb0>)
    1002:	6819      	ldr	r1, [r3, #0]
    1004:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1008:	4d29      	ldr	r5, [pc, #164]	; (10b0 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    100a:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    100c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1010:	bf08      	it	eq
    1012:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    1014:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    1018:	0212      	lsls	r2, r2, #8
    101a:	d434      	bmi.n	1086 <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    101c:	3801      	subs	r0, #1
    101e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1022:	42a8      	cmp	r0, r5
    1024:	bfa8      	it	ge
    1026:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1028:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    102a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    102e:	4418      	add	r0, r3
    1030:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1034:	42a8      	cmp	r0, r5
    1036:	bf94      	ite	ls
    1038:	180d      	addls	r5, r1, r0
    103a:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    103c:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    1040:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    1044:	f7ff ff90 	bl	f68 <event_clear>
	return (a - b) & COUNTER_MAX;
    1048:	1a09      	subs	r1, r1, r0
    104a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    104e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    1052:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    1054:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1058:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    105c:	d104      	bne.n	1068 <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    105e:	200f      	movs	r0, #15
    1060:	f002 fb78 	bl	3754 <z_impl_k_busy_wait>
		event_clear();
    1064:	f7ff ff80 	bl	f68 <event_clear>
    1068:	4b12      	ldr	r3, [pc, #72]	; (10b4 <z_clock_set_timeout+0xb8>)
    106a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    106e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    1072:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1076:	1a2b      	subs	r3, r5, r0
    1078:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    107c:	2b01      	cmp	r3, #1
    107e:	d104      	bne.n	108a <z_clock_set_timeout+0x8e>
		handle_next_cycle_case(t);
    1080:	f7ff ff5e 	bl	f40 <handle_next_cycle_case>
    1084:	e00b      	b.n	109e <z_clock_set_timeout+0xa2>
		ticks = 0;
    1086:	2000      	movs	r0, #0
    1088:	e7ce      	b.n	1028 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    108a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    108e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    1092:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1096:	1a2d      	subs	r5, r5, r0
    1098:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    109a:	022b      	lsls	r3, r5, #8
    109c:	d4f0      	bmi.n	1080 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    109e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    10a2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    10a6:	bd70      	pop	{r4, r5, r6, pc}
    10a8:	20000374 	.word	0x20000374
    10ac:	40011000 	.word	0x40011000
    10b0:	007fffff 	.word	0x007fffff
    10b4:	e000e100 	.word	0xe000e100

000010b8 <z_clock_elapsed>:
	__asm__ volatile(
    10b8:	f04f 0220 	mov.w	r2, #32
    10bc:	f3ef 8311 	mrs	r3, BASEPRI
    10c0:	f382 8811 	msr	BASEPRI, r2
    10c4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    10c8:	4a06      	ldr	r2, [pc, #24]	; (10e4 <z_clock_elapsed+0x2c>)
    10ca:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    10ce:	4a06      	ldr	r2, [pc, #24]	; (10e8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    10d0:	6812      	ldr	r2, [r2, #0]
    10d2:	1a80      	subs	r0, r0, r2
    10d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    10d8:	f383 8811 	msr	BASEPRI, r3
    10dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    10e0:	4770      	bx	lr
    10e2:	bf00      	nop
    10e4:	40011000 	.word	0x40011000
    10e8:	20000374 	.word	0x20000374

000010ec <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    10ec:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    10ee:	4c11      	ldr	r4, [pc, #68]	; (1134 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    10f0:	4a11      	ldr	r2, [pc, #68]	; (1138 <_DoInit+0x4c>)
    10f2:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    10f4:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    10f6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    10fa:	4b10      	ldr	r3, [pc, #64]	; (113c <_DoInit+0x50>)
    10fc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    10fe:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1100:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1104:	4a0e      	ldr	r2, [pc, #56]	; (1140 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    1106:	490f      	ldr	r1, [pc, #60]	; (1144 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1108:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    110a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    110c:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    110e:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1110:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    1112:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1114:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1116:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1118:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    111a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    111c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    111e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1120:	f002 f942 	bl	33a8 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1124:	4908      	ldr	r1, [pc, #32]	; (1148 <_DoInit+0x5c>)
    1126:	4620      	mov	r0, r4
    1128:	f002 f93e 	bl	33a8 <strcpy>
  p->acID[6] = ' ';
    112c:	2320      	movs	r3, #32
    112e:	71a3      	strb	r3, [r4, #6]
}
    1130:	bd10      	pop	{r4, pc}
    1132:	bf00      	nop
    1134:	20000378 	.word	0x20000378
    1138:	00003b5e 	.word	0x00003b5e
    113c:	200004b8 	.word	0x200004b8
    1140:	200004a8 	.word	0x200004a8
    1144:	00003b67 	.word	0x00003b67
    1148:	00003b6b 	.word	0x00003b6b

0000114c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    114c:	4a09      	ldr	r2, [pc, #36]	; (1174 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    114e:	490a      	ldr	r1, [pc, #40]	; (1178 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1150:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1152:	6809      	ldr	r1, [r1, #0]
    1154:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1156:	4909      	ldr	r1, [pc, #36]	; (117c <arch_swap+0x30>)
	_current->arch.basepri = key;
    1158:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    115a:	684b      	ldr	r3, [r1, #4]
    115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1160:	604b      	str	r3, [r1, #4]
    1162:	2300      	movs	r3, #0
    1164:	f383 8811 	msr	BASEPRI, r3
    1168:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    116c:	6893      	ldr	r3, [r2, #8]
}
    116e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1170:	4770      	bx	lr
    1172:	bf00      	nop
    1174:	20000444 	.word	0x20000444
    1178:	00003a4c 	.word	0x00003a4c
    117c:	e000ed00 	.word	0xe000ed00

00001180 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1180:	490f      	ldr	r1, [pc, #60]	; (11c0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1182:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1184:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    1188:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    118a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    118e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1192:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1194:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1198:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    119c:	4f09      	ldr	r7, [pc, #36]	; (11c4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    119e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    11a2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    11a4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    11a6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    11a8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    11aa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    11ac:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    11ae:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    11b2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    11b6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    11ba:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    11be:	4770      	bx	lr
    ldr r1, =_kernel
    11c0:	20000444 	.word	0x20000444
    ldr v4, =_SCS_ICSR
    11c4:	e000ed04 	.word	0xe000ed04

000011c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    11c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    11cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    11ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    11d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    11d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    11d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    11dc:	2902      	cmp	r1, #2
    beq _oops
    11de:	d0ff      	beq.n	11e0 <_oops>

000011e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    11e0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    11e2:	f002 f8d6 	bl	3392 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    11e6:	bd01      	pop	{r0, pc}

000011e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    11e8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    11ea:	2b00      	cmp	r3, #0
    11ec:	db08      	blt.n	1200 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11ee:	2201      	movs	r2, #1
    11f0:	f000 001f 	and.w	r0, r0, #31
    11f4:	fa02 f000 	lsl.w	r0, r2, r0
    11f8:	095b      	lsrs	r3, r3, #5
    11fa:	4a02      	ldr	r2, [pc, #8]	; (1204 <arch_irq_enable+0x1c>)
    11fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1200:	4770      	bx	lr
    1202:	bf00      	nop
    1204:	e000e100 	.word	0xe000e100

00001208 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1208:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    120a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    120c:	bfa8      	it	ge
    120e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1212:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1216:	bfb8      	it	lt
    1218:	4b06      	ldrlt	r3, [pc, #24]	; (1234 <z_arm_irq_priority_set+0x2c>)
    121a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    121e:	bfac      	ite	ge
    1220:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1224:	f000 000f 	andlt.w	r0, r0, #15
    1228:	b2c9      	uxtb	r1, r1
    122a:	bfb4      	ite	lt
    122c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    122e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1232:	4770      	bx	lr
    1234:	e000ed14 	.word	0xe000ed14

00001238 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    1238:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    123c:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    123e:	3a20      	subs	r2, #32
    1240:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    1244:	4908      	ldr	r1, [pc, #32]	; (1268 <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (uint32_t)pEntry;
    1246:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (uint32_t)parameter1;
    1248:	9b00      	ldr	r3, [sp, #0]
    124a:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (uint32_t)parameter2;
    124c:	9b01      	ldr	r3, [sp, #4]
    124e:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (uint32_t)parameter3;
    1250:	9b02      	ldr	r3, [sp, #8]
    1252:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    1254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1258:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
    125a:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)pInitCtx;

	thread->arch.basepri = 0;
    125e:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    1260:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)pInitCtx;
    1262:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    1264:	6743      	str	r3, [r0, #116]	; 0x74

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1266:	4770      	bx	lr
    1268:	0000302b 	.word	0x0000302b

0000126c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    126e:	4606      	mov	r6, r0
    1270:	460c      	mov	r4, r1
    1272:	4617      	mov	r7, r2
    1274:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1276:	f000 f999 	bl	15ac <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    127a:	4b09      	ldr	r3, [pc, #36]	; (12a0 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    127c:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    127e:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    1282:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1284:	4628      	mov	r0, r5
    1286:	f384 8809 	msr	PSP, r4
    128a:	2100      	movs	r1, #0
    128c:	b663      	cpsie	if
    128e:	f381 8811 	msr	BASEPRI, r1
    1292:	f3bf 8f6f 	isb	sy
    1296:	2200      	movs	r2, #0
    1298:	2300      	movs	r3, #0
    129a:	f001 fec6 	bl	302a <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    129e:	bf00      	nop
    12a0:	20000444 	.word	0x20000444

000012a4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    12a4:	4901      	ldr	r1, [pc, #4]	; (12ac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    12a6:	2210      	movs	r2, #16
	str	r2, [r1]
    12a8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    12aa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    12ac:	e000ed10 	.word	0xe000ed10

000012b0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    12b0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    12b2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    12b4:	f380 8811 	msr	BASEPRI, r0
	isb
    12b8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    12bc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    12c0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    12c2:	b662      	cpsie	i
	isb
    12c4:	f3bf 8f6f 	isb	sy

	bx	lr
    12c8:	4770      	bx	lr
    12ca:	bf00      	nop

000012cc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    12cc:	bf30      	wfi
    b z_SysNmiOnReset
    12ce:	f7ff bffd 	b.w	12cc <z_SysNmiOnReset>
    12d2:	bf00      	nop

000012d4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12d4:	4a0e      	ldr	r2, [pc, #56]	; (1310 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    12d6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12d8:	4b0e      	ldr	r3, [pc, #56]	; (1314 <z_arm_prep_c+0x40>)
    12da:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    12de:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12e4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    12e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    12ec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    12f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    12f4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    12f8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    12fc:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1300:	f000 ffb4 	bl	226c <z_bss_zero>
	z_data_copy();
    1304:	f000 ffbc 	bl	2280 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1308:	f000 f91e 	bl	1548 <z_arm_interrupt_init>
	z_cstart();
    130c:	f000 fff6 	bl	22fc <z_cstart>
    1310:	00000000 	.word	0x00000000
    1314:	e000ed00 	.word	0xe000ed00

00001318 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1318:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    131a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    131c:	4a0b      	ldr	r2, [pc, #44]	; (134c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    131e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1320:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1322:	bf1e      	ittt	ne
	movne	r1, #0
    1324:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1326:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1328:	f002 f93e 	blne	35a8 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    132c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    132e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1332:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1336:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    133a:	4905      	ldr	r1, [pc, #20]	; (1350 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    133c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    133e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1340:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1342:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1346:	4903      	ldr	r1, [pc, #12]	; (1354 <_isr_wrapper+0x3c>)
	bx r1
    1348:	4708      	bx	r1
    134a:	0000      	.short	0x0000
	ldr r2, =_kernel
    134c:	20000444 	.word	0x20000444
	ldr r1, =_sw_isr_table
    1350:	00003854 	.word	0x00003854
	ldr r1, =z_arm_int_exit
    1354:	0000152d 	.word	0x0000152d

00001358 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1358:	f002 f88d 	bl	3476 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    135c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    135e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1362:	4808      	ldr	r0, [pc, #32]	; (1384 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1364:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1368:	1840      	adds	r0, r0, r1
    msr PSP, r0
    136a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    136e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1372:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1374:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1376:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    137a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    137e:	f7ff ffa9 	bl	12d4 <z_arm_prep_c>
    1382:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1384:	20000e00 	.word	0x20000e00

00001388 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1388:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    138c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1390:	4672      	mov	r2, lr

	push {r0, lr}
    1392:	b501      	push	{r0, lr}

	bl z_arm_fault
    1394:	f000 f84e 	bl	1434 <z_arm_fault>

	pop {r0, pc}
    1398:	bd01      	pop	{r0, pc}
    139a:	bf00      	nop

0000139c <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    139c:	4b0c      	ldr	r3, [pc, #48]	; (13d0 <mem_manage_fault.isra.0+0x34>)
    139e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    13a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    13a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13a4:	0792      	lsls	r2, r2, #30
    13a6:	d508      	bpl.n	13ba <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    13a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    13aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13ac:	0612      	lsls	r2, r2, #24
    13ae:	d504      	bpl.n	13ba <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    13b0:	b118      	cbz	r0, 13ba <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    13b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    13b8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    13ba:	4b05      	ldr	r3, [pc, #20]	; (13d0 <mem_manage_fault.isra.0+0x34>)
    13bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    13be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    13c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    13c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    13c4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    13c6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    13ca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    13cc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    13ce:	4770      	bx	lr
    13d0:	e000ed00 	.word	0xe000ed00

000013d4 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    13d4:	4b0d      	ldr	r3, [pc, #52]	; (140c <bus_fault.isra.0+0x38>)
    13d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    13d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    13da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13dc:	0592      	lsls	r2, r2, #22
    13de:	d508      	bpl.n	13f2 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    13e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    13e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13e4:	0412      	lsls	r2, r2, #16
    13e6:	d504      	bpl.n	13f2 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    13e8:	b118      	cbz	r0, 13f2 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    13ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    13f0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <bus_fault.isra.0+0x38>)
    13f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    13f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13f8:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    13fa:	bf58      	it	pl
    13fc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    13fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    1400:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1402:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1406:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1408:	7008      	strb	r0, [r1, #0]

	return reason;
}
    140a:	4770      	bx	lr
    140c:	e000ed00 	.word	0xe000ed00

00001410 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1410:	4b07      	ldr	r3, [pc, #28]	; (1430 <usage_fault.isra.0+0x20>)
    1412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    141a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    141c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    141e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1420:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1424:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1428:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    142a:	2000      	movs	r0, #0
    142c:	4770      	bx	lr
    142e:	bf00      	nop
    1430:	e000ed00 	.word	0xe000ed00

00001434 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return)
{
    1434:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1436:	4b36      	ldr	r3, [pc, #216]	; (1510 <z_arm_fault+0xdc>)
    1438:	685b      	ldr	r3, [r3, #4]
{
    143a:	b08a      	sub	sp, #40	; 0x28
    143c:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    143e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1442:	2500      	movs	r5, #0
    1444:	f385 8811 	msr	BASEPRI, r5
    1448:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    144c:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1450:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1454:	d111      	bne.n	147a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1456:	f002 010c 	and.w	r1, r2, #12
    145a:	2908      	cmp	r1, #8
    145c:	d00d      	beq.n	147a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    145e:	0711      	lsls	r1, r2, #28
    1460:	d401      	bmi.n	1466 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1462:	4606      	mov	r6, r0
			*nested_exc = true;
    1464:	2501      	movs	r5, #1
	*recoverable = false;
    1466:	2200      	movs	r2, #0
    1468:	3b03      	subs	r3, #3
    146a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    146e:	2b03      	cmp	r3, #3
    1470:	d847      	bhi.n	1502 <z_arm_fault+0xce>
    1472:	e8df f003 	tbb	[pc, r3]
    1476:	3e04      	.short	0x3e04
    1478:	3b42      	.short	0x3b42
		return NULL;
    147a:	462e      	mov	r6, r5
    147c:	e7f3      	b.n	1466 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    147e:	4b24      	ldr	r3, [pc, #144]	; (1510 <z_arm_fault+0xdc>)
    1480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1482:	0792      	lsls	r2, r2, #30
    1484:	d43d      	bmi.n	1502 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1486:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1488:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    148c:	d008      	beq.n	14a0 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    148e:	3328      	adds	r3, #40	; 0x28
    1490:	781b      	ldrb	r3, [r3, #0]
    1492:	b1eb      	cbz	r3, 14d0 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    1494:	f10d 0107 	add.w	r1, sp, #7
    1498:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    149a:	f7ff ff7f 	bl	139c <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    149e:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    14a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    14a4:	b993      	cbnz	r3, 14cc <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    14a6:	2220      	movs	r2, #32
    14a8:	4631      	mov	r1, r6
    14aa:	a802      	add	r0, sp, #8
    14ac:	f001 ff92 	bl	33d4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    14b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14b2:	b345      	cbz	r5, 1506 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    14b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    14b8:	b922      	cbnz	r2, 14c4 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    14ba:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    14be:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    14c2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    14c4:	a902      	add	r1, sp, #8
    14c6:	4620      	mov	r0, r4
    14c8:	f001 ff61 	bl	338e <z_arm_fatal_error>
}
    14cc:	b00a      	add	sp, #40	; 0x28
    14ce:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    14d0:	4b10      	ldr	r3, [pc, #64]	; (1514 <z_arm_fault+0xe0>)
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	b12b      	cbz	r3, 14e2 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    14d6:	f10d 0107 	add.w	r1, sp, #7
    14da:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    14dc:	f7ff ff7a 	bl	13d4 <bus_fault.isra.0>
    14e0:	e7dd      	b.n	149e <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    14e2:	4b0d      	ldr	r3, [pc, #52]	; (1518 <z_arm_fault+0xe4>)
    14e4:	8818      	ldrh	r0, [r3, #0]
    14e6:	b284      	uxth	r4, r0
    14e8:	2c00      	cmp	r4, #0
    14ea:	d0d9      	beq.n	14a0 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    14ec:	f7ff ff90 	bl	1410 <usage_fault.isra.0>
    14f0:	e7d5      	b.n	149e <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    14f2:	f10d 0107 	add.w	r1, sp, #7
    14f6:	2000      	movs	r0, #0
    14f8:	e7cf      	b.n	149a <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    14fa:	f10d 0107 	add.w	r1, sp, #7
    14fe:	2000      	movs	r0, #0
    1500:	e7ec      	b.n	14dc <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1502:	2400      	movs	r4, #0
    1504:	e7cc      	b.n	14a0 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1506:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    150a:	f023 0301 	bic.w	r3, r3, #1
    150e:	e7d8      	b.n	14c2 <z_arm_fault+0x8e>
    1510:	e000ed00 	.word	0xe000ed00
    1514:	e000ed29 	.word	0xe000ed29
    1518:	e000ed2a 	.word	0xe000ed2a

0000151c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    151c:	4a02      	ldr	r2, [pc, #8]	; (1528 <z_arm_fault_init+0xc>)
    151e:	6953      	ldr	r3, [r2, #20]
    1520:	f043 0310 	orr.w	r3, r3, #16
    1524:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1526:	4770      	bx	lr
    1528:	e000ed00 	.word	0xe000ed00

0000152c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    152e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1530:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1532:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1534:	d003      	beq.n	153e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1536:	4903      	ldr	r1, [pc, #12]	; (1544 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    153c:	600a      	str	r2, [r1, #0]

0000153e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    153e:	4770      	bx	lr
	ldr r3, =_kernel
    1540:	20000444 	.word	0x20000444
	ldr r1, =_SCS_ICSR
    1544:	e000ed04 	.word	0xe000ed04

00001548 <z_arm_interrupt_init>:
    1548:	4804      	ldr	r0, [pc, #16]	; (155c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    154a:	2300      	movs	r3, #0
    154c:	2120      	movs	r1, #32
    154e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1550:	3301      	adds	r3, #1
    1552:	2b27      	cmp	r3, #39	; 0x27
    1554:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1558:	d1f9      	bne.n	154e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    155a:	4770      	bx	lr
    155c:	e000e100 	.word	0xe000e100

00001560 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1560:	b538      	push	{r3, r4, r5, lr}
    1562:	4604      	mov	r4, r0
	__asm__ volatile(
    1564:	f04f 0320 	mov.w	r3, #32
    1568:	f3ef 8511 	mrs	r5, BASEPRI
    156c:	f383 8811 	msr	BASEPRI, r3
    1570:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1574:	f001 f8f4 	bl	2760 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1578:	4b0a      	ldr	r3, [pc, #40]	; (15a4 <z_impl_k_thread_abort+0x44>)
    157a:	689b      	ldr	r3, [r3, #8]
    157c:	42a3      	cmp	r3, r4
    157e:	d10b      	bne.n	1598 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1580:	4b09      	ldr	r3, [pc, #36]	; (15a8 <z_impl_k_thread_abort+0x48>)
    1582:	685a      	ldr	r2, [r3, #4]
    1584:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1588:	b912      	cbnz	r2, 1590 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    158a:	4628      	mov	r0, r5
    158c:	f7ff fdde 	bl	114c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1590:	685a      	ldr	r2, [r3, #4]
    1592:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1596:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1598:	4628      	mov	r0, r5
}
    159a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    159e:	f002 b810 	b.w	35c2 <z_reschedule_irqlock>
    15a2:	bf00      	nop
    15a4:	20000444 	.word	0x20000444
    15a8:	e000ed00 	.word	0xe000ed00

000015ac <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    15ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    15ae:	4b08      	ldr	r3, [pc, #32]	; (15d0 <z_arm_configure_static_mpu_regions+0x24>)
    15b0:	9301      	str	r3, [sp, #4]
    15b2:	4b08      	ldr	r3, [pc, #32]	; (15d4 <z_arm_configure_static_mpu_regions+0x28>)
    15b4:	9302      	str	r3, [sp, #8]
    15b6:	4b08      	ldr	r3, [pc, #32]	; (15d8 <z_arm_configure_static_mpu_regions+0x2c>)
    15b8:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    15ba:	ab01      	add	r3, sp, #4
    15bc:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    15be:	4a07      	ldr	r2, [pc, #28]	; (15dc <z_arm_configure_static_mpu_regions+0x30>)
    15c0:	4b07      	ldr	r3, [pc, #28]	; (15e0 <z_arm_configure_static_mpu_regions+0x34>)
    15c2:	2101      	movs	r1, #1
    15c4:	4668      	mov	r0, sp
    15c6:	f000 f893 	bl	16f0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    15ca:	b005      	add	sp, #20
    15cc:	f85d fb04 	ldr.w	pc, [sp], #4
    15d0:	20000000 	.word	0x20000000
    15d4:	00000000 	.word	0x00000000
    15d8:	060b0000 	.word	0x060b0000
    15dc:	20000000 	.word	0x20000000
    15e0:	20010000 	.word	0x20010000

000015e4 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    15e4:	f8df c084 	ldr.w	ip, [pc, #132]	; 166c <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ea:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    15ec:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    15ee:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    15f0:	428f      	cmp	r7, r1
    15f2:	db00      	blt.n	15f6 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    15f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    15f6:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    15fa:	f8de 4004 	ldr.w	r4, [lr, #4]
    15fe:	b394      	cbz	r4, 1666 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    1600:	b143      	cbz	r3, 1614 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    1602:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1604:	422c      	tst	r4, r5
    1606:	d119      	bne.n	163c <mpu_configure_regions+0x58>
		&&
    1608:	2c1f      	cmp	r4, #31
    160a:	d917      	bls.n	163c <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
    160c:	f8de 2000 	ldr.w	r2, [lr]
		&&
    1610:	4215      	tst	r5, r2
    1612:	d113      	bne.n	163c <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1614:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    1616:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    1618:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    161c:	f8de 0008 	ldr.w	r0, [lr, #8]
    1620:	d90f      	bls.n	1642 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1622:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1626:	d80e      	bhi.n	1646 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1628:	3c01      	subs	r4, #1
    162a:	fab4 f484 	clz	r4, r4
    162e:	f1c4 041f 	rsb	r4, r4, #31
    1632:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    1634:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1636:	ea44 0400 	orr.w	r4, r4, r0
    163a:	d906      	bls.n	164a <mpu_configure_regions+0x66>
			return -EINVAL;
    163c:	f06f 0015 	mvn.w	r0, #21
    1640:	e7d8      	b.n	15f4 <mpu_configure_regions+0x10>
		return REGION_32B;
    1642:	2408      	movs	r4, #8
    1644:	e7f6      	b.n	1634 <mpu_configure_regions+0x50>
		return REGION_4G;
    1646:	243e      	movs	r4, #62	; 0x3e
    1648:	e7f4      	b.n	1634 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    164a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    164e:	4315      	orrs	r5, r2
    1650:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1654:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1658:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    165c:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    165e:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1662:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    1666:	3701      	adds	r7, #1
    1668:	e7c2      	b.n	15f0 <mpu_configure_regions+0xc>
    166a:	bf00      	nop
    166c:	e000ed90 	.word	0xe000ed90

00001670 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1670:	4b03      	ldr	r3, [pc, #12]	; (1680 <arm_core_mpu_enable+0x10>)
    1672:	2205      	movs	r2, #5
    1674:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1676:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    167a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    167e:	4770      	bx	lr
    1680:	e000ed90 	.word	0xe000ed90

00001684 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1684:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1688:	4b01      	ldr	r3, [pc, #4]	; (1690 <arm_core_mpu_disable+0xc>)
    168a:	2200      	movs	r2, #0
    168c:	605a      	str	r2, [r3, #4]
}
    168e:	4770      	bx	lr
    1690:	e000ed90 	.word	0xe000ed90

00001694 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1694:	4913      	ldr	r1, [pc, #76]	; (16e4 <arm_mpu_init+0x50>)
    1696:	6808      	ldr	r0, [r1, #0]
    1698:	2808      	cmp	r0, #8
{
    169a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    169c:	d81e      	bhi.n	16dc <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    169e:	f7ff fff1 	bl	1684 <arm_core_mpu_disable>
	MPU->RNR = index;
    16a2:	4c11      	ldr	r4, [pc, #68]	; (16e8 <arm_mpu_init+0x54>)
    16a4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    16a6:	2200      	movs	r2, #0
    16a8:	4290      	cmp	r0, r2
    16aa:	f101 010c 	add.w	r1, r1, #12
    16ae:	d105      	bne.n	16bc <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    16b0:	4b0e      	ldr	r3, [pc, #56]	; (16ec <arm_mpu_init+0x58>)
    16b2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    16b4:	f7ff ffdc 	bl	1670 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    16b8:	2000      	movs	r0, #0
}
    16ba:	bd10      	pop	{r4, pc}
    16bc:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    16be:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    16c2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    16c6:	4313      	orrs	r3, r2
    16c8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    16cc:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    16ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
    16d2:	f043 0301 	orr.w	r3, r3, #1
    16d6:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    16d8:	3201      	adds	r2, #1
    16da:	e7e5      	b.n	16a8 <arm_mpu_init+0x14>
		return -1;
    16dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16e0:	e7eb      	b.n	16ba <arm_mpu_init+0x26>
    16e2:	bf00      	nop
    16e4:	000039d4 	.word	0x000039d4
    16e8:	e000ed90 	.word	0xe000ed90
    16ec:	200008b8 	.word	0x200008b8

000016f0 <arm_core_mpu_configure_static_mpu_regions>:
{
    16f0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    16f2:	4c03      	ldr	r4, [pc, #12]	; (1700 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    16f4:	2301      	movs	r3, #1
    16f6:	7822      	ldrb	r2, [r4, #0]
    16f8:	f7ff ff74 	bl	15e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    16fc:	7020      	strb	r0, [r4, #0]
}
    16fe:	bd10      	pop	{r4, pc}
    1700:	200008b8 	.word	0x200008b8

00001704 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1704:	4b01      	ldr	r3, [pc, #4]	; (170c <__stdout_hook_install+0x8>)
    1706:	6018      	str	r0, [r3, #0]
}
    1708:	4770      	bx	lr
    170a:	bf00      	nop
    170c:	200000a8 	.word	0x200000a8

00001710 <nordicsemi_nrf52_init>:
    1710:	f04f 0320 	mov.w	r3, #32
    1714:	f3ef 8211 	mrs	r2, BASEPRI
    1718:	f383 8811 	msr	BASEPRI, r3
    171c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1720:	4906      	ldr	r1, [pc, #24]	; (173c <nordicsemi_nrf52_init+0x2c>)
    1722:	2301      	movs	r3, #1
    1724:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1728:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    172c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1730:	f382 8811 	msr	BASEPRI, r2
    1734:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1738:	2000      	movs	r0, #0
    173a:	4770      	bx	lr
    173c:	4001e000 	.word	0x4001e000

00001740 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1740:	b120      	cbz	r0, 174c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1742:	4b03      	ldr	r3, [pc, #12]	; (1750 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1744:	0180      	lsls	r0, r0, #6
    1746:	f043 0301 	orr.w	r3, r3, #1
    174a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    174c:	4770      	bx	lr
    174e:	bf00      	nop
    1750:	00003990 	.word	0x00003990

00001754 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    1754:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1756:	4b09      	ldr	r3, [pc, #36]	; (177c <gpio_nrfx_init+0x28>)
    1758:	781a      	ldrb	r2, [r3, #0]
    175a:	b96a      	cbnz	r2, 1778 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    175c:	2101      	movs	r1, #1
    175e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1760:	2006      	movs	r0, #6
    1762:	2105      	movs	r1, #5
    1764:	f7ff fd50 	bl	1208 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1768:	2006      	movs	r0, #6
    176a:	f7ff fd3d 	bl	11e8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    176e:	4b04      	ldr	r3, [pc, #16]	; (1780 <gpio_nrfx_init+0x2c>)
    1770:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1774:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1778:	2000      	movs	r0, #0
    177a:	bd08      	pop	{r3, pc}
    177c:	200008b9 	.word	0x200008b9
    1780:	40006000 	.word	0x40006000

00001784 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1784:	4b2b      	ldr	r3, [pc, #172]	; (1834 <gpio_nrfx_config+0xb0>)
{
    1786:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1788:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    178a:	482b      	ldr	r0, [pc, #172]	; (1838 <gpio_nrfx_config+0xb4>)
    178c:	4013      	ands	r3, r2
    178e:	4283      	cmp	r3, r0
    1790:	d040      	beq.n	1814 <gpio_nrfx_config+0x90>
    1792:	d80d      	bhi.n	17b0 <gpio_nrfx_config+0x2c>
    1794:	2b06      	cmp	r3, #6
    1796:	d015      	beq.n	17c4 <gpio_nrfx_config+0x40>
    1798:	d805      	bhi.n	17a6 <gpio_nrfx_config+0x22>
    179a:	b19b      	cbz	r3, 17c4 <gpio_nrfx_config+0x40>
    179c:	2b02      	cmp	r3, #2
    179e:	d03b      	beq.n	1818 <gpio_nrfx_config+0x94>
    17a0:	f06f 0015 	mvn.w	r0, #21
    17a4:	e035      	b.n	1812 <gpio_nrfx_config+0x8e>
    17a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    17aa:	d1f9      	bne.n	17a0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    17ac:	2301      	movs	r3, #1
    17ae:	e009      	b.n	17c4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    17b0:	4822      	ldr	r0, [pc, #136]	; (183c <gpio_nrfx_config+0xb8>)
    17b2:	4283      	cmp	r3, r0
    17b4:	d032      	beq.n	181c <gpio_nrfx_config+0x98>
    17b6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    17ba:	d031      	beq.n	1820 <gpio_nrfx_config+0x9c>
    17bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    17c0:	d1ee      	bne.n	17a0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    17c2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    17c4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    17c6:	bf54      	ite	pl
    17c8:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    17cc:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    17ce:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    17d2:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    17d4:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    17d8:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    17dc:	d507      	bpl.n	17ee <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    17de:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    17e2:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    17e4:	d01e      	beq.n	1824 <gpio_nrfx_config+0xa0>
			nrf_gpio_port_out_set(reg, BIT(pin));
    17e6:	2201      	movs	r2, #1
    17e8:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    17ea:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    17ee:	7a32      	ldrb	r2, [r6, #8]
    17f0:	f001 011f 	and.w	r1, r1, #31
    17f4:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    17f8:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    17fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1800:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    1804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1808:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    180c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    1810:	2000      	movs	r0, #0
}
    1812:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1814:	2307      	movs	r3, #7
    1816:	e7d5      	b.n	17c4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1818:	2304      	movs	r3, #4
    181a:	e7d3      	b.n	17c4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    181c:	2305      	movs	r3, #5
    181e:	e7d1      	b.n	17c4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1820:	2303      	movs	r3, #3
    1822:	e7cf      	b.n	17c4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1824:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1826:	bf42      	ittt	mi
    1828:	2201      	movmi	r2, #1
    182a:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    182c:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    1830:	e7dd      	b.n	17ee <gpio_nrfx_config+0x6a>
    1832:	bf00      	nop
    1834:	00f00006 	.word	0x00f00006
    1838:	00100006 	.word	0x00100006
    183c:	00400002 	.word	0x00400002

00001840 <gpio_nrfx_pin_interrupt_configure>:
{
    1840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    1842:	68c4      	ldr	r4, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1844:	6840      	ldr	r0, [r0, #4]
    1846:	7a00      	ldrb	r0, [r0, #8]
    1848:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    184c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1850:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    1854:	d10a      	bne.n	186c <gpio_nrfx_pin_interrupt_configure+0x2c>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1856:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
    185a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    185e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    1862:	07c7      	lsls	r7, r0, #31
    1864:	d507      	bpl.n	1876 <gpio_nrfx_pin_interrupt_configure+0x36>
		return -ENOTSUP;
    1866:	f06f 0022 	mvn.w	r0, #34	; 0x22
    186a:	e0b4      	b.n	19d6 <gpio_nrfx_pin_interrupt_configure+0x196>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    186c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1870:	68e0      	ldr	r0, [r4, #12]
    1872:	f000 80b2 	beq.w	19da <gpio_nrfx_pin_interrupt_configure+0x19a>
    1876:	68e6      	ldr	r6, [r4, #12]
    1878:	2001      	movs	r0, #1
    187a:	4088      	lsls	r0, r1
    187c:	4330      	orrs	r0, r6
    187e:	6966      	ldr	r6, [r4, #20]
    1880:	60e0      	str	r0, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1882:	2001      	movs	r0, #1
    1884:	4088      	lsls	r0, r1
    1886:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    188a:	69a2      	ldr	r2, [r4, #24]
    188c:	bf0c      	ite	eq
    188e:	4306      	orreq	r6, r0
    1890:	4386      	bicne	r6, r0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1892:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1896:	bf0c      	ite	eq
    1898:	4302      	orreq	r2, r0
    189a:	4382      	bicne	r2, r0
    189c:	61a2      	str	r2, [r4, #24]
    189e:	6922      	ldr	r2, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    18a0:	6166      	str	r6, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    18a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    18a6:	bf0c      	ite	eq
    18a8:	4310      	orreq	r0, r2
    18aa:	ea22 0000 	bicne.w	r0, r2, r0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    18ae:	4a5b      	ldr	r2, [pc, #364]	; (1a1c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
    18b0:	6120      	str	r0, [r4, #16]
    18b2:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    18b6:	2300      	movs	r3, #0
    18b8:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    18ba:	f503 76a2 	add.w	r6, r3, #324	; 0x144
    18be:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    18c2:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    18c6:	42b5      	cmp	r5, r6
    18c8:	f040 808c 	bne.w	19e4 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
    18cc:	fa20 f603 	lsr.w	r6, r0, r3
    18d0:	07f6      	lsls	r6, r6, #31
    18d2:	f140 8087 	bpl.w	19e4 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
    18d6:	2001      	movs	r0, #1
    18d8:	4098      	lsls	r0, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    18da:	4e51      	ldr	r6, [pc, #324]	; (1a20 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
    18dc:	f3bf 8f5b 	dmb	ish
    18e0:	43c7      	mvns	r7, r0
    18e2:	e856 cf00 	ldrex	ip, [r6]
    18e6:	ea0c 0c07 	and.w	ip, ip, r7
    18ea:	e846 ce00 	strex	lr, ip, [r6]
    18ee:	f1be 0f00 	cmp.w	lr, #0
    18f2:	d1f6      	bne.n	18e2 <gpio_nrfx_pin_interrupt_configure+0xa2>
    18f4:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    18f8:	009b      	lsls	r3, r3, #2
    18fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    18fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1902:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
    1906:	f026 0601 	bic.w	r6, r6, #1
    190a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    190e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1912:	00aa      	lsls	r2, r5, #2
    1914:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
	if (data->pin_int_en & BIT(pin)) {
    1918:	68e0      	ldr	r0, [r4, #12]
    191a:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
    191e:	40c8      	lsrs	r0, r1
    1920:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    1924:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1928:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    192c:	d053      	beq.n	19d6 <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
    192e:	6960      	ldr	r0, [r4, #20]
    1930:	40c8      	lsrs	r0, r1
    1932:	f010 0001 	ands.w	r0, r0, #1
    1936:	d060      	beq.n	19fa <gpio_nrfx_pin_interrupt_configure+0x1ba>
			if (data->double_edge & BIT(pin)) {
    1938:	69a3      	ldr	r3, [r4, #24]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    193a:	4a39      	ldr	r2, [pc, #228]	; (1a20 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
    193c:	40cb      	lsrs	r3, r1
    193e:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1940:	bf5f      	itttt	pl
    1942:	6923      	ldrpl	r3, [r4, #16]
    1944:	fa23 f101 	lsrpl.w	r1, r3, r1
    1948:	f001 0101 	andpl.w	r1, r1, #1
    194c:	f1c1 0102 	rsbpl	r1, r1, #2
    1950:	bf54      	ite	pl
    1952:	b2c9      	uxtbpl	r1, r1
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1954:	2103      	movmi	r1, #3
    1956:	2300      	movs	r3, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    1958:	2601      	movs	r6, #1
    195a:	fa06 f403 	lsl.w	r4, r6, r3
    195e:	f3bf 8f5b 	dmb	ish
    1962:	e852 0f00 	ldrex	r0, [r2]
    1966:	ea40 0704 	orr.w	r7, r0, r4
    196a:	e842 7c00 	strex	ip, r7, [r2]
    196e:	f1bc 0f00 	cmp.w	ip, #0
    1972:	d1f6      	bne.n	1962 <gpio_nrfx_pin_interrupt_configure+0x122>
    1974:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
    1978:	40d8      	lsrs	r0, r3
    197a:	f010 0001 	ands.w	r0, r0, #1
    197e:	d136      	bne.n	19ee <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1980:	009a      	lsls	r2, r3, #2
    1982:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1986:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
			nrf_gpiote_event_t evt =
    198a:	3340      	adds	r3, #64	; 0x40
    198c:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    1990:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    1994:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    1998:	009b      	lsls	r3, r3, #2
    199a:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    199e:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
    19a0:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    19a2:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    19a6:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    19aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    19ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    19b2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    19b6:	4335      	orrs	r5, r6
    19b8:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    19bc:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	9301      	str	r3, [sp, #4]
    (void)dummy;
    19c2:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    19c4:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    19c8:	f043 0301 	orr.w	r3, r3, #1
    19cc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
    19d0:	4b12      	ldr	r3, [pc, #72]	; (1a1c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
    19d2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
    19d6:	b003      	add	sp, #12
    19d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    19da:	2601      	movs	r6, #1
    19dc:	408e      	lsls	r6, r1
    19de:	ea20 0006 	bic.w	r0, r0, r6
    19e2:	e74c      	b.n	187e <gpio_nrfx_pin_interrupt_configure+0x3e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    19e4:	3301      	adds	r3, #1
    19e6:	2b08      	cmp	r3, #8
    19e8:	f47f af67 	bne.w	18ba <gpio_nrfx_pin_interrupt_configure+0x7a>
    19ec:	e791      	b.n	1912 <gpio_nrfx_pin_interrupt_configure+0xd2>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    19ee:	3301      	adds	r3, #1
    19f0:	2b08      	cmp	r3, #8
    19f2:	d1b2      	bne.n	195a <gpio_nrfx_pin_interrupt_configure+0x11a>
	return -ENODEV;
    19f4:	f06f 0012 	mvn.w	r0, #18
    19f8:	e7ed      	b.n	19d6 <gpio_nrfx_pin_interrupt_configure+0x196>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    19fa:	6923      	ldr	r3, [r4, #16]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    19fc:	f8d2 5700 	ldr.w	r5, [r2, #1792]	; 0x700
    1a00:	fa23 f101 	lsr.w	r1, r3, r1
    1a04:	f001 0101 	and.w	r1, r1, #1
    1a08:	f1c1 0103 	rsb	r1, r1, #3
    1a0c:	f425 3340 	bic.w	r3, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1a10:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    1a14:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
}
    1a18:	e7dd      	b.n	19d6 <gpio_nrfx_pin_interrupt_configure+0x196>
    1a1a:	bf00      	nop
    1a1c:	40006000 	.word	0x40006000
    1a20:	2000043c 	.word	0x2000043c

00001a24 <gpiote_event_handler>:
{
    1a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1a26:	494e      	ldr	r1, [pc, #312]	; (1b60 <gpiote_event_handler+0x13c>)
    1a28:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    1a2a:	2d00      	cmp	r5, #0
    1a2c:	d061      	beq.n	1af2 <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
    1a2e:	4b4d      	ldr	r3, [pc, #308]	; (1b64 <gpiote_event_handler+0x140>)
    1a30:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    1a32:	f8d3 c004 	ldr.w	ip, [r3, #4]
	uint32_t out = data->pin_int_en;
    1a36:	68d3      	ldr	r3, [r2, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    1a38:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    1a3c:	4320      	orrs	r0, r4
    1a3e:	ea23 0300 	bic.w	r3, r3, r0
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1a42:	f8dc 0004 	ldr.w	r0, [ip, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1a46:	6912      	ldr	r2, [r2, #16]
    return p_reg->IN;
    1a48:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
    1a4c:	4054      	eors	r4, r2
	uint32_t out = pin_states & level_pins;
    1a4e:	ea23 0404 	bic.w	r4, r3, r4
	uint32_t bit = 1U << pin;
    1a52:	2001      	movs	r0, #1
	uint32_t pin = 0U;
    1a54:	2600      	movs	r6, #0
	while (level_pins) {
    1a56:	2b00      	cmp	r3, #0
    1a58:	d135      	bne.n	1ac6 <gpiote_event_handler+0xa2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1a5a:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1a5c:	680b      	ldr	r3, [r1, #0]
    1a5e:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1a60:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    1a62:	4841      	ldr	r0, [pc, #260]	; (1b68 <gpiote_event_handler+0x144>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1a64:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1a66:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1a68:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    1a6a:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    1a6e:	fa06 f103 	lsl.w	r1, r6, r3
    1a72:	4211      	tst	r1, r2
    1a74:	d013      	beq.n	1a9e <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1a76:	009a      	lsls	r2, r3, #2
    1a78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1a7c:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    1a80:	6811      	ldr	r1, [r2, #0]
    1a82:	b161      	cbz	r1, 1a9e <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1a84:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    1a88:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1a8c:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1a8e:	6812      	ldr	r2, [r2, #0]
    1a90:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1a92:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1a96:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    1a9a:	9a01      	ldr	r2, [sp, #4]
    1a9c:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1a9e:	3301      	adds	r3, #1
    1aa0:	2b08      	cmp	r3, #8
    1aa2:	d1e2      	bne.n	1a6a <gpiote_event_handler+0x46>
	if (fired_triggers[0]) {
    1aa4:	bb3c      	cbnz	r4, 1af6 <gpiote_event_handler+0xd2>
	if (port_event) {
    1aa6:	b165      	cbz	r5, 1ac2 <gpiote_event_handler+0x9e>
	const struct gpio_nrfx_data *data = get_port_data(port);
    1aa8:	4b2e      	ldr	r3, [pc, #184]	; (1b64 <gpiote_event_handler+0x140>)
    1aaa:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    1aac:	685e      	ldr	r6, [r3, #4]
	uint32_t out = data->pin_int_en;
    1aae:	68c1      	ldr	r1, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    1ab0:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
    1ab4:	4313      	orrs	r3, r2
    1ab6:	ea21 0103 	bic.w	r1, r1, r3
	uint32_t bit = 1U << pin;
    1aba:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    1abc:	2500      	movs	r5, #0
	while (level_pins) {
    1abe:	2900      	cmp	r1, #0
    1ac0:	d131      	bne.n	1b26 <gpiote_event_handler+0x102>
}
    1ac2:	b003      	add	sp, #12
    1ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (level_pins & bit) {
    1ac6:	4203      	tst	r3, r0
    1ac8:	d010      	beq.n	1aec <gpiote_event_handler+0xc8>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1aca:	f89c 7008 	ldrb.w	r7, [ip, #8]
    1ace:	f006 021f 	and.w	r2, r6, #31
    1ad2:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
    1ad6:	0092      	lsls	r2, r2, #2
    1ad8:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    1adc:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1ae0:	f8d2 7700 	ldr.w	r7, [r2, #1792]	; 0x700
    1ae4:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1ae8:	f8c2 7700 	str.w	r7, [r2, #1792]	; 0x700
		++pin;
    1aec:	3601      	adds	r6, #1
		bit <<= 1;
    1aee:	0040      	lsls	r0, r0, #1
    1af0:	e7b1      	b.n	1a56 <gpiote_event_handler+0x32>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1af2:	462c      	mov	r4, r5
    1af4:	e7b5      	b.n	1a62 <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
    1af6:	4f1b      	ldr	r7, [pc, #108]	; (1b64 <gpiote_event_handler+0x140>)
					struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1af8:	68fb      	ldr	r3, [r7, #12]
    1afa:	6859      	ldr	r1, [r3, #4]
    1afc:	2900      	cmp	r1, #0
    1afe:	d0d2      	beq.n	1aa6 <gpiote_event_handler+0x82>
	return node->next;
    1b00:	680e      	ldr	r6, [r1, #0]
    1b02:	2e00      	cmp	r6, #0
    1b04:	bf38      	it	cc
    1b06:	2600      	movcc	r6, #0
		if (cb->pin_mask & pins) {
    1b08:	688a      	ldr	r2, [r1, #8]
    1b0a:	4022      	ands	r2, r4
    1b0c:	d002      	beq.n	1b14 <gpiote_event_handler+0xf0>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1b0e:	684b      	ldr	r3, [r1, #4]
    1b10:	4638      	mov	r0, r7
    1b12:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1b14:	2e00      	cmp	r6, #0
    1b16:	d0c6      	beq.n	1aa6 <gpiote_event_handler+0x82>
    1b18:	6833      	ldr	r3, [r6, #0]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	bf38      	it	cc
    1b1e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1b20:	4631      	mov	r1, r6
    1b22:	461e      	mov	r6, r3
    1b24:	e7f0      	b.n	1b08 <gpiote_event_handler+0xe4>
		if (level_pins & bit) {
    1b26:	420c      	tst	r4, r1
    1b28:	d017      	beq.n	1b5a <gpiote_event_handler+0x136>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1b2a:	7a32      	ldrb	r2, [r6, #8]
    1b2c:	f005 031f 	and.w	r3, r5, #31
    1b30:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    1b34:	009b      	lsls	r3, r3, #2
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1b36:	6902      	ldr	r2, [r0, #16]
    1b38:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1b3c:	40ea      	lsrs	r2, r5
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1b3e:	f8d3 7700 	ldr.w	r7, [r3, #1792]	; 0x700
    1b42:	f002 0201 	and.w	r2, r2, #1
    1b46:	f1c2 0203 	rsb	r2, r2, #3
    1b4a:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1b4e:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
    1b52:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
			level_pins &= ~bit;
    1b56:	ea21 0104 	bic.w	r1, r1, r4
		++pin;
    1b5a:	3501      	adds	r5, #1
		bit <<= 1;
    1b5c:	0064      	lsls	r4, r4, #1
    1b5e:	e7ae      	b.n	1abe <gpiote_event_handler+0x9a>
    1b60:	4000617c 	.word	0x4000617c
    1b64:	200001b0 	.word	0x200001b0
    1b68:	40006000 	.word	0x40006000

00001b6c <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    1b6c:	4b02      	ldr	r3, [pc, #8]	; (1b78 <uart_nrfx_err_check+0xc>)
    1b6e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    1b72:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    1b76:	4770      	bx	lr
    1b78:	40002000 	.word	0x40002000

00001b7c <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    1b7c:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    1b7e:	794b      	ldrb	r3, [r1, #5]
    1b80:	2b01      	cmp	r3, #1
    1b82:	d11e      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1b84:	798b      	ldrb	r3, [r1, #6]
    1b86:	2b03      	cmp	r3, #3
    1b88:	d11b      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1b8a:	79ca      	ldrb	r2, [r1, #7]
    1b8c:	b10a      	cbz	r2, 1b92 <uart_nrfx_configure+0x16>
    1b8e:	2a01      	cmp	r2, #1
    1b90:	d117      	bne.n	1bc2 <uart_nrfx_configure+0x46>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1b92:	790c      	ldrb	r4, [r1, #4]
    1b94:	b114      	cbz	r4, 1b9c <uart_nrfx_configure+0x20>
    1b96:	2c02      	cmp	r4, #2
    1b98:	d113      	bne.n	1bc2 <uart_nrfx_configure+0x46>
    1b9a:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1b9c:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    1b9e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1ba2:	d05f      	beq.n	1c64 <uart_nrfx_configure+0xe8>
    1ba4:	d82b      	bhi.n	1bfe <uart_nrfx_configure+0x82>
    1ba6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1baa:	d05d      	beq.n	1c68 <uart_nrfx_configure+0xec>
    1bac:	d814      	bhi.n	1bd8 <uart_nrfx_configure+0x5c>
    1bae:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1bb2:	d05b      	beq.n	1c6c <uart_nrfx_configure+0xf0>
    1bb4:	d808      	bhi.n	1bc8 <uart_nrfx_configure+0x4c>
    1bb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1bba:	d05a      	beq.n	1c72 <uart_nrfx_configure+0xf6>
    1bbc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1bc0:	d05a      	beq.n	1c78 <uart_nrfx_configure+0xfc>
    1bc2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1bc6:	e04c      	b.n	1c62 <uart_nrfx_configure+0xe6>
    1bc8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1bcc:	d057      	beq.n	1c7e <uart_nrfx_configure+0x102>
    1bce:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1bd2:	d1f6      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    1bd4:	4b34      	ldr	r3, [pc, #208]	; (1ca8 <uart_nrfx_configure+0x12c>)
    1bd6:	e039      	b.n	1c4c <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    1bd8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1bdc:	d052      	beq.n	1c84 <uart_nrfx_configure+0x108>
    1bde:	d807      	bhi.n	1bf0 <uart_nrfx_configure+0x74>
    1be0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1be4:	d050      	beq.n	1c88 <uart_nrfx_configure+0x10c>
    1be6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1bea:	d1ea      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    1bec:	4b2f      	ldr	r3, [pc, #188]	; (1cac <uart_nrfx_configure+0x130>)
    1bee:	e02d      	b.n	1c4c <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    1bf0:	f647 2512 	movw	r5, #31250	; 0x7a12
    1bf4:	42ab      	cmp	r3, r5
    1bf6:	d1e4      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    1bf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1bfc:	e026      	b.n	1c4c <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    1bfe:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1c02:	d044      	beq.n	1c8e <uart_nrfx_configure+0x112>
    1c04:	d811      	bhi.n	1c2a <uart_nrfx_configure+0xae>
    1c06:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1c0a:	d042      	beq.n	1c92 <uart_nrfx_configure+0x116>
    1c0c:	d808      	bhi.n	1c20 <uart_nrfx_configure+0xa4>
    1c0e:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    1c12:	42ab      	cmp	r3, r5
    1c14:	d03f      	beq.n	1c96 <uart_nrfx_configure+0x11a>
    1c16:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1c1a:	d1d2      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    1c1c:	4b24      	ldr	r3, [pc, #144]	; (1cb0 <uart_nrfx_configure+0x134>)
    1c1e:	e015      	b.n	1c4c <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    1c20:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1c24:	d1cd      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    1c26:	4b23      	ldr	r3, [pc, #140]	; (1cb4 <uart_nrfx_configure+0x138>)
    1c28:	e010      	b.n	1c4c <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    1c2a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1c2e:	d035      	beq.n	1c9c <uart_nrfx_configure+0x120>
    1c30:	d807      	bhi.n	1c42 <uart_nrfx_configure+0xc6>
    1c32:	4d21      	ldr	r5, [pc, #132]	; (1cb8 <uart_nrfx_configure+0x13c>)
    1c34:	42ab      	cmp	r3, r5
    1c36:	d033      	beq.n	1ca0 <uart_nrfx_configure+0x124>
    1c38:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1c3c:	d1c1      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    1c3e:	4b1f      	ldr	r3, [pc, #124]	; (1cbc <uart_nrfx_configure+0x140>)
    1c40:	e004      	b.n	1c4c <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    1c42:	4d1f      	ldr	r5, [pc, #124]	; (1cc0 <uart_nrfx_configure+0x144>)
    1c44:	42ab      	cmp	r3, r5
    1c46:	d1bc      	bne.n	1bc2 <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    1c48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1c4c:	4d1d      	ldr	r5, [pc, #116]	; (1cc4 <uart_nrfx_configure+0x148>)
                    | (uint32_t)p_cfg->hwfc;
    1c4e:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    1c50:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1c54:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1c58:	68c3      	ldr	r3, [r0, #12]
    1c5a:	c903      	ldmia	r1, {r0, r1}
    1c5c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1c60:	2000      	movs	r0, #0
}
    1c62:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    1c64:	4b18      	ldr	r3, [pc, #96]	; (1cc8 <uart_nrfx_configure+0x14c>)
    1c66:	e7f1      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    1c68:	4b18      	ldr	r3, [pc, #96]	; (1ccc <uart_nrfx_configure+0x150>)
    1c6a:	e7ef      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    1c6c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1c70:	e7ec      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = 0x00014000;
    1c72:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1c76:	e7e9      	b.n	1c4c <uart_nrfx_configure+0xd0>
	switch (baudrate) {
    1c78:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1c7c:	e7e6      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    1c7e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1c82:	e7e3      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    1c84:	4b12      	ldr	r3, [pc, #72]	; (1cd0 <uart_nrfx_configure+0x154>)
    1c86:	e7e1      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    1c88:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    1c8c:	e7de      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    1c8e:	4b11      	ldr	r3, [pc, #68]	; (1cd4 <uart_nrfx_configure+0x158>)
    1c90:	e7dc      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    1c92:	4b11      	ldr	r3, [pc, #68]	; (1cd8 <uart_nrfx_configure+0x15c>)
    1c94:	e7da      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    1c96:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1c9a:	e7d7      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    1c9c:	4b0f      	ldr	r3, [pc, #60]	; (1cdc <uart_nrfx_configure+0x160>)
    1c9e:	e7d5      	b.n	1c4c <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    1ca0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1ca4:	e7d2      	b.n	1c4c <uart_nrfx_configure+0xd0>
    1ca6:	bf00      	nop
    1ca8:	0013b000 	.word	0x0013b000
    1cac:	004ea000 	.word	0x004ea000
    1cb0:	00ebf000 	.word	0x00ebf000
    1cb4:	01d7e000 	.word	0x01d7e000
    1cb8:	0003d090 	.word	0x0003d090
    1cbc:	075f7000 	.word	0x075f7000
    1cc0:	000f4240 	.word	0x000f4240
    1cc4:	40002000 	.word	0x40002000
    1cc8:	009d5000 	.word	0x009d5000
    1ccc:	00275000 	.word	0x00275000
    1cd0:	0075f000 	.word	0x0075f000
    1cd4:	03afb000 	.word	0x03afb000
    1cd8:	013a9000 	.word	0x013a9000
    1cdc:	0ebed000 	.word	0x0ebed000

00001ce0 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1ce0:	4b08      	ldr	r3, [pc, #32]	; (1d04 <uart_nrfx_poll_in+0x24>)
    1ce2:	681a      	ldr	r2, [r3, #0]
{
    1ce4:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    1ce6:	b152      	cbz	r2, 1cfe <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1ce8:	2000      	movs	r0, #0
    1cea:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1cec:	681b      	ldr	r3, [r3, #0]
    1cee:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1cf0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    1cf2:	4b05      	ldr	r3, [pc, #20]	; (1d08 <uart_nrfx_poll_in+0x28>)
    1cf4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1cf8:	700b      	strb	r3, [r1, #0]
}
    1cfa:	b002      	add	sp, #8
    1cfc:	4770      	bx	lr
		return -1;
    1cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d02:	e7fa      	b.n	1cfa <uart_nrfx_poll_in+0x1a>
    1d04:	40002108 	.word	0x40002108
    1d08:	40002000 	.word	0x40002000

00001d0c <uart_nrfx_poll_out>:
{
    1d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d0e:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    1d10:	f001 fd1a 	bl	3748 <k_is_in_isr>
    1d14:	4d1b      	ldr	r5, [pc, #108]	; (1d84 <uart_nrfx_poll_out+0x78>)
    1d16:	bb88      	cbnz	r0, 1d7c <uart_nrfx_poll_out+0x70>
    1d18:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1d1a:	2701      	movs	r7, #1
    1d1c:	f3bf 8f5b 	dmb	ish
    1d20:	e855 3f00 	ldrex	r3, [r5]
    1d24:	2b00      	cmp	r3, #0
    1d26:	d103      	bne.n	1d30 <uart_nrfx_poll_out+0x24>
    1d28:	e845 7200 	strex	r2, r7, [r5]
    1d2c:	2a00      	cmp	r2, #0
    1d2e:	d1f7      	bne.n	1d20 <uart_nrfx_poll_out+0x14>
    1d30:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    1d34:	d007      	beq.n	1d46 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    1d36:	2021      	movs	r0, #33	; 0x21
    1d38:	2100      	movs	r1, #0
    1d3a:	3c01      	subs	r4, #1
    1d3c:	f000 fe48 	bl	29d0 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    1d40:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    1d44:	d1ea      	bne.n	1d1c <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d46:	4c10      	ldr	r4, [pc, #64]	; (1d88 <uart_nrfx_poll_out+0x7c>)
    1d48:	2200      	movs	r2, #0
    1d4a:	6022      	str	r2, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1d4c:	6822      	ldr	r2, [r4, #0]
    1d4e:	9201      	str	r2, [sp, #4]
    (void)dummy;
    1d50:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d52:	4a0e      	ldr	r2, [pc, #56]	; (1d8c <uart_nrfx_poll_out+0x80>)
    1d54:	2101      	movs	r1, #1
    1d56:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    1d58:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    1d5c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1d60:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    1d62:	b923      	cbnz	r3, 1d6e <uart_nrfx_poll_out+0x62>
    1d64:	2001      	movs	r0, #1
    1d66:	f001 fbf3 	bl	3550 <nrfx_busy_wait>
    1d6a:	3e01      	subs	r6, #1
    1d6c:	d1f8      	bne.n	1d60 <uart_nrfx_poll_out+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d6e:	4b08      	ldr	r3, [pc, #32]	; (1d90 <uart_nrfx_poll_out+0x84>)
    1d70:	2201      	movs	r2, #1
    1d72:	601a      	str	r2, [r3, #0]
	*lock = 0;
    1d74:	2300      	movs	r3, #0
    1d76:	602b      	str	r3, [r5, #0]
}
    1d78:	b003      	add	sp, #12
    1d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
    1d7c:	2301      	movs	r3, #1
    1d7e:	602b      	str	r3, [r5, #0]
    1d80:	e7e1      	b.n	1d46 <uart_nrfx_poll_out+0x3a>
    1d82:	bf00      	nop
    1d84:	20000440 	.word	0x20000440
    1d88:	4000211c 	.word	0x4000211c
    1d8c:	40002008 	.word	0x40002008
    1d90:	4000200c 	.word	0x4000200c

00001d94 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
    1d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    1d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    1d9a:	4c16      	ldr	r4, [pc, #88]	; (1df4 <uart_nrfx_init+0x60>)
    1d9c:	2240      	movs	r2, #64	; 0x40
    1d9e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1da2:	2103      	movs	r1, #3
    1da4:	2200      	movs	r2, #0
    1da6:	2508      	movs	r5, #8
    1da8:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    1dac:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    1db0:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    1db4:	2506      	movs	r5, #6
    1db6:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    1dba:	2520      	movs	r5, #32
    1dbc:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1dc0:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    1dc4:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    1dc8:	2305      	movs	r3, #5
    1dca:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    1dce:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1dd0:	68c1      	ldr	r1, [r0, #12]
    1dd2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1dd6:	f7ff fed1 	bl	1b7c <uart_nrfx_configure>
	if (err) {
    1dda:	b948      	cbnz	r0, 1df0 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    1ddc:	2304      	movs	r3, #4
    1dde:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <uart_nrfx_init+0x64>)
    1de4:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1de6:	681b      	ldr	r3, [r3, #0]
    1de8:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1dea:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1dec:	2301      	movs	r3, #1
    1dee:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    1df0:	b003      	add	sp, #12
    1df2:	bd30      	pop	{r4, r5, pc}
    1df4:	40002000 	.word	0x40002000
    1df8:	40002108 	.word	0x40002108

00001dfc <uart_nrfx_pm_control>:
	}
}

static int uart_nrfx_pm_control(struct device *dev, uint32_t ctrl_command,
				void *context, device_pm_cb cb, void *arg)
{
    1dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e00:	461e      	mov	r6, r3
    1e02:	4b2e      	ldr	r3, [pc, #184]	; (1ebc <uart_nrfx_pm_control+0xc0>)
	static uint32_t current_state = DEVICE_PM_ACTIVE_STATE;

	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
    1e04:	2901      	cmp	r1, #1
    1e06:	681d      	ldr	r5, [r3, #0]
    1e08:	d156      	bne.n	1eb8 <uart_nrfx_pm_control+0xbc>
		uint32_t new_state = *((const uint32_t *)context);
    1e0a:	6814      	ldr	r4, [r2, #0]

		if (new_state != current_state) {
    1e0c:	42ac      	cmp	r4, r5
    1e0e:	d02d      	beq.n	1e6c <uart_nrfx_pm_control+0x70>
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
    1e10:	2c01      	cmp	r4, #1
    1e12:	492b      	ldr	r1, [pc, #172]	; (1ec0 <uart_nrfx_pm_control+0xc4>)
    1e14:	d131      	bne.n	1e7a <uart_nrfx_pm_control+0x7e>
    return p_reg->PSELTXD;
    1e16:	f8d1 c50c 	ldr.w	ip, [r1, #1292]	; 0x50c
    return p_reg->PSELRXD;
    1e1a:	f8d1 8514 	ldr.w	r8, [r1, #1300]	; 0x514
    return p_reg->PSELCTS;
    1e1e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    return p_reg->PSELRTS;
    1e22:	f8d1 7508 	ldr.w	r7, [r1, #1288]	; 0x508
    p_reg->OUTSET = set_mask;
    1e26:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1e2a:	fa04 f90c 	lsl.w	r9, r4, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e2e:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    1e32:	f8c5 9508 	str.w	r9, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e36:	f04f 0903 	mov.w	r9, #3
    1e3a:	f845 902c 	str.w	r9, [r5, ip, lsl #2]
    1e3e:	f508 7ce0 	add.w	ip, r8, #448	; 0x1c0
    1e42:	f04f 0800 	mov.w	r8, #0
    1e46:	f845 802c 	str.w	r8, [r5, ip, lsl #2]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1e4a:	fa04 fc07 	lsl.w	ip, r4, r7
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e4e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    1e52:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e56:	f845 9027 	str.w	r9, [r5, r7, lsl #2]
    1e5a:	f50e 77e0 	add.w	r7, lr, #448	; 0x1c0
    1e5e:	f845 8027 	str.w	r8, [r5, r7, lsl #2]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    1e62:	2504      	movs	r5, #4
    1e64:	f8c1 5500 	str.w	r5, [r1, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e68:	600c      	str	r4, [r1, #0]
			uart_nrfx_set_power_state(dev, new_state);
			current_state = new_state;
    1e6a:	601c      	str	r4, [r3, #0]
	} else {
		__ASSERT_NO_MSG(ctrl_command == DEVICE_PM_GET_POWER_STATE);
		*((uint32_t *)context) = current_state;
	}

	if (cb) {
    1e6c:	b116      	cbz	r6, 1e74 <uart_nrfx_pm_control+0x78>
		cb(dev, 0, context, arg);
    1e6e:	9b08      	ldr	r3, [sp, #32]
    1e70:	2100      	movs	r1, #0
    1e72:	47b0      	blx	r6
	}

	return 0;
}
    1e74:	2000      	movs	r0, #0
    1e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    1e7a:	2500      	movs	r5, #0
    1e7c:	f8c1 5500 	str.w	r5, [r1, #1280]	; 0x500
    return p_reg->PSELTXD;
    1e80:	f8d1 550c 	ldr.w	r5, [r1, #1292]	; 0x50c
    return p_reg->PSELRXD;
    1e84:	f8d1 e514 	ldr.w	lr, [r1, #1300]	; 0x514
    return p_reg->PSELCTS;
    1e88:	f8d1 7510 	ldr.w	r7, [r1, #1296]	; 0x510
    return p_reg->PSELRTS;
    1e8c:	f8d1 c508 	ldr.w	ip, [r1, #1288]	; 0x508
    1e90:	f505 78e0 	add.w	r8, r5, #448	; 0x1c0
    1e94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    1e98:	f50e 7ee0 	add.w	lr, lr, #448	; 0x1c0
    1e9c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    1ea0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    1ea4:	2502      	movs	r5, #2
    1ea6:	f841 5028 	str.w	r5, [r1, r8, lsl #2]
    1eaa:	f841 502e 	str.w	r5, [r1, lr, lsl #2]
    1eae:	f841 502c 	str.w	r5, [r1, ip, lsl #2]
    1eb2:	f841 5027 	str.w	r5, [r1, r7, lsl #2]
}
    1eb6:	e7d8      	b.n	1e6a <uart_nrfx_pm_control+0x6e>
		*((uint32_t *)context) = current_state;
    1eb8:	6015      	str	r5, [r2, #0]
    1eba:	e7d7      	b.n	1e6c <uart_nrfx_pm_control+0x70>
    1ebc:	2000014c 	.word	0x2000014c
    1ec0:	40002000 	.word	0x40002000

00001ec4 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1ec4:	4b0b      	ldr	r3, [pc, #44]	; (1ef4 <nrf52_errata_108+0x30>)
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1eca:	bf05      	ittet	eq
    1ecc:	4b0a      	ldreq	r3, [pc, #40]	; (1ef8 <nrf52_errata_108+0x34>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1ece:	4a0b      	ldreq	r2, [pc, #44]	; (1efc <nrf52_errata_108+0x38>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    1ed0:	4a0b      	ldrne	r2, [pc, #44]	; (1f00 <nrf52_errata_108+0x3c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1ed2:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1ed4:	bf0a      	itet	eq
    1ed6:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    1ed8:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1eda:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1ede:	2b06      	cmp	r3, #6
    1ee0:	d105      	bne.n	1eee <nrf52_errata_108+0x2a>
            {
                switch(var2)
    1ee2:	3803      	subs	r0, #3
    1ee4:	2803      	cmp	r0, #3
    1ee6:	bf8c      	ite	hi
    1ee8:	2000      	movhi	r0, #0
    1eea:	2001      	movls	r0, #1
    1eec:	4770      	bx	lr
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
    1eee:	2000      	movs	r0, #0
    #endif
}
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
    1ef4:	10000130 	.word	0x10000130
    1ef8:	f0000fe0 	.word	0xf0000fe0
    1efc:	f0000fe8 	.word	0xf0000fe8
    1f00:	10000134 	.word	0x10000134

00001f04 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1f04:	4b07      	ldr	r3, [pc, #28]	; (1f24 <nrf52_errata_16+0x20>)
    1f06:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1f08:	2b06      	cmp	r3, #6
    1f0a:	d109      	bne.n	1f20 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1f0c:	4b06      	ldr	r3, [pc, #24]	; (1f28 <nrf52_errata_16+0x24>)
    1f0e:	681b      	ldr	r3, [r3, #0]
    1f10:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1f14:	3b03      	subs	r3, #3
    1f16:	2b03      	cmp	r3, #3
    1f18:	d802      	bhi.n	1f20 <nrf52_errata_16+0x1c>
    1f1a:	4a04      	ldr	r2, [pc, #16]	; (1f2c <nrf52_errata_16+0x28>)
    1f1c:	5cd0      	ldrb	r0, [r2, r3]
    1f1e:	4770      	bx	lr
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
    1f20:	2000      	movs	r0, #0
    #endif
}
    1f22:	4770      	bx	lr
    1f24:	f0000fe0 	.word	0xf0000fe0
    1f28:	f0000fe8 	.word	0xf0000fe8
    1f2c:	00003b90 	.word	0x00003b90

00001f30 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    1f30:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_12()){
    1f32:	f7ff ffc7 	bl	1ec4 <nrf52_errata_108>
    1f36:	b128      	cbz	r0, 1f44 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    1f38:	4b7e      	ldr	r3, [pc, #504]	; (2134 <SystemInit+0x204>)
    1f3a:	4a7f      	ldr	r2, [pc, #508]	; (2138 <SystemInit+0x208>)
    1f3c:	681b      	ldr	r3, [r3, #0]
    1f3e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1f42:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_16()){
    1f44:	f7ff ffde 	bl	1f04 <nrf52_errata_16>
    1f48:	b110      	cbz	r0, 1f50 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    1f4a:	4b7c      	ldr	r3, [pc, #496]	; (213c <SystemInit+0x20c>)
    1f4c:	4a7c      	ldr	r2, [pc, #496]	; (2140 <SystemInit+0x210>)
    1f4e:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_31()){
    1f50:	f7ff ffb8 	bl	1ec4 <nrf52_errata_108>
    1f54:	b128      	cbz	r0, 1f62 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    1f56:	4b7b      	ldr	r3, [pc, #492]	; (2144 <SystemInit+0x214>)
    1f58:	4a7b      	ldr	r2, [pc, #492]	; (2148 <SystemInit+0x218>)
    1f5a:	681b      	ldr	r3, [r3, #0]
    1f5c:	f3c3 3342 	ubfx	r3, r3, #13, #3
    1f60:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_32()){
    1f62:	f7ff ffcf 	bl	1f04 <nrf52_errata_16>
    1f66:	b120      	cbz	r0, 1f72 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    1f68:	4a78      	ldr	r2, [pc, #480]	; (214c <SystemInit+0x21c>)
    1f6a:	68d3      	ldr	r3, [r2, #12]
    1f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    1f70:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
    1f72:	f7ff ffa7 	bl	1ec4 <nrf52_errata_108>
    1f76:	b140      	cbz	r0, 1f8a <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    1f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f7c:	2200      	movs	r2, #0
    1f7e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    1f82:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    1f86:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_37()){
    1f8a:	f7ff ffbb 	bl	1f04 <nrf52_errata_16>
    1f8e:	b110      	cbz	r0, 1f96 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    1f90:	4b6f      	ldr	r3, [pc, #444]	; (2150 <SystemInit+0x220>)
    1f92:	2203      	movs	r2, #3
    1f94:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_57()){
    1f96:	f7ff ffb5 	bl	1f04 <nrf52_errata_16>
    1f9a:	b140      	cbz	r0, 1fae <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    1f9c:	4b6d      	ldr	r3, [pc, #436]	; (2154 <SystemInit+0x224>)
    1f9e:	2205      	movs	r2, #5
    1fa0:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    1fa2:	2201      	movs	r2, #1
    1fa4:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    1fa6:	2200      	movs	r2, #0
    1fa8:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    1faa:	223f      	movs	r2, #63	; 0x3f
    1fac:	605a      	str	r2, [r3, #4]
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1fae:	4b6a      	ldr	r3, [pc, #424]	; (2158 <SystemInit+0x228>)
    1fb0:	681a      	ldr	r2, [r3, #0]
    1fb2:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1fb4:	bf0b      	itete	eq
    1fb6:	4b69      	ldreq	r3, [pc, #420]	; (215c <SystemInit+0x22c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    1fb8:	4b69      	ldrne	r3, [pc, #420]	; (2160 <SystemInit+0x230>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1fba:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    1fbc:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1fbe:	bf02      	ittt	eq
    1fc0:	3308      	addeq	r3, #8
    1fc2:	681b      	ldreq	r3, [r3, #0]
    1fc4:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    1fc8:	2a06      	cmp	r2, #6
    1fca:	d14d      	bne.n	2068 <SystemInit+0x138>
            {
                switch(var2)
    1fcc:	3b03      	subs	r3, #3
    1fce:	2b03      	cmp	r3, #3
    1fd0:	d84a      	bhi.n	2068 <SystemInit+0x138>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
    1fd2:	4a64      	ldr	r2, [pc, #400]	; (2164 <SystemInit+0x234>)
    1fd4:	5cd3      	ldrb	r3, [r2, r3]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d046      	beq.n	2068 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1fde:	4b62      	ldr	r3, [pc, #392]	; (2168 <SystemInit+0x238>)
    1fe0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1fe4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1fe8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1fec:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1ff0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1ff4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1ff8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1ffc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2000:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2004:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2008:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    200c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2010:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2014:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2018:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    201c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2020:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2024:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2028:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    202c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2030:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2034:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2038:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    203c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2040:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2044:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2048:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    204c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2050:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2054:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2058:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    205c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2060:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2064:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_108()){
    2068:	f7ff ff2c 	bl	1ec4 <nrf52_errata_108>
    206c:	b128      	cbz	r0, 207a <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    206e:	4b3f      	ldr	r3, [pc, #252]	; (216c <SystemInit+0x23c>)
    2070:	4a3f      	ldr	r2, [pc, #252]	; (2170 <SystemInit+0x240>)
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2078:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
    207a:	f7ff ff23 	bl	1ec4 <nrf52_errata_108>
    207e:	b148      	cbz	r0, 2094 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2084:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2088:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    208a:	bf44      	itt	mi
    208c:	f06f 0201 	mvnmi.w	r2, #1
    2090:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2094:	4b30      	ldr	r3, [pc, #192]	; (2158 <SystemInit+0x228>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	2b06      	cmp	r3, #6
    209a:	d10c      	bne.n	20b6 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    209c:	4b30      	ldr	r3, [pc, #192]	; (2160 <SystemInit+0x230>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	3b03      	subs	r3, #3
    20a2:	2b03      	cmp	r3, #3
    20a4:	d807      	bhi.n	20b6 <SystemInit+0x186>
        }
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_182()){
    20a6:	4a33      	ldr	r2, [pc, #204]	; (2174 <SystemInit+0x244>)
    20a8:	5cd3      	ldrb	r3, [r2, r3]
    20aa:	b123      	cbz	r3, 20b6 <SystemInit+0x186>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    20ac:	4a32      	ldr	r2, [pc, #200]	; (2178 <SystemInit+0x248>)
    20ae:	6813      	ldr	r3, [r2, #0]
    20b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    20b4:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    20b6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    20ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    20be:	2a00      	cmp	r2, #0
    20c0:	db03      	blt.n	20ca <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    20c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    20c6:	2b00      	cmp	r3, #0
    20c8:	da2f      	bge.n	212a <SystemInit+0x1fa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    20ca:	4b2c      	ldr	r3, [pc, #176]	; (217c <SystemInit+0x24c>)
    20cc:	2201      	movs	r2, #1
    20ce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    20d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    20d6:	2a00      	cmp	r2, #0
    20d8:	d0fb      	beq.n	20d2 <SystemInit+0x1a2>
            NRF_UICR->PSELRESET[0] = 21;
    20da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    20de:	2115      	movs	r1, #21
    20e0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    20e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    20e8:	2a00      	cmp	r2, #0
    20ea:	d0fb      	beq.n	20e4 <SystemInit+0x1b4>
            NRF_UICR->PSELRESET[1] = 21;
    20ec:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    20f0:	2215      	movs	r2, #21
    20f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    20f6:	4b21      	ldr	r3, [pc, #132]	; (217c <SystemInit+0x24c>)
    20f8:	461a      	mov	r2, r3
    20fa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    20fe:	2900      	cmp	r1, #0
    2100:	d0fb      	beq.n	20fa <SystemInit+0x1ca>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    2102:	2100      	movs	r1, #0
    2104:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2108:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    210c:	2b00      	cmp	r3, #0
    210e:	d0fb      	beq.n	2108 <SystemInit+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
    2110:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2114:	491a      	ldr	r1, [pc, #104]	; (2180 <SystemInit+0x250>)
    2116:	4b1b      	ldr	r3, [pc, #108]	; (2184 <SystemInit+0x254>)
    2118:	68ca      	ldr	r2, [r1, #12]
    211a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    211e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2120:	60cb      	str	r3, [r1, #12]
    2122:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2126:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2128:	e7fd      	b.n	2126 <SystemInit+0x1f6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    212a:	4b17      	ldr	r3, [pc, #92]	; (2188 <SystemInit+0x258>)
    212c:	4a17      	ldr	r2, [pc, #92]	; (218c <SystemInit+0x25c>)
    212e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2130:	bd08      	pop	{r3, pc}
    2132:	bf00      	nop
    2134:	10000324 	.word	0x10000324
    2138:	40013540 	.word	0x40013540
    213c:	4007c074 	.word	0x4007c074
    2140:	baadf00d 	.word	0xbaadf00d
    2144:	10000244 	.word	0x10000244
    2148:	4000053c 	.word	0x4000053c
    214c:	e000edf0 	.word	0xe000edf0
    2150:	400005a0 	.word	0x400005a0
    2154:	40005610 	.word	0x40005610
    2158:	10000130 	.word	0x10000130
    215c:	f0000fe0 	.word	0xf0000fe0
    2160:	10000134 	.word	0x10000134
    2164:	00003b88 	.word	0x00003b88
    2168:	4000c000 	.word	0x4000c000
    216c:	10000258 	.word	0x10000258
    2170:	40000ee4 	.word	0x40000ee4
    2174:	00003b8c 	.word	0x00003b8c
    2178:	4000173c 	.word	0x4000173c
    217c:	4001e000 	.word	0x4001e000
    2180:	e000ed00 	.word	0xe000ed00
    2184:	05fa0004 	.word	0x05fa0004
    2188:	20000158 	.word	0x20000158
    218c:	03d09000 	.word	0x03d09000

00002190 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2192:	4b09      	ldr	r3, [pc, #36]	; (21b8 <z_sys_init_run_level+0x28>)
    2194:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2198:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    219a:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    219c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    21a0:	42a6      	cmp	r6, r4
    21a2:	d800      	bhi.n	21a6 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    21a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    21a6:	e9d4 3500 	ldrd	r3, r5, [r4]
    21aa:	4628      	mov	r0, r5
    21ac:	4798      	blx	r3
		if (retval != 0) {
    21ae:	b108      	cbz	r0, 21b4 <z_sys_init_run_level+0x24>
			if (dev) {
    21b0:	b105      	cbz	r5, 21b4 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    21b2:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    21b4:	3408      	adds	r4, #8
    21b6:	e7f3      	b.n	21a0 <z_sys_init_run_level+0x10>
    21b8:	00003a38 	.word	0x00003a38

000021bc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    21bc:	4b0f      	ldr	r3, [pc, #60]	; (21fc <z_impl_device_get_binding+0x40>)
{
    21be:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    21c0:	4c0f      	ldr	r4, [pc, #60]	; (2200 <z_impl_device_get_binding+0x44>)
{
    21c2:	4605      	mov	r5, r0
    21c4:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    21c6:	429c      	cmp	r4, r3
    21c8:	d104      	bne.n	21d4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    21ca:	4c0d      	ldr	r4, [pc, #52]	; (2200 <z_impl_device_get_binding+0x44>)
    21cc:	42b4      	cmp	r4, r6
    21ce:	d108      	bne.n	21e2 <z_impl_device_get_binding+0x26>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    21d0:	2400      	movs	r4, #0
    21d2:	e010      	b.n	21f6 <z_impl_device_get_binding+0x3a>
		if (z_device_ready(dev) && (dev->name == name)) {
    21d4:	68a2      	ldr	r2, [r4, #8]
    21d6:	b112      	cbz	r2, 21de <z_impl_device_get_binding+0x22>
    21d8:	6822      	ldr	r2, [r4, #0]
    21da:	42aa      	cmp	r2, r5
    21dc:	d00b      	beq.n	21f6 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    21de:	3418      	adds	r4, #24
    21e0:	e7f1      	b.n	21c6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    21e2:	68a3      	ldr	r3, [r4, #8]
    21e4:	b90b      	cbnz	r3, 21ea <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    21e6:	3418      	adds	r4, #24
    21e8:	e7f0      	b.n	21cc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    21ea:	6821      	ldr	r1, [r4, #0]
    21ec:	4628      	mov	r0, r5
    21ee:	f001 f8e5 	bl	33bc <strcmp>
    21f2:	2800      	cmp	r0, #0
    21f4:	d1f7      	bne.n	21e6 <z_impl_device_get_binding+0x2a>
}
    21f6:	4620      	mov	r0, r4
    21f8:	bd70      	pop	{r4, r5, r6, pc}
    21fa:	bf00      	nop
    21fc:	200001c8 	.word	0x200001c8
    2200:	20000168 	.word	0x20000168

00002204 <z_device_get_all_static>:
#include <syscalls/device_get_binding_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device **devices)
{
	*devices = __device_start;
    2204:	4a03      	ldr	r2, [pc, #12]	; (2214 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    2206:	4b04      	ldr	r3, [pc, #16]	; (2218 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    2208:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    220a:	1a9b      	subs	r3, r3, r2
}
    220c:	4803      	ldr	r0, [pc, #12]	; (221c <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    220e:	10db      	asrs	r3, r3, #3
}
    2210:	4358      	muls	r0, r3
    2212:	4770      	bx	lr
    2214:	20000168 	.word	0x20000168
    2218:	200001c8 	.word	0x200001c8
    221c:	aaaaaaab 	.word	0xaaaaaaab

00002220 <idle>:
 */
#if !SMP_FALLBACK
static void set_kernel_idle_time_in_ticks(int32_t ticks)
{
#ifdef CONFIG_SYS_POWER_MANAGEMENT
	_kernel.idle = ticks;
    2220:	4e10      	ldr	r6, [pc, #64]	; (2264 <idle+0x44>)

	set_kernel_idle_time_in_ticks(ticks);
#if (defined(CONFIG_SYS_POWER_SLEEP_STATES) || \
	defined(CONFIG_SYS_POWER_DEEP_SLEEP_STATES))

	sys_pm_idle_exit_notify = 1U;
    2222:	4d11      	ldr	r5, [pc, #68]	; (2268 <idle+0x48>)
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    2224:	b580      	push	{r7, lr}
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2226:	2701      	movs	r7, #1
	__asm__ volatile(
    2228:	f04f 0220 	mov.w	r2, #32
    222c:	f3ef 8311 	mrs	r3, BASEPRI
    2230:	f382 8811 	msr	BASEPRI, r2
    2234:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    2238:	f001 faa4 	bl	3784 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    223c:	2101      	movs	r1, #1
    223e:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
    2240:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2242:	bfd8      	it	le
    2244:	4608      	movle	r0, r1
    2246:	f001 faad 	bl	37a4 <z_set_timeout_expiry>
	if (_sys_suspend(ticks) == SYS_POWER_STATE_ACTIVE) {
    224a:	4620      	mov	r0, r4
	_kernel.idle = ticks;
    224c:	6234      	str	r4, [r6, #32]
	sys_pm_idle_exit_notify = 1U;
    224e:	702f      	strb	r7, [r5, #0]
	if (_sys_suspend(ticks) == SYS_POWER_STATE_ACTIVE) {
    2250:	f7fe fba0 	bl	994 <_sys_suspend>
    2254:	3001      	adds	r0, #1
    2256:	d1e7      	bne.n	2228 <idle+0x8>
		sys_pm_idle_exit_notify = 0U;
    2258:	2300      	movs	r3, #0
    225a:	702b      	strb	r3, [r5, #0]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    225c:	f7ff f828 	bl	12b0 <arch_cpu_idle>
}
    2260:	e7e2      	b.n	2228 <idle+0x8>
    2262:	bf00      	nop
    2264:	20000444 	.word	0x20000444
    2268:	200008ba 	.word	0x200008ba

0000226c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    226c:	4802      	ldr	r0, [pc, #8]	; (2278 <z_bss_zero+0xc>)
    226e:	4a03      	ldr	r2, [pc, #12]	; (227c <z_bss_zero+0x10>)
    2270:	2100      	movs	r1, #0
    2272:	1a12      	subs	r2, r2, r0
    2274:	f001 b8d9 	b.w	342a <memset>
    2278:	200001f8 	.word	0x200001f8
    227c:	200008bc 	.word	0x200008bc

00002280 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    2280:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    2282:	4806      	ldr	r0, [pc, #24]	; (229c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    2284:	4a06      	ldr	r2, [pc, #24]	; (22a0 <z_data_copy+0x20>)
    2286:	4907      	ldr	r1, [pc, #28]	; (22a4 <z_data_copy+0x24>)
    2288:	1a12      	subs	r2, r2, r0
    228a:	f001 f8a3 	bl	33d4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    228e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    2292:	4a05      	ldr	r2, [pc, #20]	; (22a8 <z_data_copy+0x28>)
    2294:	4905      	ldr	r1, [pc, #20]	; (22ac <z_data_copy+0x2c>)
    2296:	4806      	ldr	r0, [pc, #24]	; (22b0 <z_data_copy+0x30>)
    2298:	f001 b89c 	b.w	33d4 <memcpy>
    229c:	20000000 	.word	0x20000000
    22a0:	200001f4 	.word	0x200001f4
    22a4:	00003be4 	.word	0x00003be4
    22a8:	00000000 	.word	0x00000000
    22ac:	00003be4 	.word	0x00003be4
    22b0:	20000000 	.word	0x20000000

000022b4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    22b4:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    22b6:	4b0c      	ldr	r3, [pc, #48]	; (22e8 <bg_thread_main+0x34>)
    22b8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    22ba:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    22bc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    22be:	f7ff ff67 	bl	2190 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    22c2:	4a0a      	ldr	r2, [pc, #40]	; (22ec <bg_thread_main+0x38>)
    22c4:	490a      	ldr	r1, [pc, #40]	; (22f0 <bg_thread_main+0x3c>)
    22c6:	480b      	ldr	r0, [pc, #44]	; (22f4 <bg_thread_main+0x40>)
    22c8:	f000 fe06 	bl	2ed8 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    22cc:	2003      	movs	r0, #3
    22ce:	f7ff ff5f 	bl	2190 <z_sys_init_run_level>

	z_init_static_threads();
    22d2:	f000 fc13 	bl	2afc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    22d6:	f7fe f87d 	bl	3d4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    22da:	4a07      	ldr	r2, [pc, #28]	; (22f8 <bg_thread_main+0x44>)
    22dc:	7b13      	ldrb	r3, [r2, #12]
    22de:	f023 0301 	bic.w	r3, r3, #1
    22e2:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    22e4:	bd08      	pop	{r3, pc}
    22e6:	bf00      	nop
    22e8:	200008bb 	.word	0x200008bb
    22ec:	00003bdb 	.word	0x00003bdb
    22f0:	00003b94 	.word	0x00003b94
    22f4:	00003bb5 	.word	0x00003bb5
    22f8:	20000278 	.word	0x20000278

000022fc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    22fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp = (uint32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    2300:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 23f8 <z_cstart+0xfc>
    2304:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2306:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    230a:	4d34      	ldr	r5, [pc, #208]	; (23dc <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    230c:	4e34      	ldr	r6, [pc, #208]	; (23e0 <z_cstart+0xe4>)
    230e:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2310:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 23fc <z_cstart+0x100>
    2314:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 2400 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
    2318:	4f32      	ldr	r7, [pc, #200]	; (23e4 <z_cstart+0xe8>)
    231a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    231e:	2400      	movs	r4, #0
    2320:	616b      	str	r3, [r5, #20]
    2322:	23e0      	movs	r3, #224	; 0xe0
    2324:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2328:	77ec      	strb	r4, [r5, #31]
    232a:	762c      	strb	r4, [r5, #24]
    232c:	766c      	strb	r4, [r5, #25]
    232e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2330:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2332:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2336:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2338:	f7ff f8f0 	bl	151c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    233c:	f7fe ffb2 	bl	12a4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2344:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2346:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    2348:	4d27      	ldr	r5, [pc, #156]	; (23e8 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    234a:	f240 1301 	movw	r3, #257	; 0x101
    234e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2352:	ab06      	add	r3, sp, #24
    2354:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2356:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    2358:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    235c:	f7ff ff18 	bl	2190 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2360:	2001      	movs	r0, #1
    2362:	f7ff ff15 	bl	2190 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2366:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    236a:	f000 fad7 	bl	291c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    236e:	4b1f      	ldr	r3, [pc, #124]	; (23ec <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    2370:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2372:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2376:	4641      	mov	r1, r8
    2378:	9305      	str	r3, [sp, #20]
    237a:	4630      	mov	r0, r6
    237c:	4653      	mov	r3, sl
    237e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2382:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2386:	9400      	str	r4, [sp, #0]
    2388:	f000 fb92 	bl	2ab0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    238c:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    238e:	4630      	mov	r0, r6
    2390:	f023 0304 	bic.w	r3, r3, #4
    2394:	7373      	strb	r3, [r6, #13]
    2396:	f001 f934 	bl	3602 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    239a:	230f      	movs	r3, #15
    239c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    23a0:	4913      	ldr	r1, [pc, #76]	; (23f0 <z_cstart+0xf4>)
    23a2:	4b14      	ldr	r3, [pc, #80]	; (23f4 <z_cstart+0xf8>)
    23a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    23a8:	4638      	mov	r0, r7
    23aa:	e9cd b404 	strd	fp, r4, [sp, #16]
    23ae:	e9cd 4400 	strd	r4, r4, [sp]
    23b2:	f000 fb7d 	bl	2ab0 <z_setup_new_thread>
    23b6:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    23b8:	60ef      	str	r7, [r5, #12]
    23ba:	f023 0304 	bic.w	r3, r3, #4
    23be:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    23c0:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    23c4:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    23c8:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    23ca:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    23ce:	4653      	mov	r3, sl
    23d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23d4:	4641      	mov	r1, r8
    23d6:	4630      	mov	r0, r6
    23d8:	f7fe ff48 	bl	126c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    23dc:	e000ed00 	.word	0xe000ed00
    23e0:	20000278 	.word	0x20000278
    23e4:	200001f8 	.word	0x200001f8
    23e8:	20000444 	.word	0x20000444
    23ec:	00003bdc 	.word	0x00003bdc
    23f0:	20000cc0 	.word	0x20000cc0
    23f4:	00002221 	.word	0x00002221
    23f8:	20001600 	.word	0x20001600
    23fc:	000022b5 	.word	0x000022b5
    2400:	200008c0 	.word	0x200008c0

00002404 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2404:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2406:	4c08      	ldr	r4, [pc, #32]	; (2428 <z_reset_time_slice+0x24>)
    2408:	6823      	ldr	r3, [r4, #0]
    240a:	b15b      	cbz	r3, 2424 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    240c:	f7fe fe54 	bl	10b8 <z_clock_elapsed>
    2410:	4603      	mov	r3, r0
    2412:	6820      	ldr	r0, [r4, #0]
    2414:	4a05      	ldr	r2, [pc, #20]	; (242c <z_reset_time_slice+0x28>)
    2416:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    2418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    241c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    241e:	2100      	movs	r1, #0
    2420:	f001 b9c0 	b.w	37a4 <z_set_timeout_expiry>
}
    2424:	bd10      	pop	{r4, pc}
    2426:	bf00      	nop
    2428:	2000047c 	.word	0x2000047c
    242c:	20000444 	.word	0x20000444

00002430 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    2430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2432:	4605      	mov	r5, r0
    2434:	460c      	mov	r4, r1
    2436:	f04f 0320 	mov.w	r3, #32
    243a:	f3ef 8611 	mrs	r6, BASEPRI
    243e:	f383 8811 	msr	BASEPRI, r3
    2442:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    2446:	4b0d      	ldr	r3, [pc, #52]	; (247c <k_sched_time_slice_set+0x4c>)
    2448:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    244a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    244e:	f240 30e7 	movw	r0, #999	; 0x3e7
    2452:	2100      	movs	r1, #0
    2454:	611a      	str	r2, [r3, #16]
    2456:	fbe7 0105 	umlal	r0, r1, r7, r5
    245a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    245e:	2300      	movs	r3, #0
    2460:	f7fd fe3c 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2464:	4b06      	ldr	r3, [pc, #24]	; (2480 <k_sched_time_slice_set+0x50>)
    2466:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2468:	4b06      	ldr	r3, [pc, #24]	; (2484 <k_sched_time_slice_set+0x54>)
    246a:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    246c:	f7ff ffca 	bl	2404 <z_reset_time_slice>
	__asm__ volatile(
    2470:	f386 8811 	msr	BASEPRI, r6
    2474:	f3bf 8f6f 	isb	sy
	}
}
    2478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    247a:	bf00      	nop
    247c:	20000444 	.word	0x20000444
    2480:	2000047c 	.word	0x2000047c
    2484:	20000478 	.word	0x20000478

00002488 <k_sched_lock>:
	__asm__ volatile(
    2488:	f04f 0320 	mov.w	r3, #32
    248c:	f3ef 8111 	mrs	r1, BASEPRI
    2490:	f383 8811 	msr	BASEPRI, r3
    2494:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2498:	4b04      	ldr	r3, [pc, #16]	; (24ac <k_sched_lock+0x24>)
    249a:	689a      	ldr	r2, [r3, #8]
    249c:	7bd3      	ldrb	r3, [r2, #15]
    249e:	3b01      	subs	r3, #1
    24a0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    24a2:	f381 8811 	msr	BASEPRI, r1
    24a6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    24aa:	4770      	bx	lr
    24ac:	20000444 	.word	0x20000444

000024b0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    24b0:	4b09      	ldr	r3, [pc, #36]	; (24d8 <z_priq_dumb_remove+0x28>)
    24b2:	f103 0228 	add.w	r2, r3, #40	; 0x28
    24b6:	4282      	cmp	r2, r0
    24b8:	d105      	bne.n	24c6 <z_priq_dumb_remove+0x16>
    24ba:	689b      	ldr	r3, [r3, #8]
    24bc:	428b      	cmp	r3, r1
    24be:	d102      	bne.n	24c6 <z_priq_dumb_remove+0x16>
    24c0:	7b4b      	ldrb	r3, [r1, #13]
    24c2:	06db      	lsls	r3, r3, #27
    24c4:	d106      	bne.n	24d4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    24c6:	e9d1 3200 	ldrd	r3, r2, [r1]
    24ca:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    24cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    24ce:	2300      	movs	r3, #0
	node->prev = NULL;
    24d0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    24d4:	4770      	bx	lr
    24d6:	bf00      	nop
    24d8:	20000444 	.word	0x20000444

000024dc <update_cache>:
{
    24dc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    24de:	4c10      	ldr	r4, [pc, #64]	; (2520 <update_cache+0x44>)
{
    24e0:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    24e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    24e6:	f001 f882 	bl	35ee <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    24ea:	68a3      	ldr	r3, [r4, #8]
    24ec:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    24ee:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    24f0:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    24f2:	bf44      	itt	mi
    24f4:	f041 0108 	orrmi.w	r1, r1, #8
    24f8:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    24fa:	b905      	cbnz	r5, 24fe <update_cache+0x22>
    24fc:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    24fe:	b94e      	cbnz	r6, 2514 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    2500:	7b5a      	ldrb	r2, [r3, #13]
    2502:	06d2      	lsls	r2, r2, #27
    2504:	d106      	bne.n	2514 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2506:	69aa      	ldr	r2, [r5, #24]
    2508:	b922      	cbnz	r2, 2514 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    250a:	89da      	ldrh	r2, [r3, #14]
    250c:	2a7f      	cmp	r2, #127	; 0x7f
    250e:	d901      	bls.n	2514 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    2510:	6263      	str	r3, [r4, #36]	; 0x24
}
    2512:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    2514:	42ab      	cmp	r3, r5
    2516:	d001      	beq.n	251c <update_cache+0x40>
			z_reset_time_slice();
    2518:	f7ff ff74 	bl	2404 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    251c:	6265      	str	r5, [r4, #36]	; 0x24
}
    251e:	e7f8      	b.n	2512 <update_cache+0x36>
    2520:	20000444 	.word	0x20000444

00002524 <k_sched_unlock>:
{
    2524:	b510      	push	{r4, lr}
	__asm__ volatile(
    2526:	f04f 0320 	mov.w	r3, #32
    252a:	f3ef 8411 	mrs	r4, BASEPRI
    252e:	f383 8811 	msr	BASEPRI, r3
    2532:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2536:	4b08      	ldr	r3, [pc, #32]	; (2558 <k_sched_unlock+0x34>)
    2538:	689a      	ldr	r2, [r3, #8]
    253a:	7bd3      	ldrb	r3, [r2, #15]
    253c:	3301      	adds	r3, #1
    253e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2540:	2000      	movs	r0, #0
    2542:	f7ff ffcb 	bl	24dc <update_cache>
	__asm__ volatile(
    2546:	f384 8811 	msr	BASEPRI, r4
    254a:	f3bf 8f6f 	isb	sy
}
    254e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2552:	f001 b842 	b.w	35da <z_reschedule_unlocked>
    2556:	bf00      	nop
    2558:	20000444 	.word	0x20000444

0000255c <ready_thread>:
{
    255c:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    255e:	7b43      	ldrb	r3, [r0, #13]
    2560:	06db      	lsls	r3, r3, #27
    2562:	d12a      	bne.n	25ba <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    2564:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    2566:	bb43      	cbnz	r3, 25ba <ready_thread+0x5e>
	return list->head == list;
    2568:	4a15      	ldr	r2, [pc, #84]	; (25c0 <ready_thread+0x64>)
    256a:	4611      	mov	r1, r2
    256c:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2570:	428c      	cmp	r4, r1
    2572:	bf18      	it	ne
    2574:	4623      	movne	r3, r4
    2576:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2578:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    257a:	bf38      	it	cc
    257c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    257e:	b1b3      	cbz	r3, 25ae <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    2580:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2584:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2588:	42ae      	cmp	r6, r5
    258a:	db03      	blt.n	2594 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    258c:	42a3      	cmp	r3, r4
    258e:	d00e      	beq.n	25ae <ready_thread+0x52>
    2590:	681b      	ldr	r3, [r3, #0]
    2592:	e7f4      	b.n	257e <ready_thread+0x22>
	node->prev = successor->prev;
    2594:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2596:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    259a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    259c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    259e:	7b43      	ldrb	r3, [r0, #13]
    25a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    25a4:	7343      	strb	r3, [r0, #13]
}
    25a6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    25a8:	2000      	movs	r0, #0
    25aa:	f7ff bf97 	b.w	24dc <update_cache>
	node->prev = list->tail;
    25ae:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    25b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    25b4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    25b6:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    25b8:	e7f1      	b.n	259e <ready_thread+0x42>
}
    25ba:	bc70      	pop	{r4, r5, r6}
    25bc:	4770      	bx	lr
    25be:	bf00      	nop
    25c0:	20000444 	.word	0x20000444

000025c4 <z_sched_start>:
{
    25c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    25c6:	f04f 0220 	mov.w	r2, #32
    25ca:	f3ef 8411 	mrs	r4, BASEPRI
    25ce:	f382 8811 	msr	BASEPRI, r2
    25d2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    25d6:	7b42      	ldrb	r2, [r0, #13]
    25d8:	0751      	lsls	r1, r2, #29
    25da:	d404      	bmi.n	25e6 <z_sched_start+0x22>
	__asm__ volatile(
    25dc:	f384 8811 	msr	BASEPRI, r4
    25e0:	f3bf 8f6f 	isb	sy
}
    25e4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    25e6:	f022 0204 	bic.w	r2, r2, #4
    25ea:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    25ec:	f7ff ffb6 	bl	255c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    25f0:	4621      	mov	r1, r4
    25f2:	4802      	ldr	r0, [pc, #8]	; (25fc <z_sched_start+0x38>)
}
    25f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    25f8:	f000 bfd8 	b.w	35ac <z_reschedule>
    25fc:	200008bc 	.word	0x200008bc

00002600 <z_move_thread_to_end_of_prio_q>:
{
    2600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2602:	4601      	mov	r1, r0
	__asm__ volatile(
    2604:	f04f 0320 	mov.w	r3, #32
    2608:	f3ef 8411 	mrs	r4, BASEPRI
    260c:	f383 8811 	msr	BASEPRI, r3
    2610:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2614:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2618:	2b00      	cmp	r3, #0
    261a:	da02      	bge.n	2622 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    261c:	4819      	ldr	r0, [pc, #100]	; (2684 <z_move_thread_to_end_of_prio_q+0x84>)
    261e:	f7ff ff47 	bl	24b0 <z_priq_dumb_remove>
	return list->head == list;
    2622:	4a19      	ldr	r2, [pc, #100]	; (2688 <z_move_thread_to_end_of_prio_q+0x88>)
    2624:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2626:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
    2628:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    262c:	4283      	cmp	r3, r0
    262e:	bf08      	it	eq
    2630:	2300      	moveq	r3, #0
    2632:	2b00      	cmp	r3, #0
    2634:	bf38      	it	cc
    2636:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2638:	b1eb      	cbz	r3, 2676 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    263a:	f991 700e 	ldrsb.w	r7, [r1, #14]
    263e:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2642:	42b7      	cmp	r7, r6
    2644:	db03      	blt.n	264e <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    2646:	429d      	cmp	r5, r3
    2648:	d015      	beq.n	2676 <z_move_thread_to_end_of_prio_q+0x76>
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	e7f4      	b.n	2638 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    264e:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    2650:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    2654:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    2656:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    2658:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    265a:	6890      	ldr	r0, [r2, #8]
    265c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2660:	734b      	strb	r3, [r1, #13]
    2662:	1a43      	subs	r3, r0, r1
    2664:	4258      	negs	r0, r3
    2666:	4158      	adcs	r0, r3
    2668:	f7ff ff38 	bl	24dc <update_cache>
	__asm__ volatile(
    266c:	f384 8811 	msr	BASEPRI, r4
    2670:	f3bf 8f6f 	isb	sy
}
    2674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    2676:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    267a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    267c:	6019      	str	r1, [r3, #0]
	list->tail = node;
    267e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    2680:	e7ea      	b.n	2658 <z_move_thread_to_end_of_prio_q+0x58>
    2682:	bf00      	nop
    2684:	2000046c 	.word	0x2000046c
    2688:	20000444 	.word	0x20000444

0000268c <z_time_slice>:
{
    268c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    268e:	4a15      	ldr	r2, [pc, #84]	; (26e4 <z_time_slice+0x58>)
    2690:	4b15      	ldr	r3, [pc, #84]	; (26e8 <z_time_slice+0x5c>)
    2692:	6814      	ldr	r4, [r2, #0]
{
    2694:	4601      	mov	r1, r0
	if (pending_current == _current) {
    2696:	6898      	ldr	r0, [r3, #8]
    2698:	42a0      	cmp	r0, r4
    269a:	461c      	mov	r4, r3
    269c:	d103      	bne.n	26a6 <z_time_slice+0x1a>
}
    269e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    26a2:	f7ff beaf 	b.w	2404 <z_reset_time_slice>
	pending_current = NULL;
    26a6:	2500      	movs	r5, #0
    26a8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    26aa:	4a10      	ldr	r2, [pc, #64]	; (26ec <z_time_slice+0x60>)
    26ac:	6812      	ldr	r2, [r2, #0]
    26ae:	b1b2      	cbz	r2, 26de <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    26b0:	89c2      	ldrh	r2, [r0, #14]
    26b2:	2a7f      	cmp	r2, #127	; 0x7f
    26b4:	d813      	bhi.n	26de <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    26b6:	4a0e      	ldr	r2, [pc, #56]	; (26f0 <z_time_slice+0x64>)
    26b8:	f990 500e 	ldrsb.w	r5, [r0, #14]
    26bc:	6812      	ldr	r2, [r2, #0]
    26be:	4295      	cmp	r5, r2
    26c0:	db0d      	blt.n	26de <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    26c2:	4a0c      	ldr	r2, [pc, #48]	; (26f4 <z_time_slice+0x68>)
    26c4:	4290      	cmp	r0, r2
    26c6:	d00a      	beq.n	26de <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    26c8:	6982      	ldr	r2, [r0, #24]
    26ca:	b942      	cbnz	r2, 26de <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    26cc:	691a      	ldr	r2, [r3, #16]
    26ce:	428a      	cmp	r2, r1
    26d0:	dc02      	bgt.n	26d8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    26d2:	f7ff ff95 	bl	2600 <z_move_thread_to_end_of_prio_q>
    26d6:	e7e2      	b.n	269e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    26d8:	1a52      	subs	r2, r2, r1
    26da:	611a      	str	r2, [r3, #16]
}
    26dc:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    26de:	2300      	movs	r3, #0
    26e0:	6123      	str	r3, [r4, #16]
    26e2:	e7fb      	b.n	26dc <z_time_slice+0x50>
    26e4:	20000474 	.word	0x20000474
    26e8:	20000444 	.word	0x20000444
    26ec:	2000047c 	.word	0x2000047c
    26f0:	20000478 	.word	0x20000478
    26f4:	200001f8 	.word	0x200001f8

000026f8 <z_impl_k_thread_suspend>:
{
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    26fc:	3018      	adds	r0, #24
    26fe:	f001 f82b 	bl	3758 <z_abort_timeout>
	__asm__ volatile(
    2702:	f04f 0320 	mov.w	r3, #32
    2706:	f3ef 8611 	mrs	r6, BASEPRI
    270a:	f383 8811 	msr	BASEPRI, r3
    270e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2712:	f994 300d 	ldrsb.w	r3, [r4, #13]
    2716:	2b00      	cmp	r3, #0
    2718:	da07      	bge.n	272a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    271a:	480f      	ldr	r0, [pc, #60]	; (2758 <z_impl_k_thread_suspend+0x60>)
    271c:	4621      	mov	r1, r4
    271e:	f7ff fec7 	bl	24b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2722:	7b63      	ldrb	r3, [r4, #13]
    2724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2728:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    272a:	4d0c      	ldr	r5, [pc, #48]	; (275c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    272c:	7b63      	ldrb	r3, [r4, #13]
    272e:	68a8      	ldr	r0, [r5, #8]
    2730:	f043 0310 	orr.w	r3, r3, #16
    2734:	7363      	strb	r3, [r4, #13]
    2736:	1b03      	subs	r3, r0, r4
    2738:	4258      	negs	r0, r3
    273a:	4158      	adcs	r0, r3
    273c:	f7ff fece 	bl	24dc <update_cache>
	__asm__ volatile(
    2740:	f386 8811 	msr	BASEPRI, r6
    2744:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    2748:	68ab      	ldr	r3, [r5, #8]
    274a:	42a3      	cmp	r3, r4
    274c:	d103      	bne.n	2756 <z_impl_k_thread_suspend+0x5e>
}
    274e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    2752:	f000 bf42 	b.w	35da <z_reschedule_unlocked>
}
    2756:	bd70      	pop	{r4, r5, r6, pc}
    2758:	2000046c 	.word	0x2000046c
    275c:	20000444 	.word	0x20000444

00002760 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2760:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
    2762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2766:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2768:	b103      	cbz	r3, 276c <z_thread_single_abort+0xc>
		thread->fn_abort();
    276a:	4798      	blx	r3
    276c:	f104 0018 	add.w	r0, r4, #24
    2770:	f000 fff2 	bl	3758 <z_abort_timeout>
	__asm__ volatile(
    2774:	f04f 0320 	mov.w	r3, #32
    2778:	f3ef 8611 	mrs	r6, BASEPRI
    277c:	f383 8811 	msr	BASEPRI, r3
    2780:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2784:	7b63      	ldrb	r3, [r4, #13]
    2786:	06d8      	lsls	r0, r3, #27
    2788:	d123      	bne.n	27d2 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    278a:	69a2      	ldr	r2, [r4, #24]
    278c:	bb0a      	cbnz	r2, 27d2 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    278e:	0619      	lsls	r1, r3, #24
    2790:	d507      	bpl.n	27a2 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2792:	481f      	ldr	r0, [pc, #124]	; (2810 <z_thread_single_abort+0xb0>)
    2794:	4621      	mov	r1, r4
    2796:	f7ff fe8b 	bl	24b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    279a:	7b63      	ldrb	r3, [r4, #13]
    279c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27a0:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    27a2:	4b1c      	ldr	r3, [pc, #112]	; (2814 <z_thread_single_abort+0xb4>)
    27a4:	6898      	ldr	r0, [r3, #8]
    27a6:	1b02      	subs	r2, r0, r4
    27a8:	4250      	negs	r0, r2
    27aa:	4150      	adcs	r0, r2
    27ac:	f7ff fe96 	bl	24dc <update_cache>
		thread->base.thread_state |= mask;
    27b0:	7b63      	ldrb	r3, [r4, #13]
    27b2:	f043 0308 	orr.w	r3, r3, #8
    27b6:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    27b8:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    27bc:	2700      	movs	r7, #0
	return list->head == list;
    27be:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    27c0:	4545      	cmp	r5, r8
    27c2:	d000      	beq.n	27c6 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    27c4:	b995      	cbnz	r5, 27ec <z_thread_single_abort+0x8c>
	__asm__ volatile(
    27c6:	f386 8811 	msr	BASEPRI, r6
    27ca:	f3bf 8f6f 	isb	sy
}
    27ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    27d2:	079b      	lsls	r3, r3, #30
    27d4:	d5ec      	bpl.n	27b0 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    27d6:	68a0      	ldr	r0, [r4, #8]
    27d8:	4621      	mov	r1, r4
    27da:	f7ff fe69 	bl	24b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    27de:	7b63      	ldrb	r3, [r4, #13]
    27e0:	f023 0302 	bic.w	r3, r3, #2
    27e4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    27e6:	2300      	movs	r3, #0
    27e8:	60a3      	str	r3, [r4, #8]
    27ea:	e7e1      	b.n	27b0 <z_thread_single_abort+0x50>
    27ec:	f105 0018 	add.w	r0, r5, #24
    27f0:	f000 ffb2 	bl	3758 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    27f4:	68a8      	ldr	r0, [r5, #8]
    27f6:	4629      	mov	r1, r5
    27f8:	f7ff fe5a 	bl	24b0 <z_priq_dumb_remove>
    27fc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    27fe:	60af      	str	r7, [r5, #8]
    2800:	f023 0302 	bic.w	r3, r3, #2
    2804:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2806:	67af      	str	r7, [r5, #120]	; 0x78
			ready_thread(waiter);
    2808:	4628      	mov	r0, r5
    280a:	f7ff fea7 	bl	255c <ready_thread>
    280e:	e7d6      	b.n	27be <z_thread_single_abort+0x5e>
    2810:	2000046c 	.word	0x2000046c
    2814:	20000444 	.word	0x20000444

00002818 <unready_thread>:
{
    2818:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    281a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    281e:	2b00      	cmp	r3, #0
{
    2820:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2822:	da06      	bge.n	2832 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2824:	4807      	ldr	r0, [pc, #28]	; (2844 <unready_thread+0x2c>)
    2826:	f7ff fe43 	bl	24b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    282a:	7b4b      	ldrb	r3, [r1, #13]
    282c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2830:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    2832:	4b05      	ldr	r3, [pc, #20]	; (2848 <unready_thread+0x30>)
    2834:	6898      	ldr	r0, [r3, #8]
    2836:	1a43      	subs	r3, r0, r1
    2838:	4258      	negs	r0, r3
    283a:	4158      	adcs	r0, r3
}
    283c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    2840:	f7ff be4c 	b.w	24dc <update_cache>
    2844:	2000046c 	.word	0x2000046c
    2848:	20000444 	.word	0x20000444

0000284c <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284e:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    2850:	f000 ffc2 	bl	37d8 <z_tick_get_32>
    2854:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    2856:	f04f 0320 	mov.w	r3, #32
    285a:	f3ef 8711 	mrs	r7, BASEPRI
    285e:	f383 8811 	msr	BASEPRI, r3
    2862:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    2866:	4e0d      	ldr	r6, [pc, #52]	; (289c <z_tick_sleep.part.0+0x50>)
    2868:	4b0d      	ldr	r3, [pc, #52]	; (28a0 <z_tick_sleep.part.0+0x54>)
    286a:	68b0      	ldr	r0, [r6, #8]
    286c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    286e:	f000 ff03 	bl	3678 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    2872:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2874:	490b      	ldr	r1, [pc, #44]	; (28a4 <z_tick_sleep.part.0+0x58>)
    2876:	462a      	mov	r2, r5
    2878:	17eb      	asrs	r3, r5, #31
    287a:	3018      	adds	r0, #24
    287c:	f000 f9da 	bl	2c34 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2880:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2882:	7b53      	ldrb	r3, [r2, #13]
    2884:	f043 0310 	orr.w	r3, r3, #16
    2888:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
    288a:	4638      	mov	r0, r7
    288c:	f7fe fc5e 	bl	114c <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2890:	f000 ffa2 	bl	37d8 <z_tick_get_32>
    2894:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    2896:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    289a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    289c:	20000444 	.word	0x20000444
    28a0:	20000474 	.word	0x20000474
    28a4:	00003623 	.word	0x00003623

000028a8 <pend>:
{
    28a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28ac:	4606      	mov	r6, r0
    28ae:	4614      	mov	r4, r2
    28b0:	461d      	mov	r5, r3
    28b2:	f04f 0320 	mov.w	r3, #32
    28b6:	f3ef 8711 	mrs	r7, BASEPRI
    28ba:	f383 8811 	msr	BASEPRI, r3
    28be:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    28c2:	f000 fee9 	bl	3698 <add_to_waitq_locked>
	__asm__ volatile(
    28c6:	f387 8811 	msr	BASEPRI, r7
    28ca:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    28ce:	1c6b      	adds	r3, r5, #1
    28d0:	bf08      	it	eq
    28d2:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    28d6:	d008      	beq.n	28ea <pend+0x42>
    28d8:	4622      	mov	r2, r4
    28da:	462b      	mov	r3, r5
    28dc:	f106 0018 	add.w	r0, r6, #24
    28e0:	4903      	ldr	r1, [pc, #12]	; (28f0 <pend+0x48>)
}
    28e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28e6:	f000 b9a5 	b.w	2c34 <z_add_timeout>
    28ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ee:	bf00      	nop
    28f0:	00003623 	.word	0x00003623

000028f4 <z_pend_curr>:
{
    28f4:	b510      	push	{r4, lr}
	pending_current = _current;
    28f6:	4b07      	ldr	r3, [pc, #28]	; (2914 <z_pend_curr+0x20>)
    28f8:	6898      	ldr	r0, [r3, #8]
    28fa:	4b07      	ldr	r3, [pc, #28]	; (2918 <z_pend_curr+0x24>)
{
    28fc:	460c      	mov	r4, r1
	pending_current = _current;
    28fe:	6018      	str	r0, [r3, #0]
{
    2900:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    2902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2906:	f7ff ffcf 	bl	28a8 <pend>
    290a:	4620      	mov	r0, r4
}
    290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2910:	f7fe bc1c 	b.w	114c <arch_swap>
    2914:	20000444 	.word	0x20000444
    2918:	20000474 	.word	0x20000474

0000291c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    291c:	4b04      	ldr	r3, [pc, #16]	; (2930 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    291e:	2100      	movs	r1, #0
    2920:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2924:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2928:	4608      	mov	r0, r1
    292a:	f7ff bd81 	b.w	2430 <k_sched_time_slice_set>
    292e:	bf00      	nop
    2930:	20000444 	.word	0x20000444

00002934 <z_impl_k_yield>:
{
    2934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2936:	4c24      	ldr	r4, [pc, #144]	; (29c8 <z_impl_k_yield+0x94>)
    2938:	4b24      	ldr	r3, [pc, #144]	; (29cc <z_impl_k_yield+0x98>)
    293a:	68a2      	ldr	r2, [r4, #8]
    293c:	429a      	cmp	r2, r3
    293e:	d030      	beq.n	29a2 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    2940:	f04f 0320 	mov.w	r3, #32
    2944:	f3ef 8511 	mrs	r5, BASEPRI
    2948:	f383 8811 	msr	BASEPRI, r3
    294c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2950:	68a1      	ldr	r1, [r4, #8]
    2952:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2956:	f7ff fdab 	bl	24b0 <z_priq_dumb_remove>
	return list->head == list;
    295a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    295c:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    295e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2960:	4283      	cmp	r3, r0
    2962:	bf08      	it	eq
    2964:	2300      	moveq	r3, #0
    2966:	2b00      	cmp	r3, #0
    2968:	bf38      	it	cc
    296a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    296c:	b32b      	cbz	r3, 29ba <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    296e:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2972:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2976:	42b7      	cmp	r7, r6
    2978:	db03      	blt.n	2982 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    297a:	428b      	cmp	r3, r1
    297c:	d01d      	beq.n	29ba <z_impl_k_yield+0x86>
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	e7f4      	b.n	296c <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    2982:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2984:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    2988:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    298a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    298c:	7b53      	ldrb	r3, [r2, #13]
    298e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2992:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    2994:	2001      	movs	r0, #1
    2996:	f7ff fda1 	bl	24dc <update_cache>
	__asm__ volatile(
    299a:	f385 8811 	msr	BASEPRI, r5
    299e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    29a2:	f04f 0320 	mov.w	r3, #32
    29a6:	f3ef 8011 	mrs	r0, BASEPRI
    29aa:	f383 8811 	msr	BASEPRI, r3
    29ae:	f3bf 8f6f 	isb	sy
}
    29b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    29b6:	f7fe bbc9 	b.w	114c <arch_swap>
	node->prev = list->tail;
    29ba:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    29be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    29c0:	601a      	str	r2, [r3, #0]
	list->tail = node;
    29c2:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    29c4:	e7e2      	b.n	298c <z_impl_k_yield+0x58>
    29c6:	bf00      	nop
    29c8:	20000444 	.word	0x20000444
    29cc:	200001f8 	.word	0x200001f8

000029d0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    29d0:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    29d2:	3301      	adds	r3, #1
    29d4:	bf08      	it	eq
    29d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    29da:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    29dc:	d106      	bne.n	29ec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    29de:	4b0b      	ldr	r3, [pc, #44]	; (2a0c <z_impl_k_sleep+0x3c>)
    29e0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    29e2:	f7ff fe89 	bl	26f8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    29e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    29ea:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    29ec:	4604      	mov	r4, r0
	if (ticks == 0) {
    29ee:	b948      	cbnz	r0, 2a04 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    29f0:	f7ff ffa0 	bl	2934 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    29f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    29f8:	fb84 3400 	smull	r3, r4, r4, r0
    29fc:	0bd8      	lsrs	r0, r3, #15
    29fe:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2a02:	e7f2      	b.n	29ea <z_impl_k_sleep+0x1a>
    2a04:	f7ff ff22 	bl	284c <z_tick_sleep.part.0>
    2a08:	4604      	mov	r4, r0
    2a0a:	e7f3      	b.n	29f4 <z_impl_k_sleep+0x24>
    2a0c:	20000444 	.word	0x20000444

00002a10 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2a10:	4b01      	ldr	r3, [pc, #4]	; (2a18 <z_impl_k_current_get+0x8>)
    2a12:	6898      	ldr	r0, [r3, #8]
    2a14:	4770      	bx	lr
    2a16:	bf00      	nop
    2a18:	20000444 	.word	0x20000444

00002a1c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2a1c:	b538      	push	{r3, r4, r5, lr}
    2a1e:	4604      	mov	r4, r0
    2a20:	f04f 0320 	mov.w	r3, #32
    2a24:	f3ef 8511 	mrs	r5, BASEPRI
    2a28:	f383 8811 	msr	BASEPRI, r3
    2a2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    2a30:	f000 fe5d 	bl	36ee <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    2a34:	b148      	cbz	r0, 2a4a <z_impl_k_sem_give+0x2e>
    2a36:	2200      	movs	r2, #0
    2a38:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2a3a:	f000 fde2 	bl	3602 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    2a3e:	4629      	mov	r1, r5
    2a40:	4805      	ldr	r0, [pc, #20]	; (2a58 <z_impl_k_sem_give+0x3c>)
}
    2a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    2a46:	f000 bdb1 	b.w	35ac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2a4a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2a4e:	429a      	cmp	r2, r3
    2a50:	bf18      	it	ne
    2a52:	3301      	addne	r3, #1
    2a54:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    2a56:	e7f2      	b.n	2a3e <z_impl_k_sem_give+0x22>
    2a58:	200008bc 	.word	0x200008bc

00002a5c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2a5e:	4614      	mov	r4, r2
    2a60:	461d      	mov	r5, r3
    2a62:	f04f 0320 	mov.w	r3, #32
    2a66:	f3ef 8111 	mrs	r1, BASEPRI
    2a6a:	f383 8811 	msr	BASEPRI, r3
    2a6e:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    2a72:	6883      	ldr	r3, [r0, #8]
    2a74:	b143      	cbz	r3, 2a88 <z_impl_k_sem_take+0x2c>
		sem->count--;
    2a76:	3b01      	subs	r3, #1
    2a78:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    2a7a:	f381 8811 	msr	BASEPRI, r1
    2a7e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2a82:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    2a84:	b003      	add	sp, #12
    2a86:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2a88:	ea54 0305 	orrs.w	r3, r4, r5
    2a8c:	d106      	bne.n	2a9c <z_impl_k_sem_take+0x40>
    2a8e:	f381 8811 	msr	BASEPRI, r1
    2a92:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2a96:	f06f 000f 	mvn.w	r0, #15
    2a9a:	e7f3      	b.n	2a84 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2a9c:	4602      	mov	r2, r0
    2a9e:	e9cd 4500 	strd	r4, r5, [sp]
    2aa2:	4802      	ldr	r0, [pc, #8]	; (2aac <z_impl_k_sem_take+0x50>)
    2aa4:	f7ff ff26 	bl	28f4 <z_pend_curr>
	return ret;
    2aa8:	e7ec      	b.n	2a84 <z_impl_k_sem_take+0x28>
    2aaa:	bf00      	nop
    2aac:	200008bc 	.word	0x200008bc

00002ab0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, uint32_t options, const char *name)
{
    2ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab2:	b087      	sub	sp, #28
    2ab4:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
    2ab8:	f100 0530 	add.w	r5, r0, #48	; 0x30
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2abc:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
    2ac0:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2ac2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    2ac4:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    2ac6:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
    2aca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2acc:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (uint8_t)initial_state;
    2ace:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2ad0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (uint8_t)initial_state;
    2ad2:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
    2ad4:	2500      	movs	r5, #0
	node->prev = NULL;
    2ad6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (uint8_t)options;
    2ada:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
    2adc:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2ade:	9600      	str	r6, [sp, #0]
{
    2ae0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2ae2:	f7fe fba9 	bl	1238 <arch_new_thread>
	if (!_current) {
    2ae6:	4b04      	ldr	r3, [pc, #16]	; (2af8 <z_setup_new_thread+0x48>)
    2ae8:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    2aea:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    2aee:	b103      	cbz	r3, 2af2 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    2af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2af2:	6723      	str	r3, [r4, #112]	; 0x70
}
    2af4:	b007      	add	sp, #28
    2af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2af8:	20000444 	.word	0x20000444

00002afc <z_init_static_threads>:
{
    2afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2b00:	4e2a      	ldr	r6, [pc, #168]	; (2bac <z_init_static_threads+0xb0>)
    2b02:	4d2b      	ldr	r5, [pc, #172]	; (2bb0 <z_init_static_threads+0xb4>)
{
    2b04:	b086      	sub	sp, #24
    2b06:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    2b08:	42b5      	cmp	r5, r6
    2b0a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2b0e:	d310      	bcc.n	2b32 <z_init_static_threads+0x36>
	k_sched_lock();
    2b10:	f7ff fcba 	bl	2488 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2b14:	4c26      	ldr	r4, [pc, #152]	; (2bb0 <z_init_static_threads+0xb4>)
    2b16:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2bb4 <z_init_static_threads+0xb8>
    2b1a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2b1e:	f240 36e7 	movw	r6, #999	; 0x3e7
    2b22:	2700      	movs	r7, #0
    2b24:	4544      	cmp	r4, r8
    2b26:	d321      	bcc.n	2b6c <z_init_static_threads+0x70>
}
    2b28:	b006      	add	sp, #24
    2b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    2b2e:	f7ff bcf9 	b.w	2524 <k_sched_unlock>
		z_setup_new_thread(
    2b32:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2b36:	9305      	str	r3, [sp, #20]
    2b38:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2b3c:	9304      	str	r3, [sp, #16]
    2b3e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2b42:	9303      	str	r3, [sp, #12]
    2b44:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2b48:	9302      	str	r3, [sp, #8]
    2b4a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2b4e:	9301      	str	r3, [sp, #4]
    2b50:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2b54:	9300      	str	r3, [sp, #0]
    2b56:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2b5a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2b5e:	f7ff ffa7 	bl	2ab0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2b62:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2b66:	65dd      	str	r5, [r3, #92]	; 0x5c
    2b68:	4625      	mov	r5, r4
    2b6a:	e7cd      	b.n	2b08 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2b6e:	1c5a      	adds	r2, r3, #1
    2b70:	d00d      	beq.n	2b8e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    2b72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2b76:	4630      	mov	r0, r6
    2b78:	4639      	mov	r1, r7
    2b7a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2b7e:	42b9      	cmp	r1, r7
    2b80:	bf08      	it	eq
    2b82:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    2b84:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2b86:	d104      	bne.n	2b92 <z_init_static_threads+0x96>
	z_sched_start(thread);
    2b88:	4628      	mov	r0, r5
    2b8a:	f7ff fd1b 	bl	25c4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2b8e:	3430      	adds	r4, #48	; 0x30
    2b90:	e7c8      	b.n	2b24 <z_init_static_threads+0x28>
    2b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2b96:	2300      	movs	r3, #0
    2b98:	f7fd faa0 	bl	dc <__aeabi_uldivmod>
    2b9c:	4602      	mov	r2, r0
    2b9e:	460b      	mov	r3, r1
    2ba0:	f105 0018 	add.w	r0, r5, #24
    2ba4:	4651      	mov	r1, sl
    2ba6:	f000 f845 	bl	2c34 <z_add_timeout>
    2baa:	e7f0      	b.n	2b8e <z_init_static_threads+0x92>
    2bac:	200001cc 	.word	0x200001cc
    2bb0:	200001cc 	.word	0x200001cc
    2bb4:	00003623 	.word	0x00003623

00002bb8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2bb8:	4b03      	ldr	r3, [pc, #12]	; (2bc8 <elapsed+0x10>)
    2bba:	681b      	ldr	r3, [r3, #0]
    2bbc:	b90b      	cbnz	r3, 2bc2 <elapsed+0xa>
    2bbe:	f7fe ba7b 	b.w	10b8 <z_clock_elapsed>
}
    2bc2:	2000      	movs	r0, #0
    2bc4:	4770      	bx	lr
    2bc6:	bf00      	nop
    2bc8:	20000480 	.word	0x20000480

00002bcc <remove_timeout>:
{
    2bcc:	b530      	push	{r4, r5, lr}
    2bce:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2bd0:	b168      	cbz	r0, 2bee <remove_timeout+0x22>
    2bd2:	4a0a      	ldr	r2, [pc, #40]	; (2bfc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    2bd4:	6852      	ldr	r2, [r2, #4]
    2bd6:	4290      	cmp	r0, r2
    2bd8:	d009      	beq.n	2bee <remove_timeout+0x22>
	if (next(t) != NULL) {
    2bda:	b143      	cbz	r3, 2bee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    2bdc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    2be0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    2be4:	1912      	adds	r2, r2, r4
    2be6:	eb45 0101 	adc.w	r1, r5, r1
    2bea:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    2bee:	6842      	ldr	r2, [r0, #4]
    2bf0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2bf2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2bf4:	2300      	movs	r3, #0
	node->prev = NULL;
    2bf6:	e9c0 3300 	strd	r3, r3, [r0]
}
    2bfa:	bd30      	pop	{r4, r5, pc}
    2bfc:	2000015c 	.word	0x2000015c

00002c00 <next_timeout>:
	return list->head == list;
    2c00:	4b0a      	ldr	r3, [pc, #40]	; (2c2c <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
    2c02:	b510      	push	{r4, lr}
    2c04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c06:	429c      	cmp	r4, r3
    2c08:	bf08      	it	eq
    2c0a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    2c0c:	f7ff ffd4 	bl	2bb8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2c10:	b144      	cbz	r4, 2c24 <next_timeout+0x24>
    2c12:	6923      	ldr	r3, [r4, #16]
    2c14:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2c16:	4b06      	ldr	r3, [pc, #24]	; (2c30 <next_timeout+0x30>)
    2c18:	691b      	ldr	r3, [r3, #16]
    2c1a:	b113      	cbz	r3, 2c22 <next_timeout+0x22>
    2c1c:	4298      	cmp	r0, r3
    2c1e:	bfa8      	it	ge
    2c20:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2c22:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2c24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2c28:	e7f5      	b.n	2c16 <next_timeout+0x16>
    2c2a:	bf00      	nop
    2c2c:	2000015c 	.word	0x2000015c
    2c30:	20000444 	.word	0x20000444

00002c34 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c38:	9101      	str	r1, [sp, #4]
    2c3a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2c3c:	1c4b      	adds	r3, r1, #1
    2c3e:	bf08      	it	eq
    2c40:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    2c44:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2c46:	d06c      	beq.n	2d22 <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    2c48:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2c4a:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    2c4e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2c52:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    2c56:	ebb3 0804 	subs.w	r8, r3, r4
    2c5a:	eb6b 0905 	sbc.w	r9, fp, r5
    2c5e:	f1b8 0f00 	cmp.w	r8, #0
    2c62:	f179 0300 	sbcs.w	r3, r9, #0
    2c66:	db0f      	blt.n	2c88 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    2c68:	f7ff ffa6 	bl	2bb8 <elapsed>
    2c6c:	4a33      	ldr	r2, [pc, #204]	; (2d3c <z_add_timeout+0x108>)
    2c6e:	e9d2 1c00 	ldrd	r1, ip, [r2]
    2c72:	f06f 0301 	mvn.w	r3, #1
    2c76:	1a5b      	subs	r3, r3, r1
    2c78:	eb6b 020c 	sbc.w	r2, fp, ip
    2c7c:	1b1e      	subs	r6, r3, r4
    2c7e:	eb62 0705 	sbc.w	r7, r2, r5
    2c82:	1a34      	subs	r4, r6, r0
    2c84:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
    2c8e:	f04f 0320 	mov.w	r3, #32
    2c92:	f3ef 8611 	mrs	r6, BASEPRI
    2c96:	f383 8811 	msr	BASEPRI, r3
    2c9a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2c9e:	f7ff ff8b 	bl	2bb8 <elapsed>
	ticks = MAX(1, ticks);
    2ca2:	2c01      	cmp	r4, #1
    2ca4:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    2ca8:	4b25      	ldr	r3, [pc, #148]	; (2d40 <z_add_timeout+0x10c>)
    2caa:	bfb8      	it	lt
    2cac:	2401      	movlt	r4, #1
    2cae:	681a      	ldr	r2, [r3, #0]
    2cb0:	bfb8      	it	lt
    2cb2:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    2cb4:	1824      	adds	r4, r4, r0
    2cb6:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2cba:	429a      	cmp	r2, r3
    2cbc:	e9ca 4504 	strd	r4, r5, [sl, #16]
    2cc0:	d001      	beq.n	2cc6 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2cc2:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2cc4:	b952      	cbnz	r2, 2cdc <z_add_timeout+0xa8>
	node->prev = list->tail;
    2cc6:	685a      	ldr	r2, [r3, #4]
    2cc8:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    2ccc:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2cce:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    2cd2:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    2cd6:	f8c3 a004 	str.w	sl, [r3, #4]
}
    2cda:	e014      	b.n	2d06 <z_add_timeout+0xd2>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2cdc:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    2ce0:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    2ce4:	454d      	cmp	r5, r9
    2ce6:	bf08      	it	eq
    2ce8:	4544      	cmpeq	r4, r8
    2cea:	d21d      	bcs.n	2d28 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
    2cec:	ebb8 0004 	subs.w	r0, r8, r4
    2cf0:	eb69 0105 	sbc.w	r1, r9, r5
    2cf4:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    2cf8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2cfa:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    2cfe:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    2d02:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    2d06:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d08:	429a      	cmp	r2, r3
    2d0a:	d006      	beq.n	2d1a <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2d0c:	4592      	cmp	sl, r2
    2d0e:	d104      	bne.n	2d1a <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
    2d10:	f7ff ff76 	bl	2c00 <next_timeout>
    2d14:	2100      	movs	r1, #0
    2d16:	f7fe f971 	bl	ffc <z_clock_set_timeout>
	__asm__ volatile(
    2d1a:	f386 8811 	msr	BASEPRI, r6
    2d1e:	f3bf 8f6f 	isb	sy
		}
	}
}
    2d22:	b003      	add	sp, #12
    2d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    2d28:	ebb4 0008 	subs.w	r0, r4, r8
    2d2c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    2d30:	42ba      	cmp	r2, r7
    2d32:	e9ca 0104 	strd	r0, r1, [sl, #16]
    2d36:	d0c6      	beq.n	2cc6 <z_add_timeout+0x92>
    2d38:	6812      	ldr	r2, [r2, #0]
    2d3a:	e7c3      	b.n	2cc4 <z_add_timeout+0x90>
    2d3c:	200002f8 	.word	0x200002f8
    2d40:	2000015c 	.word	0x2000015c

00002d44 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    2d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d48:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2d4a:	f7ff fc9f 	bl	268c <z_time_slice>
	__asm__ volatile(
    2d4e:	f04f 0320 	mov.w	r3, #32
    2d52:	f3ef 8411 	mrs	r4, BASEPRI
    2d56:	f383 8811 	msr	BASEPRI, r3
    2d5a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2d5e:	4d2d      	ldr	r5, [pc, #180]	; (2e14 <z_clock_announce+0xd0>)
    2d60:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2e18 <z_clock_announce+0xd4>
	return list->head == list;
    2d64:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 2e1c <z_clock_announce+0xd8>
    2d68:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2d6a:	4651      	mov	r1, sl
    2d6c:	f8d5 c000 	ldr.w	ip, [r5]
    2d70:	f8db 0000 	ldr.w	r0, [fp]
    2d74:	4662      	mov	r2, ip
    2d76:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d78:	4558      	cmp	r0, fp
    2d7a:	e9cd 2300 	strd	r2, r3, [sp]
    2d7e:	e9da 8900 	ldrd	r8, r9, [sl]
    2d82:	d00e      	beq.n	2da2 <z_clock_announce+0x5e>
    2d84:	b168      	cbz	r0, 2da2 <z_clock_announce+0x5e>
    2d86:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    2d8a:	42bb      	cmp	r3, r7
    2d8c:	bf08      	it	eq
    2d8e:	45b4      	cmpeq	ip, r6
    2d90:	d21e      	bcs.n	2dd0 <z_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2d92:	9b00      	ldr	r3, [sp, #0]
    2d94:	ebb6 0c03 	subs.w	ip, r6, r3
    2d98:	9b01      	ldr	r3, [sp, #4]
    2d9a:	eb67 0603 	sbc.w	r6, r7, r3
    2d9e:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    2da2:	9b00      	ldr	r3, [sp, #0]
    2da4:	eb13 0208 	adds.w	r2, r3, r8
    2da8:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    2daa:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    2dae:	eb43 0309 	adc.w	r3, r3, r9
    2db2:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    2db6:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    2db8:	f7ff ff22 	bl	2c00 <next_timeout>
    2dbc:	4631      	mov	r1, r6
    2dbe:	f7fe f91d 	bl	ffc <z_clock_set_timeout>
	__asm__ volatile(
    2dc2:	f384 8811 	msr	BASEPRI, r4
    2dc6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2dca:	b003      	add	sp, #12
    2dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    2dd0:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    2dd4:	f04f 0200 	mov.w	r2, #0
    2dd8:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    2ddc:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    2de0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    2de4:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    2de8:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    2dec:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    2dee:	f7ff feed 	bl	2bcc <remove_timeout>
    2df2:	f384 8811 	msr	BASEPRI, r4
    2df6:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2dfa:	6883      	ldr	r3, [r0, #8]
    2dfc:	4798      	blx	r3
	__asm__ volatile(
    2dfe:	f04f 0320 	mov.w	r3, #32
    2e02:	f3ef 8411 	mrs	r4, BASEPRI
    2e06:	f383 8811 	msr	BASEPRI, r3
    2e0a:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    2e0e:	4902      	ldr	r1, [pc, #8]	; (2e18 <z_clock_announce+0xd4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2e10:	e7ac      	b.n	2d6c <z_clock_announce+0x28>
    2e12:	bf00      	nop
    2e14:	20000480 	.word	0x20000480
    2e18:	200002f8 	.word	0x200002f8
    2e1c:	2000015c 	.word	0x2000015c

00002e20 <z_tick_get>:

int64_t z_tick_get(void)
{
    2e20:	b510      	push	{r4, lr}
    2e22:	f04f 0320 	mov.w	r3, #32
    2e26:	f3ef 8411 	mrs	r4, BASEPRI
    2e2a:	f383 8811 	msr	BASEPRI, r3
    2e2e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    2e32:	f7fe f941 	bl	10b8 <z_clock_elapsed>
    2e36:	4b06      	ldr	r3, [pc, #24]	; (2e50 <z_tick_get+0x30>)
    2e38:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e3c:	1812      	adds	r2, r2, r0
    2e3e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    2e42:	f384 8811 	msr	BASEPRI, r4
    2e46:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2e4a:	4610      	mov	r0, r2
    2e4c:	4619      	mov	r1, r3
    2e4e:	bd10      	pop	{r4, pc}
    2e50:	200002f8 	.word	0x200002f8

00002e54 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    2e54:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2e56:	4c06      	ldr	r4, [pc, #24]	; (2e70 <statics_init+0x1c>)
    2e58:	4d06      	ldr	r5, [pc, #24]	; (2e74 <statics_init+0x20>)
    2e5a:	42ac      	cmp	r4, r5
    2e5c:	d301      	bcc.n	2e62 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    2e5e:	2000      	movs	r0, #0
    2e60:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    2e62:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    2e66:	4620      	mov	r0, r4
    2e68:	f000 fcba 	bl	37e0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2e6c:	3414      	adds	r4, #20
    2e6e:	e7f4      	b.n	2e5a <statics_init+0x6>
    2e70:	200001cc 	.word	0x200001cc
    2e74:	200001cc 	.word	0x200001cc

00002e78 <disable_ds_1>:
{
    2e78:	b508      	push	{r3, lr}
	sys_pm_ctrl_disable_state(SYS_POWER_STATE_DEEP_SLEEP_1);
    2e7a:	2000      	movs	r0, #0
    2e7c:	f7fd fe88 	bl	b90 <sys_pm_ctrl_disable_state>
}
    2e80:	2000      	movs	r0, #0
    2e82:	bd08      	pop	{r3, pc}

00002e84 <device_set_power_state.constprop.0>:
 * @param arg Caller passed argument to callback function
 *
 * @retval 0 If successful in queuing the request or changing the state.
 * @retval Errno Negative errno code if failure. Callback will not be called.
 */
static inline int device_set_power_state(struct device *device,
    2e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
					 uint32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	return device->device_pm_control(device,
    2e86:	2300      	movs	r3, #0
    2e88:	9300      	str	r3, [sp, #0]
static inline int device_set_power_state(struct device *device,
    2e8a:	9103      	str	r1, [sp, #12]
	return device->device_pm_control(device,
    2e8c:	6904      	ldr	r4, [r0, #16]
    2e8e:	aa03      	add	r2, sp, #12
    2e90:	2101      	movs	r1, #1
    2e92:	47a0      	blx	r4
					 DEVICE_PM_SET_POWER_STATE,
					 &device_power_state, cb, arg);
}
    2e94:	b004      	add	sp, #16
    2e96:	bd10      	pop	{r4, pc}

00002e98 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    2e98:	4603      	mov	r3, r0
    2e9a:	b158      	cbz	r0, 2eb4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2e9c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    2e9e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    2ea2:	2a01      	cmp	r2, #1
    2ea4:	d003      	beq.n	2eae <sys_notify_validate+0x16>
    2ea6:	2a03      	cmp	r2, #3
    2ea8:	d104      	bne.n	2eb4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    2eaa:	6802      	ldr	r2, [r0, #0]
    2eac:	b112      	cbz	r2, 2eb4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    2eae:	2000      	movs	r0, #0
    2eb0:	6098      	str	r0, [r3, #8]
    2eb2:	4770      	bx	lr
		return -EINVAL;
    2eb4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    2eb8:	4770      	bx	lr

00002eba <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2eba:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    2ebc:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    2ebe:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    2ec2:	2a03      	cmp	r2, #3
    2ec4:	f04f 0200 	mov.w	r2, #0
{
    2ec8:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    2eca:	bf0c      	ite	eq
    2ecc:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    2ece:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    2ed0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    2ed2:	4770      	bx	lr

00002ed4 <arch_printk_char_out>:
}
    2ed4:	2000      	movs	r0, #0
    2ed6:	4770      	bx	lr

00002ed8 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    2ed8:	b40f      	push	{r0, r1, r2, r3}
    2eda:	b507      	push	{r0, r1, r2, lr}
    2edc:	a904      	add	r1, sp, #16
    2ede:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    2ee2:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    2ee4:	f7fd fc54 	bl	790 <vprintk>
	}
	va_end(ap);
}
    2ee8:	b003      	add	sp, #12
    2eea:	f85d eb04 	ldr.w	lr, [sp], #4
    2eee:	b004      	add	sp, #16
    2ef0:	4770      	bx	lr

00002ef2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2ef2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    2ef4:	f013 0307 	ands.w	r3, r3, #7
    2ef8:	d105      	bne.n	2f06 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    2efa:	6803      	ldr	r3, [r0, #0]
    2efc:	2b00      	cmp	r3, #0
		evt = EVT_START;
    2efe:	bf0c      	ite	eq
    2f00:	2000      	moveq	r0, #0
    2f02:	2003      	movne	r0, #3
    2f04:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    2f06:	2b02      	cmp	r3, #2
    2f08:	d105      	bne.n	2f16 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
    2f0a:	8b43      	ldrh	r3, [r0, #26]
    2f0c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    2f0e:	bf14      	ite	ne
    2f10:	2000      	movne	r0, #0
    2f12:	2004      	moveq	r0, #4
    2f14:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    2f16:	2b01      	cmp	r3, #1
    2f18:	d105      	bne.n	2f26 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    2f1a:	6803      	ldr	r3, [r0, #0]
    2f1c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    2f1e:	bf0c      	ite	eq
    2f20:	2000      	moveq	r0, #0
    2f22:	2005      	movne	r0, #5
    2f24:	4770      	bx	lr
	int evt = EVT_NOP;
    2f26:	2000      	movs	r0, #0
}
    2f28:	4770      	bx	lr

00002f2a <validate_args>:
{
    2f2a:	b510      	push	{r4, lr}
    2f2c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    2f2e:	b140      	cbz	r0, 2f42 <validate_args+0x18>
    2f30:	b139      	cbz	r1, 2f42 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    2f32:	1d08      	adds	r0, r1, #4
    2f34:	f7ff ffb0 	bl	2e98 <sys_notify_validate>
	if ((rv == 0)
    2f38:	b928      	cbnz	r0, 2f46 <validate_args+0x1c>
	    && ((cli->notify.flags
    2f3a:	68a3      	ldr	r3, [r4, #8]
    2f3c:	f033 0303 	bics.w	r3, r3, #3
    2f40:	d001      	beq.n	2f46 <validate_args+0x1c>
		rv = -EINVAL;
    2f42:	f06f 0015 	mvn.w	r0, #21
}
    2f46:	bd10      	pop	{r4, pc}

00002f48 <transition_complete>:
{
    2f48:	b410      	push	{r4}
	__asm__ volatile(
    2f4a:	f04f 0420 	mov.w	r4, #32
    2f4e:	f3ef 8211 	mrs	r2, BASEPRI
    2f52:	f384 8811 	msr	BASEPRI, r4
    2f56:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    2f5a:	6141      	str	r1, [r0, #20]
}
    2f5c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    2f5e:	2101      	movs	r1, #1
    2f60:	f7fd bc24 	b.w	7ac <process_event>

00002f64 <onoff_manager_init>:
{
    2f64:	b538      	push	{r3, r4, r5, lr}
    2f66:	460c      	mov	r4, r1
	if ((mgr == NULL)
    2f68:	4605      	mov	r5, r0
    2f6a:	b158      	cbz	r0, 2f84 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    2f6c:	b151      	cbz	r1, 2f84 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    2f6e:	680b      	ldr	r3, [r1, #0]
    2f70:	b143      	cbz	r3, 2f84 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    2f72:	684b      	ldr	r3, [r1, #4]
    2f74:	b133      	cbz	r3, 2f84 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    2f76:	221c      	movs	r2, #28
    2f78:	2100      	movs	r1, #0
    2f7a:	f000 fa56 	bl	342a <memset>
    2f7e:	612c      	str	r4, [r5, #16]
	return 0;
    2f80:	2000      	movs	r0, #0
}
    2f82:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    2f84:	f06f 0015 	mvn.w	r0, #21
    2f88:	e7fb      	b.n	2f82 <onoff_manager_init+0x1e>

00002f8a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f8e:	4604      	mov	r4, r0
    2f90:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2f92:	f7ff ffca 	bl	2f2a <validate_args>

	if (rv < 0) {
    2f96:	1e06      	subs	r6, r0, #0
    2f98:	db36      	blt.n	3008 <onoff_request+0x7e>
    2f9a:	f04f 0320 	mov.w	r3, #32
    2f9e:	f3ef 8211 	mrs	r2, BASEPRI
    2fa2:	f383 8811 	msr	BASEPRI, r3
    2fa6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    2faa:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2fac:	8b21      	ldrh	r1, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    2fae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2fb2:	4283      	cmp	r3, r0
    2fb4:	f001 0707 	and.w	r7, r1, #7
    2fb8:	d034      	beq.n	3024 <onoff_request+0x9a>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    2fba:	2f02      	cmp	r7, #2
    2fbc:	d114      	bne.n	2fe8 <onoff_request+0x5e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    2fbe:	3301      	adds	r3, #1
    2fc0:	8363      	strh	r3, [r4, #26]
	rv = state;
    2fc2:	463e      	mov	r6, r7
		notify = true;
    2fc4:	2301      	movs	r3, #1
	__asm__ volatile(
    2fc6:	f382 8811 	msr	BASEPRI, r2
    2fca:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    2fce:	b1db      	cbz	r3, 3008 <onoff_request+0x7e>
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    2fd0:	2100      	movs	r1, #0
    2fd2:	1d28      	adds	r0, r5, #4
    2fd4:	f7ff ff71 	bl	2eba <sys_notify_finalize>
	if (cb) {
    2fd8:	4680      	mov	r8, r0
    2fda:	b1a8      	cbz	r0, 3008 <onoff_request+0x7e>
		cb(mgr, cli, state, res);
    2fdc:	2300      	movs	r3, #0
    2fde:	463a      	mov	r2, r7
    2fe0:	4629      	mov	r1, r5
    2fe2:	4620      	mov	r0, r4
    2fe4:	47c0      	blx	r8
    2fe6:	e00f      	b.n	3008 <onoff_request+0x7e>
	} else if ((state == ONOFF_STATE_OFF)
    2fe8:	078b      	lsls	r3, r1, #30
    2fea:	d001      	beq.n	2ff0 <onoff_request+0x66>
		   || (state == ONOFF_STATE_TO_ON)) {
    2fec:	2f06      	cmp	r7, #6
    2fee:	d10e      	bne.n	300e <onoff_request+0x84>
	parent->next = child;
    2ff0:	2300      	movs	r3, #0
    2ff2:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    2ff4:	6863      	ldr	r3, [r4, #4]
    2ff6:	b993      	cbnz	r3, 301e <onoff_request+0x94>
	list->head = node;
    2ff8:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
    2ffc:	463e      	mov	r6, r7
    2ffe:	b967      	cbnz	r7, 301a <onoff_request+0x90>
		process_event(mgr, EVT_RECHECK, key);
    3000:	2102      	movs	r1, #2
    3002:	4620      	mov	r0, r4
    3004:	f7fd fbd2 	bl	7ac <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    3008:	4630      	mov	r0, r6
    300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rv = -EIO;
    300e:	2f05      	cmp	r7, #5
    3010:	bf0c      	ite	eq
    3012:	f06f 0622 	mvneq.w	r6, #34	; 0x22
    3016:	f06f 0604 	mvnne.w	r6, #4
    301a:	2300      	movs	r3, #0
    301c:	e7d3      	b.n	2fc6 <onoff_request+0x3c>
	parent->next = child;
    301e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    3020:	6065      	str	r5, [r4, #4]
}
    3022:	e7eb      	b.n	2ffc <onoff_request+0x72>
		rv = -EAGAIN;
    3024:	f06f 060a 	mvn.w	r6, #10
    3028:	e7f7      	b.n	301a <onoff_request+0x90>

0000302a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    302a:	4604      	mov	r4, r0
    302c:	b508      	push	{r3, lr}
    302e:	4608      	mov	r0, r1
    3030:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3032:	461a      	mov	r2, r3
    3034:	47a0      	blx	r4
	return z_impl_k_current_get();
    3036:	f7ff fceb 	bl	2a10 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    303a:	f7fe fa91 	bl	1560 <z_impl_k_thread_abort>

0000303e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    303e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    3040:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    3044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    3048:	bf2c      	ite	cs
    304a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    304e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    3052:	4770      	bx	lr

00003054 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    3054:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    3058:	6880      	ldr	r0, [r0, #8]
    305a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    305e:	bf2c      	ite	cs
    3060:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    3064:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    3068:	4770      	bx	lr

0000306a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    306a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    306c:	2201      	movs	r2, #1
    306e:	f7ff ffe6 	bl	303e <chunk_field>
}
    3072:	0840      	lsrs	r0, r0, #1
    3074:	bd08      	pop	{r3, pc}

00003076 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    3076:	6883      	ldr	r3, [r0, #8]
    3078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    307c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    3080:	d308      	bcc.n	3094 <set_chunk_used+0x1e>
		if (used) {
    3082:	684b      	ldr	r3, [r1, #4]
    3084:	b11a      	cbz	r2, 308e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    3086:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    308a:	604b      	str	r3, [r1, #4]
    308c:	4770      	bx	lr
    308e:	f023 0301 	bic.w	r3, r3, #1
    3092:	e7fa      	b.n	308a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    3094:	884b      	ldrh	r3, [r1, #2]
    3096:	b11a      	cbz	r2, 30a0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    3098:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    309c:	804b      	strh	r3, [r1, #2]
		}
	}
}
    309e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    30a0:	f023 0301 	bic.w	r3, r3, #1
    30a4:	e7fa      	b.n	309c <set_chunk_used+0x26>

000030a6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    30a6:	0053      	lsls	r3, r2, #1
    30a8:	2201      	movs	r2, #1
    30aa:	f7ff bfd3 	b.w	3054 <chunk_set>

000030ae <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    30ae:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    30b0:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    30b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    30b6:	bf2c      	ite	cs
    30b8:	2002      	movcs	r0, #2
    30ba:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    30bc:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    30be:	fab0 f080 	clz	r0, r0
}
    30c2:	f1c0 001f 	rsb	r0, r0, #31
    30c6:	4770      	bx	lr

000030c8 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    30c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30cc:	4604      	mov	r4, r0
    30ce:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
    30d0:	f7ff ffcb 	bl	306a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
    30d4:	68a3      	ldr	r3, [r4, #8]
    30d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    30da:	4601      	mov	r1, r0
    30dc:	d301      	bcc.n	30e2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    30de:	2801      	cmp	r0, #1
    30e0:	d035      	beq.n	314e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    30e2:	4620      	mov	r0, r4
    30e4:	f7ff ffe3 	bl	30ae <bucket_idx>
	if (b->next == 0) {
    30e8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    30ec:	6916      	ldr	r6, [r2, #16]
    30ee:	b99e      	cbnz	r6, 3118 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    30f0:	2301      	movs	r3, #1
    30f2:	fa03 f000 	lsl.w	r0, r3, r0
    30f6:	68e3      	ldr	r3, [r4, #12]
    30f8:	4303      	orrs	r3, r0
    30fa:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    30fc:	4629      	mov	r1, r5
		b->next = c;
    30fe:	6115      	str	r5, [r2, #16]
    3100:	462b      	mov	r3, r5
    3102:	2202      	movs	r2, #2
    3104:	4620      	mov	r0, r4
    3106:	f7ff ffa5 	bl	3054 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    310a:	2203      	movs	r2, #3
    310c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    310e:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    3110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3114:	f7ff bf9e 	b.w	3054 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    3118:	2202      	movs	r2, #2
    311a:	4631      	mov	r1, r6
    311c:	4620      	mov	r0, r4
    311e:	f7ff ff8e 	bl	303e <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    3122:	2202      	movs	r2, #2
    3124:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    3126:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    3128:	4629      	mov	r1, r5
    312a:	4620      	mov	r0, r4
    312c:	f7ff ff92 	bl	3054 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    3130:	4633      	mov	r3, r6
    3132:	2203      	movs	r2, #3
    3134:	4629      	mov	r1, r5
    3136:	4620      	mov	r0, r4
    3138:	f7ff ff8c 	bl	3054 <chunk_set>
    313c:	2203      	movs	r2, #3
    313e:	4639      	mov	r1, r7
    3140:	462b      	mov	r3, r5
    3142:	4620      	mov	r0, r4
    3144:	f7ff ff86 	bl	3054 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    3148:	2202      	movs	r2, #2
    314a:	4631      	mov	r1, r6
    314c:	e7df      	b.n	310e <free_list_add+0x46>
    314e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003152 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    3152:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3158:	bf2c      	ite	cs
    315a:	2508      	movcs	r5, #8
    315c:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    315e:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3160:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    3162:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3164:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    3168:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    316c:	2200      	movs	r2, #0
    316e:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3170:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    3172:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3174:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    3176:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    317a:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    317c:	4629      	mov	r1, r5
	h->len = buf_sz;
    317e:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    3180:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    3182:	4620      	mov	r0, r4
    3184:	f7ff ff93 	bl	30ae <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    3188:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    318a:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    318c:	1c41      	adds	r1, r0, #1
    318e:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    3190:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    3194:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    3196:	428b      	cmp	r3, r1
    3198:	db29      	blt.n	31ee <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    319a:	4632      	mov	r2, r6
    319c:	4620      	mov	r0, r4
    319e:	2100      	movs	r1, #0
    31a0:	f7ff ff81 	bl	30a6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    31a4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    31a6:	4620      	mov	r0, r4
    31a8:	2201      	movs	r2, #1
    31aa:	2100      	movs	r1, #0
    31ac:	f7ff ff63 	bl	3076 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    31b0:	463a      	mov	r2, r7
    31b2:	4631      	mov	r1, r6
    31b4:	f7ff ff77 	bl	30a6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    31b8:	4633      	mov	r3, r6
    31ba:	4631      	mov	r1, r6
    31bc:	4620      	mov	r0, r4
    31be:	2200      	movs	r2, #0
    31c0:	f7ff ff48 	bl	3054 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    31c4:	4629      	mov	r1, r5
    31c6:	4620      	mov	r0, r4
    31c8:	2200      	movs	r2, #0
    31ca:	f7ff ff6c 	bl	30a6 <set_chunk_size>
    31ce:	463b      	mov	r3, r7
    31d0:	4629      	mov	r1, r5
    31d2:	4620      	mov	r0, r4
    31d4:	2200      	movs	r2, #0
    31d6:	f7ff ff3d 	bl	3054 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    31da:	4629      	mov	r1, r5
    31dc:	4620      	mov	r0, r4
    31de:	2201      	movs	r2, #1
    31e0:	f7ff ff49 	bl	3076 <set_chunk_used>

	free_list_add(h, chunk0_size);
    31e4:	4631      	mov	r1, r6
}
    31e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    31ea:	f7ff bf6d 	b.w	30c8 <free_list_add>
		h->buckets[i].next = 0;
    31ee:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    31f2:	3301      	adds	r3, #1
    31f4:	e7cf      	b.n	3196 <sys_heap_init+0x44>

000031f6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    31f6:	4770      	bx	lr

000031f8 <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(struct device *dev)
{
    31f8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
    31fa:	f7fd fc85 	bl	b08 <sys_pm_create_device_list>
	return 0;
}
    31fe:	2000      	movs	r0, #0
    3200:	bd08      	pop	{r3, pc}

00003202 <sys_pm_notify_power_state_entry>:
}
    3202:	4770      	bx	lr

00003204 <sys_pm_notify_power_state_exit>:
    3204:	4770      	bx	lr

00003206 <sys_pm_suspend_devices>:
	return _sys_pm_devices(DEVICE_PM_SUSPEND_STATE);
    3206:	2003      	movs	r0, #3
    3208:	f7fd bc1c 	b.w	a44 <_sys_pm_devices>

0000320c <sys_pm_low_power_devices>:
	return _sys_pm_devices(DEVICE_PM_LOW_POWER_STATE);
    320c:	2002      	movs	r0, #2
    320e:	f7fd bc19 	b.w	a44 <_sys_pm_devices>

00003212 <sys_pm_policy_next_state>:

enum power_states sys_pm_policy_next_state(int32_t ticks)
{
	int i;

	if ((ticks != K_TICKS_FOREVER) && (ticks < pm_min_residency[0])) {
    3212:	f5b0 1ff0 	cmp.w	r0, #1966080	; 0x1e0000
{
    3216:	b508      	push	{r3, lr}
	if ((ticks != K_TICKS_FOREVER) && (ticks < pm_min_residency[0])) {
    3218:	d202      	bcs.n	3220 <sys_pm_policy_next_state+0xe>
		LOG_DBG("Not enough time for PM operations: %d", ticks);
		return SYS_POWER_STATE_ACTIVE;
    321a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
	}

	LOG_DBG("No suitable power state found!");
	return SYS_POWER_STATE_ACTIVE;
}
    321e:	bd08      	pop	{r3, pc}
		if (!sys_pm_ctrl_is_state_enabled((enum power_states)(i))) {
    3220:	2000      	movs	r0, #0
    3222:	f7fd fcc7 	bl	bb4 <sys_pm_ctrl_is_state_enabled>
    3226:	2800      	cmp	r0, #0
    3228:	d0f7      	beq.n	321a <sys_pm_policy_next_state+0x8>
    322a:	2000      	movs	r0, #0
    322c:	e7f7      	b.n	321e <sys_pm_policy_next_state+0xc>

0000322e <sys_pm_policy_low_power_devices>:

__weak bool sys_pm_policy_low_power_devices(enum power_states pm_state)
{
	return sys_pm_is_sleep_state(pm_state);
}
    322e:	2000      	movs	r0, #0
    3230:	4770      	bx	lr

00003232 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3232:	68c2      	ldr	r2, [r0, #12]
    3234:	b2cb      	uxtb	r3, r1
    3236:	210c      	movs	r1, #12
    3238:	fb03 2101 	mla	r1, r3, r1, r2
    323c:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    323e:	f000 0007 	and.w	r0, r0, #7
    3242:	4770      	bx	lr

00003244 <set_off_state>:
	__asm__ volatile(
    3244:	f04f 0320 	mov.w	r3, #32
    3248:	f3ef 8211 	mrs	r2, BASEPRI
    324c:	f383 8811 	msr	BASEPRI, r3
    3250:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3254:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3256:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    325a:	d001      	beq.n	3260 <set_off_state+0x1c>
    325c:	428b      	cmp	r3, r1
    325e:	d107      	bne.n	3270 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3260:	2301      	movs	r3, #1
    3262:	6003      	str	r3, [r0, #0]
	int err = 0;
    3264:	2000      	movs	r0, #0
	__asm__ volatile(
    3266:	f382 8811 	msr	BASEPRI, r2
    326a:	f3bf 8f6f 	isb	sy
}
    326e:	4770      	bx	lr
		err = -EPERM;
    3270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3274:	e7f7      	b.n	3266 <set_off_state+0x22>

00003276 <set_starting_state>:
{
    3276:	b510      	push	{r4, lr}
	__asm__ volatile(
    3278:	f04f 0320 	mov.w	r3, #32
    327c:	f3ef 8211 	mrs	r2, BASEPRI
    3280:	f383 8811 	msr	BASEPRI, r3
    3284:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3288:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    328a:	f003 0407 	and.w	r4, r3, #7
    328e:	2c01      	cmp	r4, #1
    3290:	d106      	bne.n	32a0 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    3292:	6001      	str	r1, [r0, #0]
	int err = 0;
    3294:	2000      	movs	r0, #0
	__asm__ volatile(
    3296:	f382 8811 	msr	BASEPRI, r2
    329a:	f3bf 8f6f 	isb	sy
}
    329e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    32a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    32a4:	428b      	cmp	r3, r1
		err = -EBUSY;
    32a6:	bf14      	ite	ne
    32a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    32ac:	f06f 000f 	mvneq.w	r0, #15
    32b0:	e7f1      	b.n	3296 <set_starting_state+0x20>

000032b2 <set_on_state>:
	__asm__ volatile(
    32b2:	f04f 0320 	mov.w	r3, #32
    32b6:	f3ef 8211 	mrs	r2, BASEPRI
    32ba:	f383 8811 	msr	BASEPRI, r3
    32be:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    32c2:	6803      	ldr	r3, [r0, #0]
    32c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    32c8:	f043 0302 	orr.w	r3, r3, #2
    32cc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    32ce:	f382 8811 	msr	BASEPRI, r2
    32d2:	f3bf 8f6f 	isb	sy
}
    32d6:	4770      	bx	lr

000032d8 <onoff_started_callback>:
	return &data->mgr[type];
    32d8:	68c0      	ldr	r0, [r0, #12]
{
    32da:	b410      	push	{r4}
	return &data->mgr[type];
    32dc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    32de:	241c      	movs	r4, #28
    32e0:	fb03 0004 	mla	r0, r3, r4, r0
    32e4:	2100      	movs	r1, #0
}
    32e6:	bc10      	pop	{r4}
	notify(mgr, 0);
    32e8:	4710      	bx	r2

000032ea <blocking_start_callback>:
{
    32ea:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    32ec:	f7ff bb96 	b.w	2a1c <z_impl_k_sem_give>

000032f0 <lfclk_spinwait>:
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    32f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    32f4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    32f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    32fc:	03c9      	lsls	r1, r1, #15
    32fe:	d5f9      	bpl.n	32f4 <lfclk_spinwait+0x4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3300:	f003 0303 	and.w	r3, r3, #3
	while (!(nrf_clock_is_running(NRF_CLOCK, d, (void *)&type)
    3304:	4298      	cmp	r0, r3
    3306:	d1f5      	bne.n	32f4 <lfclk_spinwait+0x4>
}
    3308:	4770      	bx	lr

0000330a <api_stop>:
{
    330a:	b538      	push	{r3, r4, r5, lr}
    330c:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    330e:	230c      	movs	r3, #12
{
    3310:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    3312:	4363      	muls	r3, r4
    3314:	68c0      	ldr	r0, [r0, #12]
    3316:	3340      	adds	r3, #64	; 0x40
    3318:	2180      	movs	r1, #128	; 0x80
    331a:	4418      	add	r0, r3
    331c:	f7ff ff92 	bl	3244 <set_off_state>
	if (err < 0) {
    3320:	2800      	cmp	r0, #0
    3322:	db05      	blt.n	3330 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    3324:	6869      	ldr	r1, [r5, #4]
    3326:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    332a:	6863      	ldr	r3, [r4, #4]
    332c:	4798      	blx	r3
	return 0;
    332e:	2000      	movs	r0, #0
}
    3330:	bd38      	pop	{r3, r4, r5, pc}

00003332 <api_start>:
{
    3332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3336:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    3338:	f04f 080c 	mov.w	r8, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    333c:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    333e:	fb08 f805 	mul.w	r8, r8, r5
{
    3342:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    3344:	f108 0040 	add.w	r0, r8, #64	; 0x40
    3348:	2180      	movs	r1, #128	; 0x80
    334a:	4420      	add	r0, r4
{
    334c:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
    334e:	f7ff ff92 	bl	3276 <set_starting_state>
	if (err < 0) {
    3352:	2800      	cmp	r0, #0
    3354:	db09      	blt.n	336a <api_start+0x38>
	subdata->cb = data->cb;
    3356:	4444      	add	r4, r8
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
    335c:	68bb      	ldr	r3, [r7, #8]
    335e:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
    3360:	6873      	ldr	r3, [r6, #4]
    3362:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    3366:	4798      	blx	r3
	return 0;
    3368:	2000      	movs	r0, #0
}
    336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000336e <z_clock_device_ctrl>:

int __weak z_clock_device_ctrl(struct device *device, uint32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return -ENOTSUP;
}
    336e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3372:	4770      	bx	lr

00003374 <z_clock_isr>:
}
    3374:	4770      	bx	lr

00003376 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3376:	4770      	bx	lr

00003378 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    3378:	f7fd beb8 	b.w	10ec <_DoInit>

0000337c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    337c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    337e:	f7ff fffb 	bl	3378 <SEGGER_RTT_Init>

	return 0;
}
    3382:	2000      	movs	r0, #0
    3384:	bd08      	pop	{r3, pc}

00003386 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    3386:	2100      	movs	r1, #0
    3388:	2001      	movs	r0, #1
    338a:	f000 b800 	b.w	338e <z_arm_fatal_error>

0000338e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    338e:	f000 b8f0 	b.w	3572 <z_fatal_error>

00003392 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3392:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3394:	6800      	ldr	r0, [r0, #0]
    3396:	f000 b8ec 	b.w	3572 <z_fatal_error>

0000339a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    339a:	b508      	push	{r3, lr}
	handler();
    339c:	f7fd ff96 	bl	12cc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    33a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    33a4:	f7fe b8c2 	b.w	152c <z_arm_exc_exit>

000033a8 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    33a8:	3901      	subs	r1, #1
    33aa:	4603      	mov	r3, r0
    33ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    33b0:	b90a      	cbnz	r2, 33b6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    33b2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    33b4:	4770      	bx	lr
		*d = *s;
    33b6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    33ba:	e7f7      	b.n	33ac <strcpy+0x4>

000033bc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    33bc:	1e43      	subs	r3, r0, #1
    33be:	3901      	subs	r1, #1
    33c0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    33c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    33c8:	4282      	cmp	r2, r0
    33ca:	d101      	bne.n	33d0 <strcmp+0x14>
    33cc:	2a00      	cmp	r2, #0
    33ce:	d1f7      	bne.n	33c0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    33d0:	1a10      	subs	r0, r2, r0
    33d2:	4770      	bx	lr

000033d4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    33d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    33d6:	ea81 0400 	eor.w	r4, r1, r0
    33da:	07a5      	lsls	r5, r4, #30
    33dc:	4603      	mov	r3, r0
    33de:	d00b      	beq.n	33f8 <memcpy+0x24>
    33e0:	3b01      	subs	r3, #1
    33e2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    33e4:	4291      	cmp	r1, r2
    33e6:	d11b      	bne.n	3420 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    33e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    33ea:	2a00      	cmp	r2, #0
    33ec:	d0fc      	beq.n	33e8 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    33ee:	f811 4b01 	ldrb.w	r4, [r1], #1
    33f2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    33f6:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    33f8:	079c      	lsls	r4, r3, #30
    33fa:	d1f6      	bne.n	33ea <memcpy+0x16>
    33fc:	f022 0403 	bic.w	r4, r2, #3
    3400:	1f1d      	subs	r5, r3, #4
    3402:	0896      	lsrs	r6, r2, #2
    3404:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3406:	42b9      	cmp	r1, r7
    3408:	d105      	bne.n	3416 <memcpy+0x42>
    340a:	f06f 0503 	mvn.w	r5, #3
    340e:	fb05 2206 	mla	r2, r5, r6, r2
    3412:	4423      	add	r3, r4
    3414:	e7e4      	b.n	33e0 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3416:	f851 cb04 	ldr.w	ip, [r1], #4
    341a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    341e:	e7f2      	b.n	3406 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    3420:	f811 4b01 	ldrb.w	r4, [r1], #1
    3424:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3428:	e7dc      	b.n	33e4 <memcpy+0x10>

0000342a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    342a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    342c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    342e:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3430:	079c      	lsls	r4, r3, #30
    3432:	d111      	bne.n	3458 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    3434:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3438:	f022 0603 	bic.w	r6, r2, #3
    343c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3440:	441e      	add	r6, r3
    3442:	0894      	lsrs	r4, r2, #2
    3444:	42b3      	cmp	r3, r6
    3446:	d10d      	bne.n	3464 <memset+0x3a>
    3448:	f06f 0503 	mvn.w	r5, #3
    344c:	fb05 2204 	mla	r2, r5, r4, r2
    3450:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3452:	4293      	cmp	r3, r2
    3454:	d109      	bne.n	346a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3456:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    3458:	2a00      	cmp	r2, #0
    345a:	d0fc      	beq.n	3456 <memset+0x2c>
		*(d_byte++) = c_byte;
    345c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3460:	3a01      	subs	r2, #1
    3462:	e7e5      	b.n	3430 <memset+0x6>
		*(d_word++) = c_word;
    3464:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    3468:	e7ec      	b.n	3444 <memset+0x1a>
		*(d_byte++) = c_byte;
    346a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    346e:	e7f0      	b.n	3452 <memset+0x28>

00003470 <_stdout_hook_default>:
}
    3470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3474:	4770      	bx	lr

00003476 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    3476:	f7fe bd5b 	b.w	1f30 <SystemInit>

0000347a <sys_set_power_state>:
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void sys_set_power_state(enum power_states state)
{
	switch (state) {
    347a:	b940      	cbnz	r0, 348e <sys_set_power_state+0x14>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    347c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3480:	2201      	movs	r2, #1
    3482:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    3486:	f3bf 8f4f 	dsb	sy
        __WFE();
    348a:	bf20      	wfe
    while (true)
    348c:	e7fd      	b.n	348a <sys_set_power_state+0x10>
#endif
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    348e:	4770      	bx	lr

00003490 <_sys_pm_power_state_exit_post_ops>:
    3490:	2300      	movs	r3, #0
    3492:	f383 8811 	msr	BASEPRI, r3
    3496:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    349a:	4770      	bx	lr

0000349c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    349c:	6843      	ldr	r3, [r0, #4]
    349e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    34a0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    34a4:	600b      	str	r3, [r1, #0]
}
    34a6:	2000      	movs	r0, #0
    34a8:	4770      	bx	lr

000034aa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34aa:	6843      	ldr	r3, [r0, #4]
    34ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    34ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    34b2:	4042      	eors	r2, r0
    34b4:	400a      	ands	r2, r1
    34b6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    34b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    34bc:	2000      	movs	r0, #0
    34be:	4770      	bx	lr

000034c0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34c0:	6843      	ldr	r3, [r0, #4]
    34c2:	685b      	ldr	r3, [r3, #4]
}
    34c4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    34c6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    34ca:	4770      	bx	lr

000034cc <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34cc:	6843      	ldr	r3, [r0, #4]
    34ce:	685b      	ldr	r3, [r3, #4]
}
    34d0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    34d2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    34d6:	4770      	bx	lr

000034d8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34d8:	6843      	ldr	r3, [r0, #4]
    34da:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    34dc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    34e0:	404b      	eors	r3, r1
    p_reg->OUT = value;
    34e2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    34e6:	2000      	movs	r0, #0
    34e8:	4770      	bx	lr

000034ea <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    34ea:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    34ec:	6858      	ldr	r0, [r3, #4]
{
    34ee:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    34f0:	b158      	cbz	r0, 350a <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    34f2:	2400      	movs	r4, #0
    34f4:	4281      	cmp	r1, r0
    34f6:	d113      	bne.n	3520 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    34f8:	6808      	ldr	r0, [r1, #0]
    34fa:	b95c      	cbnz	r4, 3514 <gpio_nrfx_manage_callback+0x2a>
    34fc:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    34fe:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    3500:	42a1      	cmp	r1, r4
    3502:	d100      	bne.n	3506 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    3504:	6098      	str	r0, [r3, #8]
	parent->next = child;
    3506:	2000      	movs	r0, #0
    3508:	6008      	str	r0, [r1, #0]
	if (set) {
    350a:	b972      	cbnz	r2, 352a <gpio_nrfx_manage_callback+0x40>
	return 0;
    350c:	2000      	movs	r0, #0
}
    350e:	bd30      	pop	{r4, r5, pc}
    3510:	4628      	mov	r0, r5
    3512:	e7ef      	b.n	34f4 <gpio_nrfx_manage_callback+0xa>
    3514:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    3516:	6898      	ldr	r0, [r3, #8]
    3518:	4281      	cmp	r1, r0
	list->tail = node;
    351a:	bf08      	it	eq
    351c:	609c      	streq	r4, [r3, #8]
}
    351e:	e7f2      	b.n	3506 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3520:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3522:	4604      	mov	r4, r0
    3524:	2d00      	cmp	r5, #0
    3526:	d1f3      	bne.n	3510 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    3528:	b13a      	cbz	r2, 353a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    352a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    352c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    352e:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    3530:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    3532:	2800      	cmp	r0, #0
    3534:	d1ea      	bne.n	350c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    3536:	6099      	str	r1, [r3, #8]
}
    3538:	e7e9      	b.n	350e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    353a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    353e:	e7e6      	b.n	350e <gpio_nrfx_manage_callback+0x24>

00003540 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    3540:	68c2      	ldr	r2, [r0, #12]
{
    3542:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3544:	e892 0003 	ldmia.w	r2, {r0, r1}
    3548:	e883 0003 	stmia.w	r3, {r0, r1}
}
    354c:	2000      	movs	r0, #0
    354e:	4770      	bx	lr

00003550 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    3550:	f000 b900 	b.w	3754 <z_impl_k_busy_wait>

00003554 <device_pm_control_nop>:
		       void *unused_context,
		       device_pm_cb cb,
		       void *unused_arg)
{
	return -ENOTSUP;
}
    3554:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3558:	4770      	bx	lr

0000355a <arch_system_halt>:
	__asm__ volatile(
    355a:	f04f 0220 	mov.w	r2, #32
    355e:	f3ef 8311 	mrs	r3, BASEPRI
    3562:	f382 8811 	msr	BASEPRI, r2
    3566:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    356a:	e7fe      	b.n	356a <arch_system_halt+0x10>

0000356c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    356c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    356e:	f7ff fff4 	bl	355a <arch_system_halt>

00003572 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3574:	4605      	mov	r5, r0
    3576:	460e      	mov	r6, r1
    3578:	f04f 0320 	mov.w	r3, #32
    357c:	f3ef 8711 	mrs	r7, BASEPRI
    3580:	f383 8811 	msr	BASEPRI, r3
    3584:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3588:	f7ff fa42 	bl	2a10 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    358c:	4631      	mov	r1, r6
    358e:	4604      	mov	r4, r0
    3590:	4628      	mov	r0, r5
    3592:	f7ff ffeb 	bl	356c <k_sys_fatal_error_handler>
	__asm__ volatile(
    3596:	f387 8811 	msr	BASEPRI, r7
    359a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    359e:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    35a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    35a4:	f7fd bfdc 	b.w	1560 <z_impl_k_thread_abort>

000035a8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    35a8:	f7ff bee5 	b.w	3376 <z_clock_idle_exit>

000035ac <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    35ac:	b921      	cbnz	r1, 35b8 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    35ae:	f3ef 8005 	mrs	r0, IPSR
    35b2:	b908      	cbnz	r0, 35b8 <z_reschedule+0xc>
    35b4:	f7fd bdca 	b.w	114c <arch_swap>
    35b8:	f381 8811 	msr	BASEPRI, r1
    35bc:	f3bf 8f6f 	isb	sy
}
    35c0:	4770      	bx	lr

000035c2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    35c2:	4603      	mov	r3, r0
    35c4:	b920      	cbnz	r0, 35d0 <z_reschedule_irqlock+0xe>
    35c6:	f3ef 8205 	mrs	r2, IPSR
    35ca:	b90a      	cbnz	r2, 35d0 <z_reschedule_irqlock+0xe>
    35cc:	f7fd bdbe 	b.w	114c <arch_swap>
    35d0:	f383 8811 	msr	BASEPRI, r3
    35d4:	f3bf 8f6f 	isb	sy
}
    35d8:	4770      	bx	lr

000035da <z_reschedule_unlocked>:
	__asm__ volatile(
    35da:	f04f 0320 	mov.w	r3, #32
    35de:	f3ef 8011 	mrs	r0, BASEPRI
    35e2:	f383 8811 	msr	BASEPRI, r3
    35e6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    35ea:	f7ff bfea 	b.w	35c2 <z_reschedule_irqlock>

000035ee <z_priq_dumb_best>:
{
    35ee:	4603      	mov	r3, r0
	return list->head == list;
    35f0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    35f2:	4283      	cmp	r3, r0
    35f4:	d003      	beq.n	35fe <z_priq_dumb_best+0x10>
	if (n != NULL) {
    35f6:	2800      	cmp	r0, #0
    35f8:	bf38      	it	cc
    35fa:	2000      	movcc	r0, #0
    35fc:	4770      	bx	lr
	struct k_thread *thread = NULL;
    35fe:	2000      	movs	r0, #0
}
    3600:	4770      	bx	lr

00003602 <z_ready_thread>:
{
    3602:	b510      	push	{r4, lr}
    3604:	f04f 0320 	mov.w	r3, #32
    3608:	f3ef 8411 	mrs	r4, BASEPRI
    360c:	f383 8811 	msr	BASEPRI, r3
    3610:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    3614:	f7fe ffa2 	bl	255c <ready_thread>
	__asm__ volatile(
    3618:	f384 8811 	msr	BASEPRI, r4
    361c:	f3bf 8f6f 	isb	sy
}
    3620:	bd10      	pop	{r4, pc}

00003622 <z_thread_timeout>:
{
    3622:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    3624:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    3628:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    362a:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    362e:	b1c3      	cbz	r3, 3662 <z_thread_timeout+0x40>
	__asm__ volatile(
    3630:	f04f 0320 	mov.w	r3, #32
    3634:	f3ef 8511 	mrs	r5, BASEPRI
    3638:	f383 8811 	msr	BASEPRI, r3
    363c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3640:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3644:	f7fe ff34 	bl	24b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3648:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    364c:	f023 0302 	bic.w	r3, r3, #2
    3650:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    3654:	2300      	movs	r3, #0
    3656:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    365a:	f385 8811 	msr	BASEPRI, r5
    365e:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3662:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3666:	f023 0314 	bic.w	r3, r3, #20
    366a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    366e:	4608      	mov	r0, r1
}
    3670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    3674:	f7ff bfc5 	b.w	3602 <z_ready_thread>

00003678 <z_remove_thread_from_ready_q>:
{
    3678:	b510      	push	{r4, lr}
	__asm__ volatile(
    367a:	f04f 0320 	mov.w	r3, #32
    367e:	f3ef 8411 	mrs	r4, BASEPRI
    3682:	f383 8811 	msr	BASEPRI, r3
    3686:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    368a:	f7ff f8c5 	bl	2818 <unready_thread>
	__asm__ volatile(
    368e:	f384 8811 	msr	BASEPRI, r4
    3692:	f3bf 8f6f 	isb	sy
}
    3696:	bd10      	pop	{r4, pc}

00003698 <add_to_waitq_locked>:
{
    3698:	b538      	push	{r3, r4, r5, lr}
    369a:	4604      	mov	r4, r0
    369c:	460d      	mov	r5, r1
	unready_thread(thread);
    369e:	f7ff f8bb 	bl	2818 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    36a2:	7b63      	ldrb	r3, [r4, #13]
    36a4:	f043 0302 	orr.w	r3, r3, #2
    36a8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    36aa:	b1c5      	cbz	r5, 36de <add_to_waitq_locked+0x46>
	return list->head == list;
    36ac:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    36ae:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    36b0:	429d      	cmp	r5, r3
    36b2:	bf08      	it	eq
    36b4:	2300      	moveq	r3, #0
    36b6:	2b00      	cmp	r3, #0
    36b8:	bf38      	it	cc
    36ba:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    36bc:	b183      	cbz	r3, 36e0 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    36be:	f994 100e 	ldrsb.w	r1, [r4, #14]
    36c2:	f993 200e 	ldrsb.w	r2, [r3, #14]
    36c6:	4291      	cmp	r1, r2
    36c8:	db04      	blt.n	36d4 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    36ca:	686a      	ldr	r2, [r5, #4]
    36cc:	429a      	cmp	r2, r3
    36ce:	d007      	beq.n	36e0 <add_to_waitq_locked+0x48>
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	e7f3      	b.n	36bc <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    36d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    36d6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    36da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    36dc:	605c      	str	r4, [r3, #4]
}
    36de:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    36e0:	686b      	ldr	r3, [r5, #4]
    36e2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    36e4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    36e6:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    36e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    36ea:	606c      	str	r4, [r5, #4]
    36ec:	e7f7      	b.n	36de <add_to_waitq_locked+0x46>

000036ee <z_unpend_first_thread>:
{
    36ee:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    36f0:	f04f 0320 	mov.w	r3, #32
    36f4:	f3ef 8211 	mrs	r2, BASEPRI
    36f8:	f383 8811 	msr	BASEPRI, r3
    36fc:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3700:	f7ff ff75 	bl	35ee <z_priq_dumb_best>
    3704:	4604      	mov	r4, r0
	__asm__ volatile(
    3706:	f382 8811 	msr	BASEPRI, r2
    370a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    370e:	b1c8      	cbz	r0, 3744 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3710:	f04f 0320 	mov.w	r3, #32
    3714:	f3ef 8511 	mrs	r5, BASEPRI
    3718:	f383 8811 	msr	BASEPRI, r3
    371c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3720:	4601      	mov	r1, r0
    3722:	6880      	ldr	r0, [r0, #8]
    3724:	f7fe fec4 	bl	24b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3728:	7b63      	ldrb	r3, [r4, #13]
    372a:	f023 0302 	bic.w	r3, r3, #2
    372e:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    3730:	2300      	movs	r3, #0
    3732:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    3734:	f385 8811 	msr	BASEPRI, r5
    3738:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    373c:	f104 0018 	add.w	r0, r4, #24
    3740:	f000 f80a 	bl	3758 <z_abort_timeout>
}
    3744:	4620      	mov	r0, r4
    3746:	bd38      	pop	{r3, r4, r5, pc}

00003748 <k_is_in_isr>:
    3748:	f3ef 8005 	mrs	r0, IPSR
}
    374c:	3800      	subs	r0, #0
    374e:	bf18      	it	ne
    3750:	2001      	movne	r0, #1
    3752:	4770      	bx	lr

00003754 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    3754:	f7fd bff4 	b.w	1740 <arch_busy_wait>

00003758 <z_abort_timeout>:
{
    3758:	b510      	push	{r4, lr}
	__asm__ volatile(
    375a:	f04f 0220 	mov.w	r2, #32
    375e:	f3ef 8411 	mrs	r4, BASEPRI
    3762:	f382 8811 	msr	BASEPRI, r2
    3766:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    376a:	6803      	ldr	r3, [r0, #0]
    376c:	b13b      	cbz	r3, 377e <z_abort_timeout+0x26>
			remove_timeout(to);
    376e:	f7ff fa2d 	bl	2bcc <remove_timeout>
			ret = 0;
    3772:	2000      	movs	r0, #0
	__asm__ volatile(
    3774:	f384 8811 	msr	BASEPRI, r4
    3778:	f3bf 8f6f 	isb	sy
}
    377c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    377e:	f06f 0015 	mvn.w	r0, #21
    3782:	e7f7      	b.n	3774 <z_abort_timeout+0x1c>

00003784 <z_get_next_timeout_expiry>:
{
    3784:	b510      	push	{r4, lr}
	__asm__ volatile(
    3786:	f04f 0320 	mov.w	r3, #32
    378a:	f3ef 8411 	mrs	r4, BASEPRI
    378e:	f383 8811 	msr	BASEPRI, r3
    3792:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3796:	f7ff fa33 	bl	2c00 <next_timeout>
	__asm__ volatile(
    379a:	f384 8811 	msr	BASEPRI, r4
    379e:	f3bf 8f6f 	isb	sy
}
    37a2:	bd10      	pop	{r4, pc}

000037a4 <z_set_timeout_expiry>:
{
    37a4:	b570      	push	{r4, r5, r6, lr}
    37a6:	4604      	mov	r4, r0
    37a8:	460d      	mov	r5, r1
	__asm__ volatile(
    37aa:	f04f 0320 	mov.w	r3, #32
    37ae:	f3ef 8611 	mrs	r6, BASEPRI
    37b2:	f383 8811 	msr	BASEPRI, r3
    37b6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    37ba:	f7ff fa21 	bl	2c00 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    37be:	2801      	cmp	r0, #1
    37c0:	dd05      	ble.n	37ce <z_set_timeout_expiry+0x2a>
    37c2:	42a0      	cmp	r0, r4
    37c4:	dd03      	ble.n	37ce <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    37c6:	4629      	mov	r1, r5
    37c8:	4620      	mov	r0, r4
    37ca:	f7fd fc17 	bl	ffc <z_clock_set_timeout>
	__asm__ volatile(
    37ce:	f386 8811 	msr	BASEPRI, r6
    37d2:	f3bf 8f6f 	isb	sy
}
    37d6:	bd70      	pop	{r4, r5, r6, pc}

000037d8 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    37d8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    37da:	f7ff fb21 	bl	2e20 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    37de:	bd08      	pop	{r3, pc}

000037e0 <k_heap_init>:
{
    37e0:	b410      	push	{r4}
    37e2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    37e6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    37ea:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    37ec:	f7ff bcb1 	b.w	3152 <sys_heap_init>

000037f0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    37f0:	4770      	bx	lr
